function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _assert_this_initialized(self1) {
    if (self1 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self1;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get;
    } else {
        _get = function get(target, property, receiver) {
            var base = _super_prop_base(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) {
                return desc.get.call(receiver || target);
            }
            return desc.value;
        };
    }
    return _get(target, property, receiver || target);
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possible_constructor_return(self1, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self1);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _super_prop_base(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = _get_prototype_of(object);
        if (object === null) break;
    }
    return object;
}
function _to_array(arr) {
    return _array_with_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_rest();
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
!function(t, e) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).Konva = e();
}(this, function() {
    "use strict";
    /*
   * Konva JavaScript Framework v8.1.1
   * http://konvajs.org/
   * Licensed under the MIT
   * Date: Thu Jul 01 2021
   *
   * Original work Copyright (C) 2011 - 2013 by Eric Rowell (KineticJS)
   * Modified work Copyright (C) 2014 - present by Anton Lavrenov (Konva)
   *
   * @license
   */ var t = Math.PI / 180;
    var e = "undefined" != typeof global ? global : "undefined" != typeof window ? window : "undefined" != typeof WorkerGlobalScope ? self : {}, i = {
        _global: e,
        version: "8.1.1",
        isBrowser: "undefined" != typeof window && ("[object Window]" === ({}).toString.call(window) || "[object global]" === ({}).toString.call(window)),
        isUnminified: /param/.test((function(t) {}).toString()),
        dblClickWindow: 400,
        getAngle: function(e) {
            return i.angleDeg ? e * t : e;
        },
        enableTrace: !1,
        pointerEventsEnabled: !0,
        autoDrawEnabled: !0,
        hitOnDragEnabled: !1,
        capturePointerEventsEnabled: !1,
        _mouseListenClick: !1,
        _touchListenClick: !1,
        _pointerListenClick: !1,
        _mouseInDblClickWindow: !1,
        _touchInDblClickWindow: !1,
        _pointerInDblClickWindow: !1,
        pixelRatio: "undefined" != typeof window && window.devicePixelRatio || 1,
        dragDistance: 3,
        angleDeg: !0,
        showWarnings: !0,
        dragButtons: [
            0,
            1
        ],
        isDragging: function() {
            return i.DD.isDragging;
        },
        isDragReady: function() {
            return !!i.DD.node;
        },
        document: e.document,
        _injectGlobal: function _injectGlobal(t) {
            e.Konva = t;
        }
    }, r = function(t) {
        i[t.prototype.getClassName()] = t;
    };
    i._injectGlobal(i);
    var a = /*#__PURE__*/ function() {
        function a() {
            var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [
                1,
                0,
                0,
                1,
                0,
                0
            ];
            _class_call_check(this, a);
            this.dirty = !1, this.m = t && t.slice() || [
                1,
                0,
                0,
                1,
                0,
                0
            ];
        }
        _create_class(a, [
            {
                key: "reset",
                value: function reset() {
                    this.m[0] = 1, this.m[1] = 0, this.m[2] = 0, this.m[3] = 1, this.m[4] = 0, this.m[5] = 0;
                }
            },
            {
                key: "copy",
                value: function copy() {
                    return new a(this.m);
                }
            },
            {
                key: "copyInto",
                value: function copyInto(t) {
                    t.m[0] = this.m[0], t.m[1] = this.m[1], t.m[2] = this.m[2], t.m[3] = this.m[3], t.m[4] = this.m[4], t.m[5] = this.m[5];
                }
            },
            {
                key: "point",
                value: function point(t) {
                    var e = this.m;
                    return {
                        x: e[0] * t.x + e[2] * t.y + e[4],
                        y: e[1] * t.x + e[3] * t.y + e[5]
                    };
                }
            },
            {
                key: "translate",
                value: function translate(t, e) {
                    return this.m[4] += this.m[0] * t + this.m[2] * e, this.m[5] += this.m[1] * t + this.m[3] * e, this;
                }
            },
            {
                key: "scale",
                value: function scale(t, e) {
                    return this.m[0] *= t, this.m[1] *= t, this.m[2] *= e, this.m[3] *= e, this;
                }
            },
            {
                key: "rotate",
                value: function rotate(t) {
                    var e = Math.cos(t), i = Math.sin(t), r = this.m[0] * e + this.m[2] * i, _$a = this.m[1] * e + this.m[3] * i, n = this.m[0] * -i + this.m[2] * e, s = this.m[1] * -i + this.m[3] * e;
                    return this.m[0] = r, this.m[1] = _$a, this.m[2] = n, this.m[3] = s, this;
                }
            },
            {
                key: "getTranslation",
                value: function getTranslation() {
                    return {
                        x: this.m[4],
                        y: this.m[5]
                    };
                }
            },
            {
                key: "skew",
                value: function skew(t, e) {
                    var i = this.m[0] + this.m[2] * e, r = this.m[1] + this.m[3] * e, _$a = this.m[2] + this.m[0] * t, n = this.m[3] + this.m[1] * t;
                    return this.m[0] = i, this.m[1] = r, this.m[2] = _$a, this.m[3] = n, this;
                }
            },
            {
                key: "multiply",
                value: function multiply(t) {
                    var e = this.m[0] * t.m[0] + this.m[2] * t.m[1], i = this.m[1] * t.m[0] + this.m[3] * t.m[1], r = this.m[0] * t.m[2] + this.m[2] * t.m[3], _$a = this.m[1] * t.m[2] + this.m[3] * t.m[3], n = this.m[0] * t.m[4] + this.m[2] * t.m[5] + this.m[4], s = this.m[1] * t.m[4] + this.m[3] * t.m[5] + this.m[5];
                    return this.m[0] = e, this.m[1] = i, this.m[2] = r, this.m[3] = _$a, this.m[4] = n, this.m[5] = s, this;
                }
            },
            {
                key: "invert",
                value: function invert() {
                    var t = 1 / (this.m[0] * this.m[3] - this.m[1] * this.m[2]), e = this.m[3] * t, i = -this.m[1] * t, r = -this.m[2] * t, _$a = this.m[0] * t, n = t * (this.m[2] * this.m[5] - this.m[3] * this.m[4]), s = t * (this.m[1] * this.m[4] - this.m[0] * this.m[5]);
                    return this.m[0] = e, this.m[1] = i, this.m[2] = r, this.m[3] = _$a, this.m[4] = n, this.m[5] = s, this;
                }
            },
            {
                key: "getMatrix",
                value: function getMatrix() {
                    return this.m;
                }
            },
            {
                key: "setAbsolutePosition",
                value: function setAbsolutePosition(t, e) {
                    var i = this.m[0], r = this.m[1], _$a = this.m[2], n = this.m[3], s = this.m[4], o = (i * (e - this.m[5]) - r * (t - s)) / (i * n - r * _$a), h = (t - s - _$a * o) / i;
                    return this.translate(h, o);
                }
            },
            {
                key: "decompose",
                value: function decompose() {
                    var t = this.m[0], e = this.m[1], i = this.m[2], r = this.m[3], _$a = t * r - e * i;
                    var n = {
                        x: this.m[4],
                        y: this.m[5],
                        rotation: 0,
                        scaleX: 0,
                        scaleY: 0,
                        skewX: 0,
                        skewY: 0
                    };
                    if (0 != t || 0 != e) {
                        var s = Math.sqrt(t * t + e * e);
                        n.rotation = e > 0 ? Math.acos(t / s) : -Math.acos(t / s), n.scaleX = s, n.scaleY = _$a / s, n.skewX = (t * i + e * r) / _$a, n.skewY = 0;
                    } else if (0 != i || 0 != r) {
                        var o = Math.sqrt(i * i + r * r);
                        n.rotation = Math.PI / 2 - (r > 0 ? Math.acos(-i / o) : -Math.acos(i / o)), n.scaleX = _$a / o, n.scaleY = o, n.skewX = 0, n.skewY = (t * i + e * r) / _$a;
                    }
                    return n.rotation = c._getRotation(n.rotation), n;
                }
            }
        ]);
        return a;
    }();
    var n = Math.PI / 180, s = 180 / Math.PI, o = {
        aliceblue: [
            240,
            248,
            255
        ],
        antiquewhite: [
            250,
            235,
            215
        ],
        aqua: [
            0,
            255,
            255
        ],
        aquamarine: [
            127,
            255,
            212
        ],
        azure: [
            240,
            255,
            255
        ],
        beige: [
            245,
            245,
            220
        ],
        bisque: [
            255,
            228,
            196
        ],
        black: [
            0,
            0,
            0
        ],
        blanchedalmond: [
            255,
            235,
            205
        ],
        blue: [
            0,
            0,
            255
        ],
        blueviolet: [
            138,
            43,
            226
        ],
        brown: [
            165,
            42,
            42
        ],
        burlywood: [
            222,
            184,
            135
        ],
        cadetblue: [
            95,
            158,
            160
        ],
        chartreuse: [
            127,
            255,
            0
        ],
        chocolate: [
            210,
            105,
            30
        ],
        coral: [
            255,
            127,
            80
        ],
        cornflowerblue: [
            100,
            149,
            237
        ],
        cornsilk: [
            255,
            248,
            220
        ],
        crimson: [
            220,
            20,
            60
        ],
        cyan: [
            0,
            255,
            255
        ],
        darkblue: [
            0,
            0,
            139
        ],
        darkcyan: [
            0,
            139,
            139
        ],
        darkgoldenrod: [
            184,
            132,
            11
        ],
        darkgray: [
            169,
            169,
            169
        ],
        darkgreen: [
            0,
            100,
            0
        ],
        darkgrey: [
            169,
            169,
            169
        ],
        darkkhaki: [
            189,
            183,
            107
        ],
        darkmagenta: [
            139,
            0,
            139
        ],
        darkolivegreen: [
            85,
            107,
            47
        ],
        darkorange: [
            255,
            140,
            0
        ],
        darkorchid: [
            153,
            50,
            204
        ],
        darkred: [
            139,
            0,
            0
        ],
        darksalmon: [
            233,
            150,
            122
        ],
        darkseagreen: [
            143,
            188,
            143
        ],
        darkslateblue: [
            72,
            61,
            139
        ],
        darkslategray: [
            47,
            79,
            79
        ],
        darkslategrey: [
            47,
            79,
            79
        ],
        darkturquoise: [
            0,
            206,
            209
        ],
        darkviolet: [
            148,
            0,
            211
        ],
        deeppink: [
            255,
            20,
            147
        ],
        deepskyblue: [
            0,
            191,
            255
        ],
        dimgray: [
            105,
            105,
            105
        ],
        dimgrey: [
            105,
            105,
            105
        ],
        dodgerblue: [
            30,
            144,
            255
        ],
        firebrick: [
            178,
            34,
            34
        ],
        floralwhite: [
            255,
            255,
            240
        ],
        forestgreen: [
            34,
            139,
            34
        ],
        fuchsia: [
            255,
            0,
            255
        ],
        gainsboro: [
            220,
            220,
            220
        ],
        ghostwhite: [
            248,
            248,
            255
        ],
        gold: [
            255,
            215,
            0
        ],
        goldenrod: [
            218,
            165,
            32
        ],
        gray: [
            128,
            128,
            128
        ],
        green: [
            0,
            128,
            0
        ],
        greenyellow: [
            173,
            255,
            47
        ],
        grey: [
            128,
            128,
            128
        ],
        honeydew: [
            240,
            255,
            240
        ],
        hotpink: [
            255,
            105,
            180
        ],
        indianred: [
            205,
            92,
            92
        ],
        indigo: [
            75,
            0,
            130
        ],
        ivory: [
            255,
            255,
            240
        ],
        khaki: [
            240,
            230,
            140
        ],
        lavender: [
            230,
            230,
            250
        ],
        lavenderblush: [
            255,
            240,
            245
        ],
        lawngreen: [
            124,
            252,
            0
        ],
        lemonchiffon: [
            255,
            250,
            205
        ],
        lightblue: [
            173,
            216,
            230
        ],
        lightcoral: [
            240,
            128,
            128
        ],
        lightcyan: [
            224,
            255,
            255
        ],
        lightgoldenrodyellow: [
            250,
            250,
            210
        ],
        lightgray: [
            211,
            211,
            211
        ],
        lightgreen: [
            144,
            238,
            144
        ],
        lightgrey: [
            211,
            211,
            211
        ],
        lightpink: [
            255,
            182,
            193
        ],
        lightsalmon: [
            255,
            160,
            122
        ],
        lightseagreen: [
            32,
            178,
            170
        ],
        lightskyblue: [
            135,
            206,
            250
        ],
        lightslategray: [
            119,
            136,
            153
        ],
        lightslategrey: [
            119,
            136,
            153
        ],
        lightsteelblue: [
            176,
            196,
            222
        ],
        lightyellow: [
            255,
            255,
            224
        ],
        lime: [
            0,
            255,
            0
        ],
        limegreen: [
            50,
            205,
            50
        ],
        linen: [
            250,
            240,
            230
        ],
        magenta: [
            255,
            0,
            255
        ],
        maroon: [
            128,
            0,
            0
        ],
        mediumaquamarine: [
            102,
            205,
            170
        ],
        mediumblue: [
            0,
            0,
            205
        ],
        mediumorchid: [
            186,
            85,
            211
        ],
        mediumpurple: [
            147,
            112,
            219
        ],
        mediumseagreen: [
            60,
            179,
            113
        ],
        mediumslateblue: [
            123,
            104,
            238
        ],
        mediumspringgreen: [
            0,
            250,
            154
        ],
        mediumturquoise: [
            72,
            209,
            204
        ],
        mediumvioletred: [
            199,
            21,
            133
        ],
        midnightblue: [
            25,
            25,
            112
        ],
        mintcream: [
            245,
            255,
            250
        ],
        mistyrose: [
            255,
            228,
            225
        ],
        moccasin: [
            255,
            228,
            181
        ],
        navajowhite: [
            255,
            222,
            173
        ],
        navy: [
            0,
            0,
            128
        ],
        oldlace: [
            253,
            245,
            230
        ],
        olive: [
            128,
            128,
            0
        ],
        olivedrab: [
            107,
            142,
            35
        ],
        orange: [
            255,
            165,
            0
        ],
        orangered: [
            255,
            69,
            0
        ],
        orchid: [
            218,
            112,
            214
        ],
        palegoldenrod: [
            238,
            232,
            170
        ],
        palegreen: [
            152,
            251,
            152
        ],
        paleturquoise: [
            175,
            238,
            238
        ],
        palevioletred: [
            219,
            112,
            147
        ],
        papayawhip: [
            255,
            239,
            213
        ],
        peachpuff: [
            255,
            218,
            185
        ],
        peru: [
            205,
            133,
            63
        ],
        pink: [
            255,
            192,
            203
        ],
        plum: [
            221,
            160,
            203
        ],
        powderblue: [
            176,
            224,
            230
        ],
        purple: [
            128,
            0,
            128
        ],
        rebeccapurple: [
            102,
            51,
            153
        ],
        red: [
            255,
            0,
            0
        ],
        rosybrown: [
            188,
            143,
            143
        ],
        royalblue: [
            65,
            105,
            225
        ],
        saddlebrown: [
            139,
            69,
            19
        ],
        salmon: [
            250,
            128,
            114
        ],
        sandybrown: [
            244,
            164,
            96
        ],
        seagreen: [
            46,
            139,
            87
        ],
        seashell: [
            255,
            245,
            238
        ],
        sienna: [
            160,
            82,
            45
        ],
        silver: [
            192,
            192,
            192
        ],
        skyblue: [
            135,
            206,
            235
        ],
        slateblue: [
            106,
            90,
            205
        ],
        slategray: [
            119,
            128,
            144
        ],
        slategrey: [
            119,
            128,
            144
        ],
        snow: [
            255,
            255,
            250
        ],
        springgreen: [
            0,
            255,
            127
        ],
        steelblue: [
            70,
            130,
            180
        ],
        tan: [
            210,
            180,
            140
        ],
        teal: [
            0,
            128,
            128
        ],
        thistle: [
            216,
            191,
            216
        ],
        transparent: [
            255,
            255,
            255,
            0
        ],
        tomato: [
            255,
            99,
            71
        ],
        turquoise: [
            64,
            224,
            208
        ],
        violet: [
            238,
            130,
            238
        ],
        wheat: [
            245,
            222,
            179
        ],
        white: [
            255,
            255,
            255
        ],
        whitesmoke: [
            245,
            245,
            245
        ],
        yellow: [
            255,
            255,
            0
        ],
        yellowgreen: [
            154,
            205,
            5
        ]
    }, h = /rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/, l = [];
    var d = "undefined" != typeof requestAnimationFrame && requestAnimationFrame || function(t) {
        setTimeout(t, 60);
    }, c = {
        _isElement: function(t) {
            return !(!t || 1 != t.nodeType);
        },
        _isFunction: function(t) {
            return !!(t && t.constructor && t.call && t.apply);
        },
        _isPlainObject: function(t) {
            return !!t && t.constructor === Object;
        },
        _isArray: function(t) {
            return "[object Array]" === Object.prototype.toString.call(t);
        },
        _isNumber: function(t) {
            return "[object Number]" === Object.prototype.toString.call(t) && !isNaN(t) && isFinite(t);
        },
        _isString: function(t) {
            return "[object String]" === Object.prototype.toString.call(t);
        },
        _isBoolean: function(t) {
            return "[object Boolean]" === Object.prototype.toString.call(t);
        },
        isObject: function(t) {
            return _instanceof(t, Object);
        },
        isValidSelector: function isValidSelector(t) {
            if ("string" != typeof t) return !1;
            var e = t[0];
            return "#" === e || "." === e || e === e.toUpperCase();
        },
        _sign: function(t) {
            return 0 === t || t > 0 ? 1 : -1;
        },
        requestAnimFrame: function requestAnimFrame(t) {
            l.push(t), 1 === l.length && d(function() {
                var _$t = l;
                l = [], _$t.forEach(function(t) {
                    t();
                });
            });
        },
        createCanvasElement: function createCanvasElement() {
            var t = document.createElement("canvas");
            try {
                t.style = t.style || {};
            } catch (t) {}
            return t;
        },
        createImageElement: function() {
            return document.createElement("img");
        },
        _isInDocument: function _isInDocument(t) {
            for(; t = t.parentNode;)if (t == document) return !0;
            return !1;
        },
        _urlToImage: function _urlToImage(t, e) {
            var i = c.createImageElement();
            i.onload = function() {
                e(i);
            }, i.src = t;
        },
        _rgbToHex: function(t, e, i) {
            return ((1 << 24) + (t << 16) + (e << 8) + i).toString(16).slice(1);
        },
        _hexToRgb: function _hexToRgb(t) {
            t = t.replace("#", "");
            var e = parseInt(t, 16);
            return {
                r: e >> 16 & 255,
                g: e >> 8 & 255,
                b: 255 & e
            };
        },
        getRandomColor: function getRandomColor() {
            for(var t = (16777215 * Math.random() << 0).toString(16); t.length < 6;)t = "0" + t;
            return "#" + t;
        },
        getRGB: function getRGB(t) {
            var e;
            return t in o ? {
                r: (e = o[t])[0],
                g: e[1],
                b: e[2]
            } : "#" === t[0] ? this._hexToRgb(t.substring(1)) : "rgb(" === t.substr(0, 4) ? (e = h.exec(t.replace(/ /g, "")), {
                r: parseInt(e[1], 10),
                g: parseInt(e[2], 10),
                b: parseInt(e[3], 10)
            }) : {
                r: 0,
                g: 0,
                b: 0
            };
        },
        colorToRGBA: function(t) {
            return t = t || "black", c._namedColorToRBA(t) || c._hex3ColorToRGBA(t) || c._hex6ColorToRGBA(t) || c._rgbColorToRGBA(t) || c._rgbaColorToRGBA(t) || c._hslColorToRGBA(t);
        },
        _namedColorToRBA: function _namedColorToRBA(t) {
            var e = o[t.toLowerCase()];
            return e ? {
                r: e[0],
                g: e[1],
                b: e[2],
                a: 1
            } : null;
        },
        _rgbColorToRGBA: function _rgbColorToRGBA(t) {
            if (0 === t.indexOf("rgb(")) {
                var e = (t = t.match(/rgb\(([^)]+)\)/)[1]).split(/ *, */).map(Number);
                return {
                    r: e[0],
                    g: e[1],
                    b: e[2],
                    a: 1
                };
            }
        },
        _rgbaColorToRGBA: function _rgbaColorToRGBA(t) {
            if (0 === t.indexOf("rgba(")) {
                var e = (t = t.match(/rgba\(([^)]+)\)/)[1]).split(/ *, */).map(Number);
                return {
                    r: e[0],
                    g: e[1],
                    b: e[2],
                    a: e[3]
                };
            }
        },
        _hex6ColorToRGBA: function _hex6ColorToRGBA(t) {
            if ("#" === t[0] && 7 === t.length) return {
                r: parseInt(t.slice(1, 3), 16),
                g: parseInt(t.slice(3, 5), 16),
                b: parseInt(t.slice(5, 7), 16),
                a: 1
            };
        },
        _hex3ColorToRGBA: function _hex3ColorToRGBA(t) {
            if ("#" === t[0] && 4 === t.length) return {
                r: parseInt(t[1] + t[1], 16),
                g: parseInt(t[2] + t[2], 16),
                b: parseInt(t[3] + t[3], 16),
                a: 1
            };
        },
        _hslColorToRGBA: function _hslColorToRGBA(t) {
            if (/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.test(t)) {
                var _exec = _to_array(/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(t)), e = _exec[0], i = _exec.slice(1), r = Number(i[0]) / 360, a = Number(i[1]) / 100, n = Number(i[2]) / 100;
                var s, o, h;
                if (0 === a) return h = 255 * n, {
                    r: Math.round(h),
                    g: Math.round(h),
                    b: Math.round(h),
                    a: 1
                };
                s = n < .5 ? n * (1 + a) : n + a - n * a;
                var l = 2 * n - s, d = [
                    0,
                    0,
                    0
                ];
                for(var _$t = 0; _$t < 3; _$t++)o = r + 1 / 3 * -(_$t - 1), o < 0 && o++, o > 1 && o--, h = 6 * o < 1 ? l + 6 * (s - l) * o : 2 * o < 1 ? s : 3 * o < 2 ? l + (s - l) * (2 / 3 - o) * 6 : l, d[_$t] = 255 * h;
                return {
                    r: Math.round(d[0]),
                    g: Math.round(d[1]),
                    b: Math.round(d[2]),
                    a: 1
                };
            }
        },
        haveIntersection: function(t, e) {
            return !(e.x > t.x + t.width || e.x + e.width < t.x || e.y > t.y + t.height || e.y + e.height < t.y);
        },
        cloneObject: function cloneObject(t) {
            var e = {};
            for(var i in t)this._isPlainObject(t[i]) ? e[i] = this.cloneObject(t[i]) : this._isArray(t[i]) ? e[i] = this.cloneArray(t[i]) : e[i] = t[i];
            return e;
        },
        cloneArray: function(t) {
            return t.slice(0);
        },
        degToRad: function(t) {
            return t * n;
        },
        radToDeg: function(t) {
            return t * s;
        },
        _degToRad: function(t) {
            return c.warn("Util._degToRad is removed. Please use public Util.degToRad instead."), c.degToRad(t);
        },
        _radToDeg: function(t) {
            return c.warn("Util._radToDeg is removed. Please use public Util.radToDeg instead."), c.radToDeg(t);
        },
        _getRotation: function(t) {
            return i.angleDeg ? c.radToDeg(t) : t;
        },
        _capitalize: function(t) {
            return t.charAt(0).toUpperCase() + t.slice(1);
        },
        throw: function _throw(t) {
            throw new Error("Konva error: " + t);
        },
        error: function error(t) {
            console.error("Konva error: " + t);
        },
        warn: function warn(t) {
            i.showWarnings && console.warn("Konva warning: " + t);
        },
        each: function each(t, e) {
            for(var i in t)e(i, t[i]);
        },
        _inRange: function(t, e, i) {
            return e <= t && t < i;
        },
        _getProjectionToSegment: function _getProjectionToSegment(t, e, i, r, a, n) {
            var s, o, h, l = (t - i) * (t - i) + (e - r) * (e - r);
            if (0 == l) s = t, o = e, h = (a - i) * (a - i) + (n - r) * (n - r);
            else {
                var d = ((a - t) * (i - t) + (n - e) * (r - e)) / l;
                d < 0 ? (s = t, o = e, h = (t - a) * (t - a) + (e - n) * (e - n)) : d > 1 ? (s = i, o = r, h = (i - a) * (i - a) + (r - n) * (r - n)) : h = ((s = t + d * (i - t)) - a) * (s - a) + ((o = e + d * (r - e)) - n) * (o - n);
            }
            return [
                s,
                o,
                h
            ];
        },
        _getProjectionToLine: function _getProjectionToLine(t, e, i) {
            var r = c.cloneObject(t), a = Number.MAX_VALUE;
            return e.forEach(function(n, s) {
                if (i || s !== e.length - 1) {
                    var o = e[(s + 1) % e.length], h = c._getProjectionToSegment(n.x, n.y, o.x, o.y, t.x, t.y), l = h[0], d = h[1], g = h[2];
                    g < a && (r.x = l, r.y = d, a = g);
                }
            }), r;
        },
        _prepareArrayForTween: function _prepareArrayForTween(t, e, i) {
            var r, a = [], n = [];
            if (t.length > e.length) {
                var s = e;
                e = t, t = s;
            }
            for(r = 0; r < t.length; r += 2)a.push({
                x: t[r],
                y: t[r + 1]
            });
            for(r = 0; r < e.length; r += 2)n.push({
                x: e[r],
                y: e[r + 1]
            });
            var o = [];
            return n.forEach(function(t) {
                var _$e = c._getProjectionToLine(t, a, i);
                o.push(_$e.x), o.push(_$e.y);
            }), o;
        },
        _prepareToStringify: function _prepareToStringify(t) {
            var e;
            for(var i in t.visitedByCircularReferenceRemoval = !0, t)if (t.hasOwnProperty(i) && t[i] && "object" == typeof t[i]) {
                if (e = Object.getOwnPropertyDescriptor(t, i), t[i].visitedByCircularReferenceRemoval || c._isElement(t[i])) {
                    if (!e.configurable) return null;
                    delete t[i];
                } else if (null === c._prepareToStringify(t[i])) {
                    if (!e.configurable) return null;
                    delete t[i];
                }
            }
            return delete t.visitedByCircularReferenceRemoval, t;
        },
        _assign: function _assign(t, e) {
            for(var i in e)t[i] = e[i];
            return t;
        },
        _getFirstPointerId: function(t) {
            return t.touches ? t.changedTouches[0].identifier : 999;
        }
    };
    function g(t) {
        return c._isString(t) ? '"' + t + '"' : "[object Number]" === Object.prototype.toString.call(t) || c._isBoolean(t) ? t : Object.prototype.toString.call(t);
    }
    function u(t) {
        return t > 255 ? 255 : t < 0 ? 0 : Math.round(t);
    }
    function f() {
        if (i.isUnminified) return function(t, e) {
            return c._isNumber(t) || c.warn(g(t) + ' is a not valid value for "' + e + '" attribute. The value should be a number.'), t;
        };
    }
    function p(t) {
        if (i.isUnminified) return function(e, i) {
            var r = c._isNumber(e), a = c._isArray(e) && e.length == t;
            return r || a || c.warn(g(e) + ' is a not valid value for "' + i + '" attribute. The value should be a number or Array<number>(' + t + ")"), e;
        };
    }
    function v() {
        if (i.isUnminified) return function(t, e) {
            return c._isNumber(t) || "auto" === t || c.warn(g(t) + ' is a not valid value for "' + e + '" attribute. The value should be a number or "auto".'), t;
        };
    }
    function m() {
        if (i.isUnminified) return function(t, e) {
            return c._isString(t) || c.warn(g(t) + ' is a not valid value for "' + e + '" attribute. The value should be a string.'), t;
        };
    }
    function _() {
        if (i.isUnminified) return function(t, e) {
            var i = c._isString(t), r = "[object CanvasGradient]" === Object.prototype.toString.call(t) || t && t.addColorStop;
            return i || r || c.warn(g(t) + ' is a not valid value for "' + e + '" attribute. The value should be a string or a native gradient.'), t;
        };
    }
    function y() {
        if (i.isUnminified) return function(t, e) {
            return !0 === t || !1 === t || c.warn(g(t) + ' is a not valid value for "' + e + '" attribute. The value should be a boolean.'), t;
        };
    }
    var x = {
        addGetterSetter: function addGetterSetter(t, e, i, r, a) {
            x.addGetter(t, e, i), x.addSetter(t, e, r, a), x.addOverloadedGetterSetter(t, e);
        },
        addGetter: function addGetter(t, e, i) {
            var r = "get" + c._capitalize(e);
            t.prototype[r] = t.prototype[r] || function() {
                var _$t = this.attrs[e];
                return void 0 === _$t ? i : _$t;
            };
        },
        addSetter: function addSetter(t, e, i, r) {
            var a = "set" + c._capitalize(e);
            t.prototype[a] || x.overWriteSetter(t, e, i, r);
        },
        overWriteSetter: function overWriteSetter(t, e, i, r) {
            var a = "set" + c._capitalize(e);
            t.prototype[a] = function(t) {
                return i && null != t && (t = i.call(this, t, e)), this._setAttr(e, t), r && r.call(this), this;
            };
        },
        addComponentsGetterSetter: function addComponentsGetterSetter(t, e, r, a, n) {
            var s, o, h = r.length, l = c._capitalize, d = "get" + l(e), _$u = "set" + l(e);
            t.prototype[d] = function() {
                var _$t = {};
                for(s = 0; s < h; s++)_$t[o = r[s]] = this.getAttr(e + l(o));
                return _$t;
            };
            var _$f = function(t) {
                if (i.isUnminified) return function(e, i) {
                    return c.isObject(e) || c.warn(g(e) + ' is a not valid value for "' + i + '" attribute. The value should be an object with properties ' + t), e;
                };
            }(r);
            t.prototype[_$u] = function(t) {
                var i, _$r = this.attrs[e];
                for(i in a && (t = a.call(this, t)), _$f && _$f.call(this, t, e), t)t.hasOwnProperty(i) && this._setAttr(e + l(i), t[i]);
                return this._fireChangeEvent(e, _$r, t), n && n.call(this), this;
            }, x.addOverloadedGetterSetter(t, e);
        },
        addOverloadedGetterSetter: function addOverloadedGetterSetter(t, e) {
            var i = c._capitalize(e), r = "set" + i, a = "get" + i;
            t.prototype[e] = function() {
                return arguments.length ? (this[r](arguments[0]), this) : this[a]();
            };
        },
        addDeprecatedGetterSetter: function addDeprecatedGetterSetter(t, e, i, r) {
            c.error("Adding deprecated " + e);
            var a = "get" + c._capitalize(e), n = e + " property is deprecated and will be removed soon. Look at Konva change log for more information.";
            t.prototype[a] = function() {
                c.error(n);
                var _$t = this.attrs[e];
                return void 0 === _$t ? i : _$t;
            }, x.addSetter(t, e, r, function() {
                c.error(n);
            }), x.addOverloadedGetterSetter(t, e);
        },
        backCompat: function backCompat(t, e) {
            c.each(e, function(e, i) {
                var r = t.prototype[i], a = "get" + c._capitalize(e), n = "set" + c._capitalize(e);
                function s() {
                    r.apply(this, arguments), c.error('"' + e + '" method is deprecated and will be removed soon. Use ""' + i + '" instead.');
                }
                t.prototype[e] = s, t.prototype[a] = s, t.prototype[n] = s;
            });
        },
        afterSetFilter: function afterSetFilter() {
            this._filterUpToDate = !1;
        }
    };
    function b(t) {
        var e, i, r = [], a = t.length, n = c;
        for(e = 0; e < a; e++)i = t[e], n._isNumber(i) ? i = Math.round(1e3 * i) / 1e3 : n._isString(i) || (i += ""), r.push(i);
        return r;
    }
    var S = [
        "arc",
        "arcTo",
        "beginPath",
        "bezierCurveTo",
        "clearRect",
        "clip",
        "closePath",
        "createLinearGradient",
        "createPattern",
        "createRadialGradient",
        "drawImage",
        "ellipse",
        "fill",
        "fillText",
        "getImageData",
        "createImageData",
        "lineTo",
        "moveTo",
        "putImageData",
        "quadraticCurveTo",
        "rect",
        "restore",
        "rotate",
        "save",
        "scale",
        "setLineDash",
        "setTransform",
        "stroke",
        "strokeText",
        "transform",
        "translate"
    ];
    var w = /*#__PURE__*/ function() {
        function w(t) {
            _class_call_check(this, w);
            this.canvas = t, this._context = t._canvas.getContext("2d"), i.enableTrace && (this.traceArr = [], this._enableTrace());
        }
        _create_class(w, [
            {
                key: "fillShape",
                value: function fillShape(t) {
                    t.fillEnabled() && this._fill(t);
                }
            },
            {
                key: "_fill",
                value: function _fill(t) {}
            },
            {
                key: "strokeShape",
                value: function strokeShape(t) {
                    t.hasStroke() && this._stroke(t);
                }
            },
            {
                key: "_stroke",
                value: function _stroke(t) {}
            },
            {
                key: "fillStrokeShape",
                value: function fillStrokeShape(t) {
                    t.attrs.fillAfterStrokeEnabled ? (this.strokeShape(t), this.fillShape(t)) : (this.fillShape(t), this.strokeShape(t));
                }
            },
            {
                key: "getTrace",
                value: function getTrace(t, e) {
                    var i, r, a, n, s = this.traceArr, o = s.length, h = "";
                    for(i = 0; i < o; i++)(a = (r = s[i]).method) ? (n = r.args, h += a, t ? h += "()" : c._isArray(n[0]) ? h += "([" + n.join(",") + "])" : (e && (n = n.map(function(t) {
                        return "number" == typeof t ? Math.floor(t) : t;
                    })), h += "(" + n.join(",") + ")")) : (h += r.property, t || (h += "=" + r.val)), h += ";";
                    return h;
                }
            },
            {
                key: "clearTrace",
                value: function clearTrace() {
                    this.traceArr = [];
                }
            },
            {
                key: "_trace",
                value: function _trace(t) {
                    var e = this.traceArr;
                    e.push(t), e.length >= 100 && e.shift();
                }
            },
            {
                key: "reset",
                value: function reset() {
                    var t = this.getCanvas().getPixelRatio();
                    this.setTransform(1 * t, 0, 0, 1 * t, 0, 0);
                }
            },
            {
                key: "getCanvas",
                value: function getCanvas() {
                    return this.canvas;
                }
            },
            {
                key: "clear",
                value: function clear(t) {
                    var e = this.getCanvas();
                    t ? this.clearRect(t.x || 0, t.y || 0, t.width || 0, t.height || 0) : this.clearRect(0, 0, e.getWidth() / e.pixelRatio, e.getHeight() / e.pixelRatio);
                }
            },
            {
                key: "_applyLineCap",
                value: function _applyLineCap(t) {
                    var e = t.getLineCap();
                    e && this.setAttr("lineCap", e);
                }
            },
            {
                key: "_applyOpacity",
                value: function _applyOpacity(t) {
                    var e = t.getAbsoluteOpacity();
                    1 !== e && this.setAttr("globalAlpha", e);
                }
            },
            {
                key: "_applyLineJoin",
                value: function _applyLineJoin(t) {
                    var e = t.attrs.lineJoin;
                    e && this.setAttr("lineJoin", e);
                }
            },
            {
                key: "setAttr",
                value: function setAttr(t, e) {
                    this._context[t] = e;
                }
            },
            {
                key: "arc",
                value: function arc(t, e, i, r, a, n) {
                    this._context.arc(t, e, i, r, a, n);
                }
            },
            {
                key: "arcTo",
                value: function arcTo(t, e, i, r, a) {
                    this._context.arcTo(t, e, i, r, a);
                }
            },
            {
                key: "beginPath",
                value: function beginPath() {
                    this._context.beginPath();
                }
            },
            {
                key: "bezierCurveTo",
                value: function bezierCurveTo(t, e, i, r, a, n) {
                    this._context.bezierCurveTo(t, e, i, r, a, n);
                }
            },
            {
                key: "clearRect",
                value: function clearRect(t, e, i, r) {
                    this._context.clearRect(t, e, i, r);
                }
            },
            {
                key: "clip",
                value: function clip() {
                    this._context.clip();
                }
            },
            {
                key: "closePath",
                value: function closePath() {
                    this._context.closePath();
                }
            },
            {
                key: "createImageData",
                value: function createImageData(t, e) {
                    var i = arguments;
                    return 2 === i.length ? this._context.createImageData(t, e) : 1 === i.length ? this._context.createImageData(t) : void 0;
                }
            },
            {
                key: "createLinearGradient",
                value: function createLinearGradient(t, e, i, r) {
                    return this._context.createLinearGradient(t, e, i, r);
                }
            },
            {
                key: "createPattern",
                value: function createPattern(t, e) {
                    return this._context.createPattern(t, e);
                }
            },
            {
                key: "createRadialGradient",
                value: function createRadialGradient(t, e, i, r, a, n) {
                    return this._context.createRadialGradient(t, e, i, r, a, n);
                }
            },
            {
                key: "drawImage",
                value: function drawImage(t, e, i, r, a, n, s, o, h) {
                    var l = arguments, d = this._context;
                    3 === l.length ? d.drawImage(t, e, i) : 5 === l.length ? d.drawImage(t, e, i, r, a) : 9 === l.length && d.drawImage(t, e, i, r, a, n, s, o, h);
                }
            },
            {
                key: "ellipse",
                value: function ellipse(t, e, i, r, a, n, s, o) {
                    this._context.ellipse(t, e, i, r, a, n, s, o);
                }
            },
            {
                key: "isPointInPath",
                value: function isPointInPath(t, e) {
                    return this._context.isPointInPath(t, e);
                }
            },
            {
                key: "fill",
                value: function fill(t) {
                    t ? this._context.fill(t) : this._context.fill();
                }
            },
            {
                key: "fillRect",
                value: function fillRect(t, e, i, r) {
                    this._context.fillRect(t, e, i, r);
                }
            },
            {
                key: "strokeRect",
                value: function strokeRect(t, e, i, r) {
                    this._context.strokeRect(t, e, i, r);
                }
            },
            {
                key: "fillText",
                value: function fillText(t, e, i, r) {
                    r ? this._context.fillText(t, e, i, r) : this._context.fillText(t, e, i);
                }
            },
            {
                key: "measureText",
                value: function measureText(t) {
                    return this._context.measureText(t);
                }
            },
            {
                key: "getImageData",
                value: function getImageData(t, e, i, r) {
                    return this._context.getImageData(t, e, i, r);
                }
            },
            {
                key: "lineTo",
                value: function lineTo(t, e) {
                    this._context.lineTo(t, e);
                }
            },
            {
                key: "moveTo",
                value: function moveTo(t, e) {
                    this._context.moveTo(t, e);
                }
            },
            {
                key: "rect",
                value: function rect(t, e, i, r) {
                    this._context.rect(t, e, i, r);
                }
            },
            {
                key: "putImageData",
                value: function putImageData(t, e, i) {
                    this._context.putImageData(t, e, i);
                }
            },
            {
                key: "quadraticCurveTo",
                value: function quadraticCurveTo(t, e, i, r) {
                    this._context.quadraticCurveTo(t, e, i, r);
                }
            },
            {
                key: "restore",
                value: function restore() {
                    this._context.restore();
                }
            },
            {
                key: "rotate",
                value: function rotate(t) {
                    this._context.rotate(t);
                }
            },
            {
                key: "save",
                value: function save() {
                    this._context.save();
                }
            },
            {
                key: "scale",
                value: function scale(t, e) {
                    this._context.scale(t, e);
                }
            },
            {
                key: "setLineDash",
                value: function setLineDash(t) {
                    this._context.setLineDash ? this._context.setLineDash(t) : "mozDash" in this._context ? this._context.mozDash = t : "webkitLineDash" in this._context && (this._context.webkitLineDash = t);
                }
            },
            {
                key: "getLineDash",
                value: function getLineDash() {
                    return this._context.getLineDash();
                }
            },
            {
                key: "setTransform",
                value: function setTransform(t, e, i, r, a, n) {
                    this._context.setTransform(t, e, i, r, a, n);
                }
            },
            {
                key: "stroke",
                value: function stroke(t) {
                    t ? this._context.stroke(t) : this._context.stroke();
                }
            },
            {
                key: "strokeText",
                value: function strokeText(t, e, i, r) {
                    this._context.strokeText(t, e, i, r);
                }
            },
            {
                key: "transform",
                value: function transform(t, e, i, r, a, n) {
                    this._context.transform(t, e, i, r, a, n);
                }
            },
            {
                key: "translate",
                value: function translate(t, e) {
                    this._context.translate(t, e);
                }
            },
            {
                key: "_enableTrace",
                value: function _enableTrace() {
                    var t, e, i = this, r = S.length, a = this.setAttr, n = function n(t) {
                        var r, a = i[t];
                        i[t] = function() {
                            return e = b(Array.prototype.slice.call(arguments, 0)), r = a.apply(i, arguments), i._trace({
                                method: t,
                                args: e
                            }), r;
                        };
                    };
                    for(t = 0; t < r; t++)n(S[t]);
                    i.setAttr = function() {
                        a.apply(i, arguments);
                        var t = arguments[0], e = arguments[1];
                        "shadowOffsetX" !== t && "shadowOffsetY" !== t && "shadowBlur" !== t || (e /= this.canvas.getPixelRatio()), i._trace({
                            property: t,
                            val: e
                        });
                    };
                }
            },
            {
                key: "_applyGlobalCompositeOperation",
                value: function _applyGlobalCompositeOperation(t) {
                    var e = t.attrs.globalCompositeOperation;
                    !e || "source-over" === e || this.setAttr("globalCompositeOperation", e);
                }
            }
        ]);
        return w;
    }();
    [
        "fillStyle",
        "strokeStyle",
        "shadowColor",
        "shadowBlur",
        "shadowOffsetX",
        "shadowOffsetY",
        "lineCap",
        "lineDashOffset",
        "lineJoin",
        "lineWidth",
        "miterLimit",
        "font",
        "textAlign",
        "textBaseline",
        "globalAlpha",
        "globalCompositeOperation",
        "imageSmoothingEnabled"
    ].forEach(function(t) {
        Object.defineProperty(w.prototype, t, {
            get: function get() {
                return this._context[t];
            },
            set: function set(e) {
                this._context[t] = e;
            }
        });
    });
    var C = /*#__PURE__*/ function(w) {
        _inherits(C, w);
        var _super = _create_super(C);
        function C() {
            _class_call_check(this, C);
            return _super.apply(this, arguments);
        }
        _create_class(C, [
            {
                key: "_fillColor",
                value: function _fillColor(t) {
                    var e = t.fill();
                    this.setAttr("fillStyle", e), t._fillFunc(this);
                }
            },
            {
                key: "_fillPattern",
                value: function _fillPattern(t) {
                    this.setAttr("fillStyle", t._getFillPattern()), t._fillFunc(this);
                }
            },
            {
                key: "_fillLinearGradient",
                value: function _fillLinearGradient(t) {
                    var e = t._getLinearGradient();
                    e && (this.setAttr("fillStyle", e), t._fillFunc(this));
                }
            },
            {
                key: "_fillRadialGradient",
                value: function _fillRadialGradient(t) {
                    var e = t._getRadialGradient();
                    e && (this.setAttr("fillStyle", e), t._fillFunc(this));
                }
            },
            {
                key: "_fill",
                value: function _fill(t) {
                    var e = t.fill(), i = t.getFillPriority();
                    if (e && "color" === i) this._fillColor(t);
                    else {
                        var r = t.getFillPatternImage();
                        if (r && "pattern" === i) this._fillPattern(t);
                        else {
                            var a = t.getFillLinearGradientColorStops();
                            if (a && "linear-gradient" === i) this._fillLinearGradient(t);
                            else {
                                var n = t.getFillRadialGradientColorStops();
                                n && "radial-gradient" === i ? this._fillRadialGradient(t) : e ? this._fillColor(t) : r ? this._fillPattern(t) : a ? this._fillLinearGradient(t) : n && this._fillRadialGradient(t);
                            }
                        }
                    }
                }
            },
            {
                key: "_strokeLinearGradient",
                value: function _strokeLinearGradient(t) {
                    var e = t.getStrokeLinearGradientStartPoint(), i = t.getStrokeLinearGradientEndPoint(), r = t.getStrokeLinearGradientColorStops(), a = this.createLinearGradient(e.x, e.y, i.x, i.y);
                    if (r) {
                        for(var n = 0; n < r.length; n += 2)a.addColorStop(r[n], r[n + 1]);
                        this.setAttr("strokeStyle", a);
                    }
                }
            },
            {
                key: "_stroke",
                value: function _stroke(t) {
                    var e = t.dash(), i = t.getStrokeScaleEnabled();
                    if (t.hasStroke()) {
                        if (!i) {
                            this.save();
                            var r = this.getCanvas().getPixelRatio();
                            this.setTransform(r, 0, 0, r, 0, 0);
                        }
                        this._applyLineCap(t), e && t.dashEnabled() && (this.setLineDash(e), this.setAttr("lineDashOffset", t.dashOffset())), this.setAttr("lineWidth", t.strokeWidth()), t.getShadowForStrokeEnabled() || this.setAttr("shadowColor", "rgba(0,0,0,0)"), t.getStrokeLinearGradientColorStops() ? this._strokeLinearGradient(t) : this.setAttr("strokeStyle", t.stroke()), t._strokeFunc(this), i || this.restore();
                    }
                }
            },
            {
                key: "_applyShadow",
                value: function _applyShadow(t) {
                    var e, i, r, a = null !== (e = t.getShadowRGBA()) && void 0 !== e ? e : "black", n = null !== (i = t.getShadowBlur()) && void 0 !== i ? i : 5, s = null !== (r = t.getShadowOffset()) && void 0 !== r ? r : {
                        x: 0,
                        y: 0
                    }, o = t.getAbsoluteScale(), h = this.canvas.getPixelRatio(), l = o.x * h, d = o.y * h;
                    this.setAttr("shadowColor", a), this.setAttr("shadowBlur", n * Math.min(Math.abs(l), Math.abs(d))), this.setAttr("shadowOffsetX", s.x * l), this.setAttr("shadowOffsetY", s.y * d);
                }
            }
        ]);
        return C;
    }(w);
    var k = /*#__PURE__*/ function(w) {
        _inherits(k, w);
        var _super = _create_super(k);
        function k() {
            _class_call_check(this, k);
            return _super.apply(this, arguments);
        }
        _create_class(k, [
            {
                key: "_fill",
                value: function _fill(t) {
                    this.save(), this.setAttr("fillStyle", t.colorKey), t._fillFuncHit(this), this.restore();
                }
            },
            {
                key: "strokeShape",
                value: function strokeShape(t) {
                    t.hasHitStroke() && this._stroke(t);
                }
            },
            {
                key: "_stroke",
                value: function _stroke(t) {
                    if (t.hasHitStroke()) {
                        var e = t.getStrokeScaleEnabled();
                        if (!e) {
                            this.save();
                            var i = this.getCanvas().getPixelRatio();
                            this.setTransform(i, 0, 0, i, 0, 0);
                        }
                        this._applyLineCap(t);
                        var r = t.hitStrokeWidth(), a = "auto" === r ? t.strokeWidth() : r;
                        this.setAttr("lineWidth", a), this.setAttr("strokeStyle", t.colorKey), t._strokeFuncHit(this), e || this.restore();
                    }
                }
            }
        ]);
        return k;
    }(w);
    var P;
    var T = /*#__PURE__*/ function() {
        function T(t) {
            _class_call_check(this, T);
            this.pixelRatio = 1, this.width = 0, this.height = 0, this.isCache = !1;
            var e = (t || {}).pixelRatio || i.pixelRatio || function() {
                if (P) return P;
                var _$t = c.createCanvasElement().getContext("2d");
                return P = (i._global.devicePixelRatio || 1) / (_$t.webkitBackingStorePixelRatio || _$t.mozBackingStorePixelRatio || _$t.msBackingStorePixelRatio || _$t.oBackingStorePixelRatio || _$t.backingStorePixelRatio || 1);
            }();
            this.pixelRatio = e, this._canvas = c.createCanvasElement(), this._canvas.style.padding = "0", this._canvas.style.margin = "0", this._canvas.style.border = "0", this._canvas.style.background = "transparent", this._canvas.style.position = "absolute", this._canvas.style.top = "0", this._canvas.style.left = "0";
        }
        _create_class(T, [
            {
                key: "getContext",
                value: function getContext() {
                    return this.context;
                }
            },
            {
                key: "getPixelRatio",
                value: function getPixelRatio() {
                    return this.pixelRatio;
                }
            },
            {
                key: "setPixelRatio",
                value: function setPixelRatio(t) {
                    var e = this.pixelRatio;
                    this.pixelRatio = t, this.setSize(this.getWidth() / e, this.getHeight() / e);
                }
            },
            {
                key: "setWidth",
                value: function setWidth(t) {
                    this.width = this._canvas.width = t * this.pixelRatio, this._canvas.style.width = t + "px";
                    var e = this.pixelRatio;
                    this.getContext()._context.scale(e, e);
                }
            },
            {
                key: "setHeight",
                value: function setHeight(t) {
                    this.height = this._canvas.height = t * this.pixelRatio, this._canvas.style.height = t + "px";
                    var e = this.pixelRatio;
                    this.getContext()._context.scale(e, e);
                }
            },
            {
                key: "getWidth",
                value: function getWidth() {
                    return this.width;
                }
            },
            {
                key: "getHeight",
                value: function getHeight() {
                    return this.height;
                }
            },
            {
                key: "setSize",
                value: function setSize(t, e) {
                    this.setWidth(t || 0), this.setHeight(e || 0);
                }
            },
            {
                key: "toDataURL",
                value: function toDataURL(t, e) {
                    try {
                        return this._canvas.toDataURL(t, e);
                    } catch (t) {
                        try {
                            return this._canvas.toDataURL();
                        } catch (t) {
                            return c.error("Unable to get data URL. " + t.message + " For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html."), "";
                        }
                    }
                }
            }
        ]);
        return T;
    }();
    x.addGetterSetter(T, "pixelRatio", void 0, f());
    var A = /*#__PURE__*/ function(T) {
        _inherits(A, T);
        var _super = _create_super(A);
        function A() {
            var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
                width: 0,
                height: 0
            };
            _class_call_check(this, A);
            var _this;
            _this = _super.call(this, t), _this.context = new C(_assert_this_initialized(_this)), _this.setSize(t.width, t.height);
            return _possible_constructor_return(_this);
        }
        return A;
    }(T);
    var M = /*#__PURE__*/ function(T) {
        _inherits(M, T);
        var _super = _create_super(M);
        function M() {
            var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
                width: 0,
                height: 0
            };
            _class_call_check(this, M);
            var _this;
            _this = _super.call(this, t), _this.hitCanvas = !0, _this.context = new k(_assert_this_initialized(_this)), _this.setSize(t.width, t.height);
            return _possible_constructor_return(_this);
        }
        return M;
    }(T);
    var G = {
        get isDragging () {
            var t1 = !1;
            return G._dragElements.forEach(function(e) {
                "dragging" === e.dragStatus && (t1 = !0);
            }), t1;
        },
        justDragged: !1,
        get node () {
            var t2;
            return G._dragElements.forEach(function(e) {
                t2 = e.node;
            }), t2;
        },
        _dragElements: new Map,
        _drag: function _drag(t) {
            var e = [];
            G._dragElements.forEach(function(i, r) {
                var a = i.node, n = a.getStage();
                n.setPointersPositions(t), void 0 === i.pointerId && (i.pointerId = c._getFirstPointerId(t));
                var s = n._changedPointerPositions.find(function(t) {
                    return t.id === i.pointerId;
                });
                if (s) {
                    if ("dragging" !== i.dragStatus) {
                        var o = a.dragDistance();
                        if (Math.max(Math.abs(s.x - i.startPointerPos.x), Math.abs(s.y - i.startPointerPos.y)) < o) return;
                        if (a.startDrag({
                            evt: t
                        }), !a.isDragging()) return;
                    }
                    a._setDragPosition(t, i), e.push(a);
                }
            }), e.forEach(function(e) {
                e.fire("dragmove", {
                    type: "dragmove",
                    target: e,
                    evt: t
                }, !0);
            });
        },
        _endDragBefore: function _endDragBefore(t) {
            G._dragElements.forEach(function(e) {
                var r = e.node, a = r.getStage();
                t && a.setPointersPositions(t);
                if (!a._changedPointerPositions.find(function(t) {
                    return t.id === e.pointerId;
                })) return;
                "dragging" !== e.dragStatus && "stopped" !== e.dragStatus || (G.justDragged = !0, i._mouseListenClick = !1, i._touchListenClick = !1, i._pointerListenClick = !1, e.dragStatus = "stopped");
                var n = e.node.getLayer() || _instanceof(e.node, i.Stage) && e.node;
                n && n.batchDraw();
            });
        },
        _endDragAfter: function _endDragAfter(t) {
            G._dragElements.forEach(function(e, i) {
                "stopped" === e.dragStatus && e.node.fire("dragend", {
                    type: "dragend",
                    target: e.node,
                    evt: t
                }, !0), "dragging" !== e.dragStatus && G._dragElements.delete(i);
            });
        }
    };
    i.isBrowser && (window.addEventListener("mouseup", G._endDragBefore, !0), window.addEventListener("touchend", G._endDragBefore, !0), window.addEventListener("mousemove", G._drag), window.addEventListener("touchmove", G._drag), window.addEventListener("mouseup", G._endDragAfter, !1), window.addEventListener("touchend", G._endDragAfter, !1));
    var R = [
        "xChange.konva",
        "yChange.konva",
        "scaleXChange.konva",
        "scaleYChange.konva",
        "skewXChange.konva",
        "skewYChange.konva",
        "rotationChange.konva",
        "offsetXChange.konva",
        "offsetYChange.konva",
        "transformsEnabledChange.konva"
    ].join(" ");
    var E = 1;
    var L = /*#__PURE__*/ function() {
        function L(t) {
            _class_call_check(this, L);
            this._id = E++, this.eventListeners = {}, this.attrs = {}, this.index = 0, this._allEventListeners = null, this.parent = null, this._cache = new Map, this._attachedDepsListeners = new Map, this._lastPos = null, this._batchingTransformChange = !1, this._needClearTransformCache = !1, this._filterUpToDate = !1, this._isUnderCache = !1, this._dragEventId = null, this._shouldFireChangeEvents = !1, this.setAttrs(t), this._shouldFireChangeEvents = !0;
        }
        _create_class(L, [
            {
                key: "hasChildren",
                value: function hasChildren() {
                    return !1;
                }
            },
            {
                key: "_clearCache",
                value: function _clearCache(t) {
                    "transform" !== t && "absoluteTransform" !== t || !this._cache.get(t) ? t ? this._cache.delete(t) : this._cache.clear() : this._cache.get(t).dirty = !0;
                }
            },
            {
                key: "_getCache",
                value: function _getCache(t, e) {
                    var i = this._cache.get(t);
                    return (void 0 === i || ("transform" === t || "absoluteTransform" === t) && !0 === i.dirty) && (i = e.call(this), this._cache.set(t, i)), i;
                }
            },
            {
                key: "_calculate",
                value: function _calculate(t, e, i) {
                    var _this = this;
                    if (!this._attachedDepsListeners.get(t)) {
                        var _$i = e.map(function(t) {
                            return t + "Change.konva";
                        }).join(" ");
                        this.on(_$i, function() {
                            _this._clearCache(t);
                        }), this._attachedDepsListeners.set(t, !0);
                    }
                    return this._getCache(t, i);
                }
            },
            {
                key: "_getCanvasCache",
                value: function _getCanvasCache() {
                    return this._cache.get("canvas");
                }
            },
            {
                key: "_clearSelfAndDescendantCache",
                value: function _clearSelfAndDescendantCache(t) {
                    this._clearCache(t), "absoluteTransform" === t && this.fire("absoluteTransformChange");
                }
            },
            {
                key: "clearCache",
                value: function clearCache() {
                    return this._cache.delete("canvas"), this._clearSelfAndDescendantCache(), this._requestDraw(), this;
                }
            },
            {
                key: "cache",
                value: function cache(t) {
                    var e = t || {}, i = {};
                    void 0 !== e.x && void 0 !== e.y && void 0 !== e.width && void 0 !== e.height || (i = this.getClientRect({
                        skipTransform: !0,
                        relativeTo: this.getParent()
                    }));
                    var r = Math.ceil(e.width || i.width), a = Math.ceil(e.height || i.height), n = e.pixelRatio, s = void 0 === e.x ? i.x : e.x, o = void 0 === e.y ? i.y : e.y, h = e.offset || 0, l = e.drawBorder || !1, d = e.hitCanvasPixelRatio || 1;
                    if (r && a) {
                        s -= h, o -= h;
                        var g = new A({
                            pixelRatio: n,
                            width: r += 2 * h,
                            height: a += 2 * h
                        }), _$u = new A({
                            pixelRatio: n,
                            width: 0,
                            height: 0
                        }), _$f = new M({
                            pixelRatio: d,
                            width: r,
                            height: a
                        }), _$p = g.getContext(), _$v = _$f.getContext();
                        return _$f.isCache = !0, g.isCache = !0, this._cache.delete("canvas"), this._filterUpToDate = !1, !1 === e.imageSmoothingEnabled && (g.getContext()._context.imageSmoothingEnabled = !1, _$u.getContext()._context.imageSmoothingEnabled = !1), _$p.save(), _$v.save(), _$p.translate(-s, -o), _$v.translate(-s, -o), this._isUnderCache = !0, this._clearSelfAndDescendantCache("absoluteOpacity"), this._clearSelfAndDescendantCache("absoluteScale"), this.drawScene(g, this), this.drawHit(_$f, this), this._isUnderCache = !1, _$p.restore(), _$v.restore(), l && (_$p.save(), _$p.beginPath(), _$p.rect(0, 0, r, a), _$p.closePath(), _$p.setAttr("strokeStyle", "red"), _$p.setAttr("lineWidth", 5), _$p.stroke(), _$p.restore()), this._cache.set("canvas", {
                            scene: g,
                            filter: _$u,
                            hit: _$f,
                            x: s,
                            y: o
                        }), this._requestDraw(), this;
                    }
                    c.error("Can not cache the node. Width or height of the node equals 0. Caching is skipped.");
                }
            },
            {
                key: "isCached",
                value: function isCached() {
                    return this._cache.has("canvas");
                }
            },
            {
                key: "getClientRect",
                value: function getClientRect(t) {
                    throw new Error('abstract "getClientRect" method call');
                }
            },
            {
                key: "_transformedRect",
                value: function _transformedRect(t, e) {
                    var i, r, a, n, s = [
                        {
                            x: t.x,
                            y: t.y
                        },
                        {
                            x: t.x + t.width,
                            y: t.y
                        },
                        {
                            x: t.x + t.width,
                            y: t.y + t.height
                        },
                        {
                            x: t.x,
                            y: t.y + t.height
                        }
                    ], o = this.getAbsoluteTransform(e);
                    return s.forEach(function(t) {
                        var _$e = o.point(t);
                        void 0 === i && (i = a = _$e.x, r = n = _$e.y), i = Math.min(i, _$e.x), r = Math.min(r, _$e.y), a = Math.max(a, _$e.x), n = Math.max(n, _$e.y);
                    }), {
                        x: i,
                        y: r,
                        width: a - i,
                        height: n - r
                    };
                }
            },
            {
                key: "_drawCachedSceneCanvas",
                value: function _drawCachedSceneCanvas(t) {
                    t.save(), t._applyOpacity(this), t._applyGlobalCompositeOperation(this);
                    var e = this._getCanvasCache();
                    t.translate(e.x, e.y);
                    var i = this._getCachedSceneCanvas(), r = i.pixelRatio;
                    t.drawImage(i._canvas, 0, 0, i.width / r, i.height / r), t.restore();
                }
            },
            {
                key: "_drawCachedHitCanvas",
                value: function _drawCachedHitCanvas(t) {
                    var e = this._getCanvasCache(), i = e.hit;
                    t.save(), t.translate(e.x, e.y), t.drawImage(i._canvas, 0, 0, i.width / i.pixelRatio, i.height / i.pixelRatio), t.restore();
                }
            },
            {
                key: "_getCachedSceneCanvas",
                value: function _getCachedSceneCanvas() {
                    var _$t, e, i, r, a = this.filters(), n = this._getCanvasCache(), s = n.scene, o = n.filter, h = o.getContext();
                    if (a) {
                        if (!this._filterUpToDate) {
                            var l = s.pixelRatio;
                            o.setSize(s.width / s.pixelRatio, s.height / s.pixelRatio);
                            try {
                                for(_$t = a.length, h.clear(), h.drawImage(s._canvas, 0, 0, s.getWidth() / l, s.getHeight() / l), e = h.getImageData(0, 0, o.getWidth(), o.getHeight()), i = 0; i < _$t; i++)"function" == typeof (r = a[i]) ? (r.call(this, e), h.putImageData(e, 0, 0)) : c.error("Filter should be type of function, but got " + (typeof r === "undefined" ? "undefined" : _type_of(r)) + " instead. Please check correct filters");
                            } catch (t) {
                                c.error("Unable to apply filter. " + t.message + " This post my help you https://konvajs.org/docs/posts/Tainted_Canvas.html.");
                            }
                            this._filterUpToDate = !0;
                        }
                        return o;
                    }
                    return s;
                }
            },
            {
                key: "on",
                value: function on(t, e) {
                    if (this._cache && this._cache.delete("allEventListeners"), 3 === arguments.length) return this._delegate.apply(this, arguments);
                    var i, r, a, n, s = t.split(" "), o = s.length;
                    for(i = 0; i < o; i++)a = (r = s[i].split("."))[0], n = r[1] || "", this.eventListeners[a] || (this.eventListeners[a] = []), this.eventListeners[a].push({
                        name: n,
                        handler: e
                    });
                    return this;
                }
            },
            {
                key: "off",
                value: function off(t, e) {
                    var i, r, a, n, s, o = (t || "").split(" "), h = o.length;
                    if (this._cache && this._cache.delete("allEventListeners"), !t) for(r in this.eventListeners)this._off(r);
                    for(i = 0; i < h; i++)if (n = (a = o[i].split("."))[0], s = a[1], n) this.eventListeners[n] && this._off(n, s, e);
                    else for(r in this.eventListeners)this._off(r, s, e);
                    return this;
                }
            },
            {
                key: "dispatchEvent",
                value: function dispatchEvent(t) {
                    var e = {
                        target: this,
                        type: t.type,
                        evt: t
                    };
                    return this.fire(t.type, e), this;
                }
            },
            {
                key: "addEventListener",
                value: function addEventListener(t, e) {
                    return this.on(t, function(t) {
                        e.call(this, t.evt);
                    }), this;
                }
            },
            {
                key: "removeEventListener",
                value: function removeEventListener(t) {
                    return this.off(t), this;
                }
            },
            {
                key: "_delegate",
                value: function _delegate(t, e, i) {
                    var r = this;
                    this.on(t, function(t) {
                        for(var a = t.target.findAncestors(e, !0, r), n = 0; n < a.length; n++)(t = c.cloneObject(t)).currentTarget = a[n], i.call(a[n], t);
                    });
                }
            },
            {
                key: "remove",
                value: function remove() {
                    return this.isDragging() && this.stopDrag(), G._dragElements.delete(this._id), this._remove(), this;
                }
            },
            {
                key: "_clearCaches",
                value: function _clearCaches() {
                    this._clearSelfAndDescendantCache("absoluteTransform"), this._clearSelfAndDescendantCache("absoluteOpacity"), this._clearSelfAndDescendantCache("absoluteScale"), this._clearSelfAndDescendantCache("stage"), this._clearSelfAndDescendantCache("visible"), this._clearSelfAndDescendantCache("listening");
                }
            },
            {
                key: "_remove",
                value: function _remove() {
                    this._clearCaches();
                    var t = this.getParent();
                    t && t.children && (t.children.splice(this.index, 1), t._setChildrenIndices(), this.parent = null);
                }
            },
            {
                key: "destroy",
                value: function destroy() {
                    return this.remove(), this;
                }
            },
            {
                key: "getAttr",
                value: function getAttr(t) {
                    var e = "get" + c._capitalize(t);
                    return c._isFunction(this[e]) ? this[e]() : this.attrs[t];
                }
            },
            {
                key: "getAncestors",
                value: function getAncestors() {
                    for(var t = this.getParent(), e = []; t;)e.push(t), t = t.getParent();
                    return e;
                }
            },
            {
                key: "getAttrs",
                value: function getAttrs() {
                    return this.attrs || {};
                }
            },
            {
                key: "setAttrs",
                value: function setAttrs(t) {
                    var _this = this;
                    return this._batchTransformChanges(function() {
                        var e, i;
                        if (!t) return _this;
                        for(e in t)"children" !== e && (i = "set" + c._capitalize(e), c._isFunction(_this[i]) ? _this[i](t[e]) : _this._setAttr(e, t[e]));
                    }), this;
                }
            },
            {
                key: "isListening",
                value: function isListening() {
                    return this._getCache("listening", this._isListening);
                }
            },
            {
                key: "_isListening",
                value: function _isListening(t) {
                    if (!this.listening()) return !1;
                    var e = this.getParent();
                    return !e || e === t || this === t || e._isListening(t);
                }
            },
            {
                key: "isVisible",
                value: function isVisible() {
                    return this._getCache("visible", this._isVisible);
                }
            },
            {
                key: "_isVisible",
                value: function _isVisible(t) {
                    if (!this.visible()) return !1;
                    var e = this.getParent();
                    return !e || e === t || this === t || e._isVisible(t);
                }
            },
            {
                key: "shouldDrawHit",
                value: function shouldDrawHit(t) {
                    var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
                    if (t) return this._isVisible(t) && this._isListening(t);
                    var r = this.getLayer(), a = !1;
                    G._dragElements.forEach(function(t) {
                        "dragging" === t.dragStatus && ("Stage" === t.node.nodeType || t.node.getLayer() === r) && (a = !0);
                    });
                    var n = !e && !i.hitOnDragEnabled && a;
                    return this.isListening() && this.isVisible() && !n;
                }
            },
            {
                key: "show",
                value: function show() {
                    return this.visible(!0), this;
                }
            },
            {
                key: "hide",
                value: function hide() {
                    return this.visible(!1), this;
                }
            },
            {
                key: "getZIndex",
                value: function getZIndex() {
                    return this.index || 0;
                }
            },
            {
                key: "getAbsoluteZIndex",
                value: function getAbsoluteZIndex() {
                    var t, e, i, r, a = this.getDepth(), n = this, s = 0;
                    return "Stage" !== n.nodeType && function o(h) {
                        for(t = [], e = h.length, i = 0; i < e; i++)r = h[i], s++, "Shape" !== r.nodeType && (t = t.concat(r.getChildren().slice())), r._id === n._id && (i = e);
                        t.length > 0 && t[0].getDepth() <= a && o(t);
                    }(n.getStage().getChildren()), s;
                }
            },
            {
                key: "getDepth",
                value: function getDepth() {
                    for(var t = 0, e = this.parent; e;)t++, e = e.parent;
                    return t;
                }
            },
            {
                key: "_batchTransformChanges",
                value: function _batchTransformChanges(t) {
                    this._batchingTransformChange = !0, t(), this._batchingTransformChange = !1, this._needClearTransformCache && (this._clearCache("transform"), this._clearSelfAndDescendantCache("absoluteTransform")), this._needClearTransformCache = !1;
                }
            },
            {
                key: "setPosition",
                value: function setPosition(t) {
                    var _this = this;
                    return this._batchTransformChanges(function() {
                        _this.x(t.x), _this.y(t.y);
                    }), this;
                }
            },
            {
                key: "getPosition",
                value: function getPosition() {
                    return {
                        x: this.x(),
                        y: this.y()
                    };
                }
            },
            {
                key: "getRelativePointerPosition",
                value: function getRelativePointerPosition() {
                    if (!this.getStage()) return null;
                    var t = this.getStage().getPointerPosition();
                    if (!t) return null;
                    var e = this.getAbsoluteTransform().copy();
                    return e.invert(), e.point(t);
                }
            },
            {
                key: "getAbsolutePosition",
                value: function getAbsolutePosition(t) {
                    var e = !1, i = this.parent;
                    for(; i;){
                        if (i.isCached()) {
                            e = !0;
                            break;
                        }
                        i = i.parent;
                    }
                    e && !t && (t = !0);
                    var r = this.getAbsoluteTransform(t).getMatrix(), n = new a, s = this.offset();
                    return n.m = r.slice(), n.translate(s.x, s.y), n.getTranslation();
                }
            },
            {
                key: "setAbsolutePosition",
                value: function setAbsolutePosition(t) {
                    var e = this._clearTransform();
                    this.attrs.x = e.x, this.attrs.y = e.y, delete e.x, delete e.y, this._clearCache("transform");
                    var i = this._getAbsoluteTransform().copy();
                    return i.invert(), i.translate(t.x, t.y), t = {
                        x: this.attrs.x + i.getTranslation().x,
                        y: this.attrs.y + i.getTranslation().y
                    }, this._setTransform(e), this.setPosition({
                        x: t.x,
                        y: t.y
                    }), this._clearCache("transform"), this._clearSelfAndDescendantCache("absoluteTransform"), this;
                }
            },
            {
                key: "_setTransform",
                value: function _setTransform(t) {
                    var e;
                    for(e in t)this.attrs[e] = t[e];
                }
            },
            {
                key: "_clearTransform",
                value: function _clearTransform() {
                    var t = {
                        x: this.x(),
                        y: this.y(),
                        rotation: this.rotation(),
                        scaleX: this.scaleX(),
                        scaleY: this.scaleY(),
                        offsetX: this.offsetX(),
                        offsetY: this.offsetY(),
                        skewX: this.skewX(),
                        skewY: this.skewY()
                    };
                    return this.attrs.x = 0, this.attrs.y = 0, this.attrs.rotation = 0, this.attrs.scaleX = 1, this.attrs.scaleY = 1, this.attrs.offsetX = 0, this.attrs.offsetY = 0, this.attrs.skewX = 0, this.attrs.skewY = 0, t;
                }
            },
            {
                key: "move",
                value: function move(t) {
                    var e = t.x, i = t.y, r = this.x(), a = this.y();
                    return void 0 !== e && (r += e), void 0 !== i && (a += i), this.setPosition({
                        x: r,
                        y: a
                    }), this;
                }
            },
            {
                key: "_eachAncestorReverse",
                value: function _eachAncestorReverse(t, e) {
                    var i, r, a = [], n = this.getParent();
                    if (!e || e._id !== this._id) {
                        for(a.unshift(this); n && (!e || n._id !== e._id);)a.unshift(n), n = n.parent;
                        for(i = a.length, r = 0; r < i; r++)t(a[r]);
                    }
                }
            },
            {
                key: "rotate",
                value: function rotate(t) {
                    return this.rotation(this.rotation() + t), this;
                }
            },
            {
                key: "moveToTop",
                value: function moveToTop() {
                    if (!this.parent) return c.warn("Node has no parent. moveToTop function is ignored."), !1;
                    var t = this.index;
                    return this.parent.children.splice(t, 1), this.parent.children.push(this), this.parent._setChildrenIndices(), !0;
                }
            },
            {
                key: "moveUp",
                value: function moveUp() {
                    if (!this.parent) return c.warn("Node has no parent. moveUp function is ignored."), !1;
                    var t = this.index;
                    return t < this.parent.getChildren().length - 1 && (this.parent.children.splice(t, 1), this.parent.children.splice(t + 1, 0, this), this.parent._setChildrenIndices(), !0);
                }
            },
            {
                key: "moveDown",
                value: function moveDown() {
                    if (!this.parent) return c.warn("Node has no parent. moveDown function is ignored."), !1;
                    var t = this.index;
                    return t > 0 && (this.parent.children.splice(t, 1), this.parent.children.splice(t - 1, 0, this), this.parent._setChildrenIndices(), !0);
                }
            },
            {
                key: "moveToBottom",
                value: function moveToBottom() {
                    if (!this.parent) return c.warn("Node has no parent. moveToBottom function is ignored."), !1;
                    var t = this.index;
                    return t > 0 && (this.parent.children.splice(t, 1), this.parent.children.unshift(this), this.parent._setChildrenIndices(), !0);
                }
            },
            {
                key: "setZIndex",
                value: function setZIndex(t) {
                    if (!this.parent) return c.warn("Node has no parent. zIndex parameter is ignored."), this;
                    (t < 0 || t >= this.parent.children.length) && c.warn("Unexpected value " + t + " for zIndex property. zIndex is just index of a node in children of its parent. Expected value is from 0 to " + (this.parent.children.length - 1) + ".");
                    var e = this.index;
                    return this.parent.children.splice(e, 1), this.parent.children.splice(t, 0, this), this.parent._setChildrenIndices(), this;
                }
            },
            {
                key: "getAbsoluteOpacity",
                value: function getAbsoluteOpacity() {
                    return this._getCache("absoluteOpacity", this._getAbsoluteOpacity);
                }
            },
            {
                key: "_getAbsoluteOpacity",
                value: function _getAbsoluteOpacity() {
                    var t = this.opacity(), e = this.getParent();
                    return e && !e._isUnderCache && (t *= e.getAbsoluteOpacity()), t;
                }
            },
            {
                key: "moveTo",
                value: function moveTo(t) {
                    return this.getParent() !== t && (this._remove(), t.add(this)), this;
                }
            },
            {
                key: "toObject",
                value: function toObject() {
                    var t, e, i, r, a = {}, n = this.getAttrs();
                    for(t in a.attrs = {}, n)e = n[t], c.isObject(e) && !c._isPlainObject(e) && !c._isArray(e) || (i = "function" == typeof this[t] && this[t], delete n[t], r = i ? i.call(this) : null, n[t] = e, r !== e && (a.attrs[t] = e));
                    return a.className = this.getClassName(), c._prepareToStringify(a);
                }
            },
            {
                key: "toJSON",
                value: function toJSON() {
                    return JSON.stringify(this.toObject());
                }
            },
            {
                key: "getParent",
                value: function getParent() {
                    return this.parent;
                }
            },
            {
                key: "findAncestors",
                value: function findAncestors(t, e, i) {
                    var r = [];
                    e && this._isMatch(t) && r.push(this);
                    for(var a = this.parent; a;){
                        if (a === i) return r;
                        a._isMatch(t) && r.push(a), a = a.parent;
                    }
                    return r;
                }
            },
            {
                key: "isAncestorOf",
                value: function isAncestorOf(t) {
                    return !1;
                }
            },
            {
                key: "findAncestor",
                value: function findAncestor(t, e, i) {
                    return this.findAncestors(t, e, i)[0];
                }
            },
            {
                key: "_isMatch",
                value: function _isMatch(t) {
                    if (!t) return !1;
                    if ("function" == typeof t) return t(this);
                    var e, i, r = t.replace(/ /g, "").split(","), a = r.length;
                    for(e = 0; e < a; e++)if (i = r[e], c.isValidSelector(i) || (c.warn('Selector "' + i + '" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".'), c.warn('If you have a custom shape with such className, please change it to start with upper letter like "Triangle".'), c.warn("Konva is awesome, right?")), "#" === i.charAt(0)) {
                        if (this.id() === i.slice(1)) return !0;
                    } else if ("." === i.charAt(0)) {
                        if (this.hasName(i.slice(1))) return !0;
                    } else if (this.className === i || this.nodeType === i) return !0;
                    return !1;
                }
            },
            {
                key: "getLayer",
                value: function getLayer() {
                    var t = this.getParent();
                    return t ? t.getLayer() : null;
                }
            },
            {
                key: "getStage",
                value: function getStage() {
                    return this._getCache("stage", this._getStage);
                }
            },
            {
                key: "_getStage",
                value: function _getStage() {
                    var t = this.getParent();
                    return t ? t.getStage() : void 0;
                }
            },
            {
                key: "fire",
                value: function fire(t) {
                    var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, i = arguments.length > 2 ? arguments[2] : void 0;
                    return e.target = e.target || this, i ? this._fireAndBubble(t, e) : this._fire(t, e), this;
                }
            },
            {
                key: "getAbsoluteTransform",
                value: function getAbsoluteTransform(t) {
                    return t ? this._getAbsoluteTransform(t) : this._getCache("absoluteTransform", this._getAbsoluteTransform);
                }
            },
            {
                key: "_getAbsoluteTransform",
                value: function _getAbsoluteTransform(t) {
                    var e;
                    if (t) return e = new a, this._eachAncestorReverse(function(t) {
                        var i = t.transformsEnabled();
                        "all" === i ? e.multiply(t.getTransform()) : "position" === i && e.translate(t.x() - t.offsetX(), t.y() - t.offsetY());
                    }, t), e;
                    e = this._cache.get("absoluteTransform") || new a, this.parent ? this.parent.getAbsoluteTransform().copyInto(e) : e.reset();
                    var i = this.transformsEnabled();
                    if ("all" === i) e.multiply(this.getTransform());
                    else if ("position" === i) {
                        var _$t = this.attrs.x || 0, i1 = this.attrs.y || 0, r = this.attrs.offsetX || 0, a1 = this.attrs.offsetY || 0;
                        e.translate(_$t - r, i1 - a1);
                    }
                    return e.dirty = !1, e;
                }
            },
            {
                key: "getAbsoluteScale",
                value: function getAbsoluteScale(t) {
                    for(var e = this; e;)e._isUnderCache && (t = e), e = e.getParent();
                    var i = this.getAbsoluteTransform(t).decompose();
                    return {
                        x: i.scaleX,
                        y: i.scaleY
                    };
                }
            },
            {
                key: "getAbsoluteRotation",
                value: function getAbsoluteRotation() {
                    return this.getAbsoluteTransform().decompose().rotation;
                }
            },
            {
                key: "getTransform",
                value: function getTransform() {
                    return this._getCache("transform", this._getTransform);
                }
            },
            {
                key: "_getTransform",
                value: function _getTransform() {
                    var t, e, r = this._cache.get("transform") || new a;
                    r.reset();
                    var n = this.x(), s = this.y(), o = i.getAngle(this.rotation()), h = null !== (t = this.attrs.scaleX) && void 0 !== t ? t : 1, l = null !== (e = this.attrs.scaleY) && void 0 !== e ? e : 1, d = this.attrs.skewX || 0, c = this.attrs.skewY || 0, g = this.attrs.offsetX || 0, _$u = this.attrs.offsetY || 0;
                    return 0 === n && 0 === s || r.translate(n, s), 0 !== o && r.rotate(o), 0 === d && 0 === c || r.skew(d, c), 1 === h && 1 === l || r.scale(h, l), 0 === g && 0 === _$u || r.translate(-1 * g, -1 * _$u), r.dirty = !1, r;
                }
            },
            {
                key: "clone",
                value: function clone(t) {
                    var e, i, r, a, n, s = c.cloneObject(this.attrs);
                    for(e in t)s[e] = t[e];
                    var o = new this.constructor(s);
                    for(e in this.eventListeners)for(r = (i = this.eventListeners[e]).length, a = 0; a < r; a++)(n = i[a]).name.indexOf("konva") < 0 && (o.eventListeners[e] || (o.eventListeners[e] = []), o.eventListeners[e].push(n));
                    return o;
                }
            },
            {
                key: "_toKonvaCanvas",
                value: function _toKonvaCanvas(t) {
                    t = t || {};
                    var e = this.getClientRect(), i = this.getStage(), r = void 0 !== t.x ? t.x : e.x, a = void 0 !== t.y ? t.y : e.y, n = t.pixelRatio || 1, s = new A({
                        width: t.width || e.width || (i ? i.width() : 0),
                        height: t.height || e.height || (i ? i.height() : 0),
                        pixelRatio: n
                    }), o = s.getContext();
                    return o.save(), (r || a) && o.translate(-1 * r, -1 * a), this.drawScene(s), o.restore(), s;
                }
            },
            {
                key: "toCanvas",
                value: function toCanvas(t) {
                    return this._toKonvaCanvas(t)._canvas;
                }
            },
            {
                key: "toDataURL",
                value: function toDataURL(t) {
                    var e = (t = t || {}).mimeType || null, i = t.quality || null, r = this._toKonvaCanvas(t).toDataURL(e, i);
                    return t.callback && t.callback(r), r;
                }
            },
            {
                key: "toImage",
                value: function toImage(t) {
                    if (!t || !t.callback) throw "callback required for toImage method config argument";
                    var e = t.callback;
                    delete t.callback, c._urlToImage(this.toDataURL(t), function(t) {
                        e(t);
                    });
                }
            },
            {
                key: "setSize",
                value: function setSize(t) {
                    return this.width(t.width), this.height(t.height), this;
                }
            },
            {
                key: "getSize",
                value: function getSize() {
                    return {
                        width: this.width(),
                        height: this.height()
                    };
                }
            },
            {
                key: "getClassName",
                value: function getClassName() {
                    return this.className || this.nodeType;
                }
            },
            {
                key: "getType",
                value: function getType() {
                    return this.nodeType;
                }
            },
            {
                key: "getDragDistance",
                value: function getDragDistance() {
                    return void 0 !== this.attrs.dragDistance ? this.attrs.dragDistance : this.parent ? this.parent.getDragDistance() : i.dragDistance;
                }
            },
            {
                key: "_off",
                value: function _off(t, e, i) {
                    var r, a, n, s = this.eventListeners[t];
                    for(r = 0; r < s.length; r++)if (a = s[r].name, n = s[r].handler, !("konva" === a && "konva" !== e || e && a !== e || i && i !== n)) {
                        if (s.splice(r, 1), 0 === s.length) {
                            delete this.eventListeners[t];
                            break;
                        }
                        r--;
                    }
                }
            },
            {
                key: "_fireChangeEvent",
                value: function _fireChangeEvent(t, e, i) {
                    this._fire(t + "Change", {
                        oldVal: e,
                        newVal: i
                    });
                }
            },
            {
                key: "addName",
                value: function addName(t) {
                    if (!this.hasName(t)) {
                        var e = this.name(), i = e ? e + " " + t : t;
                        this.name(i);
                    }
                    return this;
                }
            },
            {
                key: "hasName",
                value: function hasName(t) {
                    if (!t) return !1;
                    var e = this.name();
                    return !!e && -1 !== (e || "").split(/\s/g).indexOf(t);
                }
            },
            {
                key: "removeName",
                value: function removeName(t) {
                    var e = (this.name() || "").split(/\s/g), i = e.indexOf(t);
                    return -1 !== i && (e.splice(i, 1), this.name(e.join(" "))), this;
                }
            },
            {
                key: "setAttr",
                value: function setAttr(t, e) {
                    var i = this["set" + c._capitalize(t)];
                    return c._isFunction(i) ? i.call(this, e) : this._setAttr(t, e), this;
                }
            },
            {
                key: "_requestDraw",
                value: function _requestDraw() {
                    if (i.autoDrawEnabled) {
                        var t = this.getLayer() || this.getStage();
                        null == t || t.batchDraw();
                    }
                }
            },
            {
                key: "_setAttr",
                value: function _setAttr(t, e) {
                    var i = this.attrs[t];
                    (i !== e || c.isObject(e)) && (null == e ? delete this.attrs[t] : this.attrs[t] = e, this._shouldFireChangeEvents && this._fireChangeEvent(t, i, e), this._requestDraw());
                }
            },
            {
                key: "_setComponentAttr",
                value: function _setComponentAttr(t, e, i) {
                    var r;
                    void 0 !== i && ((r = this.attrs[t]) || (this.attrs[t] = this.getAttr(t)), this.attrs[t][e] = i, this._fireChangeEvent(t, r, i));
                }
            },
            {
                key: "_fireAndBubble",
                value: function _fireAndBubble(t, e, i) {
                    if (e && "Shape" === this.nodeType && (e.target = this), !(("mouseenter" === t || "mouseleave" === t) && (i && (this === i || this.isAncestorOf && this.isAncestorOf(i)) || "Stage" === this.nodeType && !i))) {
                        this._fire(t, e);
                        var r = ("mouseenter" === t || "mouseleave" === t) && i && i.isAncestorOf && i.isAncestorOf(this) && !i.isAncestorOf(this.parent);
                        (e && !e.cancelBubble || !e) && this.parent && this.parent.isListening() && !r && (i && i.parent ? this._fireAndBubble.call(this.parent, t, e, i) : this._fireAndBubble.call(this.parent, t, e));
                    }
                }
            },
            {
                key: "_getProtoListeners",
                value: function _getProtoListeners(t) {
                    var e = this._cache.get("allEventListeners");
                    if (!e) {
                        e = {};
                        var _$t = Object.getPrototypeOf(this);
                        for(; _$t;)if (_$t.eventListeners) {
                            for(var i in _$t.eventListeners){
                                var r = _$t.eventListeners[i], a = e[i] || [];
                                e[i] = r.concat(a);
                            }
                            _$t = Object.getPrototypeOf(_$t);
                        } else _$t = Object.getPrototypeOf(_$t);
                        this._cache.set("allEventListeners", e);
                    }
                    return e[t];
                }
            },
            {
                key: "_fire",
                value: function _fire(t, e) {
                    (e = e || {}).currentTarget = this, e.type = t;
                    var i = this._getProtoListeners(t);
                    if (i) for(var r = 0; r < i.length; r++)i[r].handler.call(this, e);
                    var a = this.eventListeners[t];
                    if (a) for(r = 0; r < a.length; r++)a[r].handler.call(this, e);
                }
            },
            {
                key: "draw",
                value: function draw() {
                    return this.drawScene(), this.drawHit(), this;
                }
            },
            {
                key: "_createDragElement",
                value: function _createDragElement(t) {
                    var e = t ? t.pointerId : void 0, i = this.getStage(), r = this.getAbsolutePosition(), a = i._getPointerById(e) || i._changedPointerPositions[0] || r;
                    G._dragElements.set(this._id, {
                        node: this,
                        startPointerPos: a,
                        offset: {
                            x: a.x - r.x,
                            y: a.y - r.y
                        },
                        dragStatus: "ready",
                        pointerId: e
                    });
                }
            },
            {
                key: "startDrag",
                value: function startDrag(t) {
                    var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
                    G._dragElements.has(this._id) || this._createDragElement(t);
                    G._dragElements.get(this._id).dragStatus = "dragging", this.fire("dragstart", {
                        type: "dragstart",
                        target: this,
                        evt: t && t.evt
                    }, e);
                }
            },
            {
                key: "_setDragPosition",
                value: function _setDragPosition(t, e) {
                    var i = this.getStage()._getPointerById(e.pointerId);
                    if (i) {
                        var r = {
                            x: i.x - e.offset.x,
                            y: i.y - e.offset.y
                        }, a = this.dragBoundFunc();
                        if (void 0 !== a) {
                            var _$e = a.call(this, r, t);
                            _$e ? r = _$e : c.warn("dragBoundFunc did not return any value. That is unexpected behavior. You must return new absolute position from dragBoundFunc.");
                        }
                        this._lastPos && this._lastPos.x === r.x && this._lastPos.y === r.y || (this.setAbsolutePosition(r), this._requestDraw()), this._lastPos = r;
                    }
                }
            },
            {
                key: "stopDrag",
                value: function stopDrag(t) {
                    var e = G._dragElements.get(this._id);
                    e && (e.dragStatus = "stopped"), G._endDragBefore(t), G._endDragAfter(t);
                }
            },
            {
                key: "setDraggable",
                value: function setDraggable(t) {
                    this._setAttr("draggable", t), this._dragChange();
                }
            },
            {
                key: "isDragging",
                value: function isDragging() {
                    var t = G._dragElements.get(this._id);
                    return !!t && "dragging" === t.dragStatus;
                }
            },
            {
                key: "_listenDrag",
                value: function _listenDrag() {
                    this._dragCleanup(), this.on("mousedown.konva touchstart.konva", function(t) {
                        var _this = this;
                        if ((!(void 0 !== t.evt.button) || i.dragButtons.indexOf(t.evt.button) >= 0) && !this.isDragging()) {
                            var e = !1;
                            G._dragElements.forEach(function(t) {
                                _this.isAncestorOf(t.node) && (e = !0);
                            }), e || this._createDragElement(t);
                        }
                    });
                }
            },
            {
                key: "_dragChange",
                value: function _dragChange() {
                    if (this.attrs.draggable) this._listenDrag();
                    else {
                        if (this._dragCleanup(), !this.getStage()) return;
                        var t = G._dragElements.get(this._id), e = t && "dragging" === t.dragStatus, i = t && "ready" === t.dragStatus;
                        e ? this.stopDrag() : i && G._dragElements.delete(this._id);
                    }
                }
            },
            {
                key: "_dragCleanup",
                value: function _dragCleanup() {
                    this.off("mousedown.konva"), this.off("touchstart.konva");
                }
            },
            {
                key: "isClientRectOnScreen",
                value: function isClientRectOnScreen() {
                    var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
                        x: 0,
                        y: 0
                    };
                    var e = this.getStage();
                    if (!e) return !1;
                    var i = {
                        x: -t.x,
                        y: -t.y,
                        width: e.width() + t.x,
                        height: e.height() + t.y
                    };
                    return c.haveIntersection(i, this.getClientRect());
                }
            }
        ], [
            {
                key: "create",
                value: function create(t, e) {
                    return c._isString(t) && (t = JSON.parse(t)), this._createNode(t, e);
                }
            },
            {
                key: "_createNode",
                value: function _createNode(t, e) {
                    var r, a, n, s = L.prototype.getClassName.call(t), o = t.children;
                    e && (t.attrs.container = e), i[s] || (c.warn('Can not find a node with class name "' + s + '". Fallback to "Shape".'), s = "Shape");
                    if (r = new (0, i[s])(t.attrs), o) for(a = o.length, n = 0; n < a; n++)r.add(L._createNode(o[n]));
                    return r;
                }
            }
        ]);
        return L;
    }();
    L.prototype.nodeType = "Node", L.prototype._attrsAffectingSize = [], L.prototype.eventListeners = {}, L.prototype.on.call(L.prototype, R, function() {
        this._batchingTransformChange ? this._needClearTransformCache = !0 : (this._clearCache("transform"), this._clearSelfAndDescendantCache("absoluteTransform"));
    }), L.prototype.on.call(L.prototype, "visibleChange.konva", function() {
        this._clearSelfAndDescendantCache("visible");
    }), L.prototype.on.call(L.prototype, "listeningChange.konva", function() {
        this._clearSelfAndDescendantCache("listening");
    }), L.prototype.on.call(L.prototype, "opacityChange.konva", function() {
        this._clearSelfAndDescendantCache("absoluteOpacity");
    });
    var D = x.addGetterSetter;
    D(L, "zIndex"), D(L, "absolutePosition"), D(L, "position"), D(L, "x", 0, f()), D(L, "y", 0, f()), D(L, "globalCompositeOperation", "source-over", m()), D(L, "opacity", 1, f()), D(L, "name", "", m()), D(L, "id", "", m()), D(L, "rotation", 0, f()), x.addComponentsGetterSetter(L, "scale", [
        "x",
        "y"
    ]), D(L, "scaleX", 1, f()), D(L, "scaleY", 1, f()), x.addComponentsGetterSetter(L, "skew", [
        "x",
        "y"
    ]), D(L, "skewX", 0, f()), D(L, "skewY", 0, f()), x.addComponentsGetterSetter(L, "offset", [
        "x",
        "y"
    ]), D(L, "offsetX", 0, f()), D(L, "offsetY", 0, f()), D(L, "dragDistance", null, f()), D(L, "width", 0, f()), D(L, "height", 0, f()), D(L, "listening", !0, y()), D(L, "preventDefault", !0, y()), D(L, "filters", null, function(t) {
        return this._filterUpToDate = !1, t;
    }), D(L, "visible", !0, y()), D(L, "transformsEnabled", "all", m()), D(L, "size"), D(L, "dragBoundFunc"), D(L, "draggable", !1, y()), x.backCompat(L, {
        rotateDeg: "rotate",
        setRotationDeg: "setRotation",
        getRotationDeg: "getRotation"
    });
    var O = /*#__PURE__*/ function(L1) {
        _inherits(O, L1);
        var _super = _create_super(O);
        function O() {
            _class_call_check(this, O);
            var _this;
            _this = _super.call.apply(_super, [
                this
            ].concat(Array.prototype.slice.call(arguments))), _this.children = [];
            return _possible_constructor_return(_this);
        }
        _create_class(O, [
            {
                key: "getChildren",
                value: function getChildren(t) {
                    if (!t) return this.children || [];
                    var e = this.children || [];
                    var i = [];
                    return e.forEach(function(e) {
                        t(e) && i.push(e);
                    }), i;
                }
            },
            {
                key: "hasChildren",
                value: function hasChildren() {
                    return this.getChildren().length > 0;
                }
            },
            {
                key: "removeChildren",
                value: function removeChildren() {
                    return this.getChildren().forEach(function(t) {
                        t.parent = null, t.index = 0, t.remove();
                    }), this.children = [], this._requestDraw(), this;
                }
            },
            {
                key: "destroyChildren",
                value: function destroyChildren() {
                    return this.getChildren().forEach(function(t) {
                        t.parent = null, t.index = 0, t.destroy();
                    }), this.children = [], this._requestDraw(), this;
                }
            },
            {
                key: "add",
                value: function add() {
                    for(var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++){
                        t[_key] = arguments[_key];
                    }
                    if (arguments.length > 1) {
                        for(var e = 0; e < arguments.length; e++)this.add(arguments[e]);
                        return this;
                    }
                    var i = t[0];
                    return i.getParent() ? (i.moveTo(this), this) : (this._validateAdd(i), i.index = this.getChildren().length, i.parent = this, i._clearCaches(), this.getChildren().push(i), this._fire("add", {
                        child: i
                    }), this._requestDraw(), this);
                }
            },
            {
                key: "destroy",
                value: function destroy() {
                    return this.hasChildren() && this.destroyChildren(), _get(_get_prototype_of(O.prototype), "destroy", this).call(this), this;
                }
            },
            {
                key: "find",
                value: function find(t) {
                    return this._generalFind(t, !1);
                }
            },
            {
                key: "findOne",
                value: function findOne(t) {
                    var e = this._generalFind(t, !0);
                    return e.length > 0 ? e[0] : void 0;
                }
            },
            {
                key: "_generalFind",
                value: function _generalFind(t, e) {
                    var i = [];
                    return this._descendants(function(r) {
                        var a = r._isMatch(t);
                        return a && i.push(r), !(!a || !e);
                    }), i;
                }
            },
            {
                key: "_descendants",
                value: function _descendants(t) {
                    var e = !1;
                    var i = this.getChildren();
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = i[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var r = _step.value;
                            if (e = t(r), e) return !0;
                            if (r.hasChildren() && (e = r._descendants(t), e)) return !0;
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return !1;
                }
            },
            {
                key: "toObject",
                value: function toObject() {
                    var t = L.prototype.toObject.call(this);
                    return t.children = [], this.getChildren().forEach(function(e) {
                        t.children.push(e.toObject());
                    }), t;
                }
            },
            {
                key: "isAncestorOf",
                value: function isAncestorOf(t) {
                    for(var e = t.getParent(); e;){
                        if (e._id === this._id) return !0;
                        e = e.getParent();
                    }
                    return !1;
                }
            },
            {
                key: "clone",
                value: function clone(t) {
                    var e = L.prototype.clone.call(this, t);
                    return this.getChildren().forEach(function(t) {
                        e.add(t.clone());
                    }), e;
                }
            },
            {
                key: "getAllIntersections",
                value: function getAllIntersections(t) {
                    var e = [];
                    return this.find("Shape").forEach(function(i) {
                        i.isVisible() && i.intersects(t) && e.push(i);
                    }), e;
                }
            },
            {
                key: "_clearSelfAndDescendantCache",
                value: function _clearSelfAndDescendantCache(t) {
                    var e;
                    _get(_get_prototype_of(O.prototype), "_clearSelfAndDescendantCache", this).call(this, t), this.isCached() || null === (e = this.children) || void 0 === e || e.forEach(function(e) {
                        e._clearSelfAndDescendantCache(t);
                    });
                }
            },
            {
                key: "_setChildrenIndices",
                value: function _setChildrenIndices() {
                    var t;
                    null === (t = this.children) || void 0 === t || t.forEach(function(t, e) {
                        t.index = e;
                    }), this._requestDraw();
                }
            },
            {
                key: "drawScene",
                value: function drawScene(t, e) {
                    var i = this.getLayer(), r = t || i && i.getCanvas(), a = r && r.getContext(), n = this._getCanvasCache(), s = n && n.scene, o = r && r.isCache;
                    if (!this.isVisible() && !o) return this;
                    if (s) {
                        a.save();
                        var h = this.getAbsoluteTransform(e).getMatrix();
                        a.transform(h[0], h[1], h[2], h[3], h[4], h[5]), this._drawCachedSceneCanvas(a), a.restore();
                    } else this._drawChildren("drawScene", r, e);
                    return this;
                }
            },
            {
                key: "drawHit",
                value: function drawHit(t, e) {
                    if (!this.shouldDrawHit(e)) return this;
                    var i = this.getLayer(), r = t || i && i.hitCanvas, a = r && r.getContext(), n = this._getCanvasCache();
                    if (n && n.hit) {
                        a.save();
                        var s = this.getAbsoluteTransform(e).getMatrix();
                        a.transform(s[0], s[1], s[2], s[3], s[4], s[5]), this._drawCachedHitCanvas(a), a.restore();
                    } else this._drawChildren("drawHit", r, e);
                    return this;
                }
            },
            {
                key: "_drawChildren",
                value: function _drawChildren(t, e, i) {
                    var r, a = e && e.getContext(), n = this.clipWidth(), s = this.clipHeight(), o = this.clipFunc(), h = n && s || o;
                    var l = i === this;
                    if (h) {
                        a.save();
                        var d = this.getAbsoluteTransform(i), c = d.getMatrix();
                        if (a.transform(c[0], c[1], c[2], c[3], c[4], c[5]), a.beginPath(), o) o.call(this, a, this);
                        else {
                            var g = this.clipX(), _$u = this.clipY();
                            a.rect(g, _$u, n, s);
                        }
                        a.clip(), c = d.copy().invert().getMatrix(), a.transform(c[0], c[1], c[2], c[3], c[4], c[5]);
                    }
                    var _$f = !l && "source-over" !== this.globalCompositeOperation() && "drawScene" === t;
                    _$f && (a.save(), a._applyGlobalCompositeOperation(this)), null === (r = this.children) || void 0 === r || r.forEach(function(r) {
                        r[t](e, i);
                    }), _$f && a.restore(), h && a.restore();
                }
            },
            {
                key: "getClientRect",
                value: function getClientRect(t) {
                    var e, i, r, a, n, s = (t = t || {}).skipTransform, o = t.relativeTo, h = {
                        x: 1 / 0,
                        y: 1 / 0,
                        width: 0,
                        height: 0
                    }, l = this;
                    null === (e = this.children) || void 0 === e || e.forEach(function(e) {
                        if (e.visible()) {
                            var s = e.getClientRect({
                                relativeTo: l,
                                skipShadow: t.skipShadow,
                                skipStroke: t.skipStroke
                            });
                            0 === s.width && 0 === s.height || (void 0 === i ? (i = s.x, r = s.y, a = s.x + s.width, n = s.y + s.height) : (i = Math.min(i, s.x), r = Math.min(r, s.y), a = Math.max(a, s.x + s.width), n = Math.max(n, s.y + s.height)));
                        }
                    });
                    for(var d = this.find("Shape"), c = !1, g = 0; g < d.length; g++){
                        if (d[g]._isVisible(this)) {
                            c = !0;
                            break;
                        }
                    }
                    return h = c && void 0 !== i ? {
                        x: i,
                        y: r,
                        width: a - i,
                        height: n - r
                    } : {
                        x: 0,
                        y: 0,
                        width: 0,
                        height: 0
                    }, s ? h : this._transformedRect(h, o);
                }
            }
        ]);
        return O;
    }(L);
    x.addComponentsGetterSetter(O, "clip", [
        "x",
        "y",
        "width",
        "height"
    ]), x.addGetterSetter(O, "clipX", void 0, f()), x.addGetterSetter(O, "clipY", void 0, f()), x.addGetterSetter(O, "clipWidth", void 0, f()), x.addGetterSetter(O, "clipHeight", void 0, f()), x.addGetterSetter(O, "clipFunc");
    var I = new Map, F = void 0 !== i._global.PointerEvent;
    function N(t) {
        return I.get(t);
    }
    function B(t) {
        return {
            evt: t,
            pointerId: t.pointerId
        };
    }
    function z(t, e) {
        return I.get(t) === e;
    }
    function W(t, e) {
        H(t);
        e.getStage() && (I.set(t, e), F && e._fire("gotpointercapture", B(new PointerEvent("gotpointercapture"))));
    }
    function H(t, e) {
        var i = I.get(t);
        if (!i) return;
        var r = i.getStage();
        r && r.content, I.delete(t), F && i._fire("lostpointercapture", B(new PointerEvent("lostpointercapture")));
    }
    var Y = [
        [
            "mouseenter",
            "_pointerenter"
        ],
        [
            "mousedown",
            "_pointerdown"
        ],
        [
            "mousemove",
            "_pointermove"
        ],
        [
            "mouseup",
            "_pointerup"
        ],
        [
            "mouseleave",
            "_pointerleave"
        ],
        [
            "touchstart",
            "_pointerdown"
        ],
        [
            "touchmove",
            "_pointermove"
        ],
        [
            "touchend",
            "_pointerup"
        ],
        [
            "touchcancel",
            "_pointercancel"
        ],
        [
            "mouseover",
            "_pointerover"
        ],
        [
            "wheel",
            "_wheel"
        ],
        [
            "contextmenu",
            "_contextmenu"
        ],
        [
            "pointerdown",
            "_pointerdown"
        ],
        [
            "pointermove",
            "_pointermove"
        ],
        [
            "pointerup",
            "_pointerup"
        ],
        [
            "pointercancel",
            "_pointercancel"
        ],
        [
            "lostpointercapture",
            "_lostpointercapture"
        ]
    ];
    var X = {
        mouse: {
            pointerout: "mouseout",
            pointerleave: "mouseleave",
            pointerover: "mouseover",
            pointerenter: "mouseenter",
            pointermove: "mousemove",
            pointerdown: "mousedown",
            pointerup: "mouseup",
            pointercancel: "mousecancel",
            pointerclick: "click",
            pointerdblclick: "dblclick"
        },
        touch: {
            pointerout: "touchout",
            pointerleave: "touchleave",
            pointerover: "touchover",
            pointerenter: "touchenter",
            pointermove: "touchmove",
            pointerdown: "touchstart",
            pointerup: "touchend",
            pointercancel: "touchcancel",
            pointerclick: "tap",
            pointerdblclick: "dbltap"
        },
        pointer: {
            pointerout: "pointerout",
            pointerleave: "pointerleave",
            pointerover: "pointerover",
            pointerenter: "pointerenter",
            pointermove: "pointermove",
            pointerdown: "pointerdown",
            pointerup: "pointerup",
            pointercancel: "pointercancel",
            pointerclick: "pointerclick",
            pointerdblclick: "pointerdblclick"
        }
    }, j = function(t) {
        return t.indexOf("pointer") >= 0 ? "pointer" : t.indexOf("touch") >= 0 ? "touch" : "mouse";
    }, U = function(t) {
        var e = j(t);
        return "pointer" === e ? i.pointerEventsEnabled && X.pointer : "touch" === e ? X.touch : "mouse" === e ? X.mouse : void 0;
    };
    function q() {
        var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        return (t.clipFunc || t.clipWidth || t.clipHeight) && c.warn("Stage does not support clipping. Please use clip for Layers or Groups."), t;
    }
    var V = [];
    var K = /*#__PURE__*/ function(O1) {
        _inherits(K, O1);
        var _super = _create_super(K);
        function K(t) {
            _class_call_check(this, K);
            var _this;
            _this = _super.call(this, q(t)), _this._pointerPositions = [], _this._changedPointerPositions = [], _this._buildDOM(), _this._bindContentEvents(), V.push(_assert_this_initialized(_this)), _this.on("widthChange.konva heightChange.konva", _this._resizeDOM), _this.on("visibleChange.konva", _this._checkVisibility), _this.on("clipWidthChange.konva clipHeightChange.konva clipFuncChange.konva", function() {
                q(_this.attrs);
            }), _this._checkVisibility();
            return _possible_constructor_return(_this);
        }
        _create_class(K, [
            {
                key: "_validateAdd",
                value: function _validateAdd(t) {
                    var e = "Layer" === t.getType(), i = "FastLayer" === t.getType();
                    e || i || c.throw("You may only add layers to the stage.");
                }
            },
            {
                key: "_checkVisibility",
                value: function _checkVisibility() {
                    if (!this.content) return;
                    var t = this.visible() ? "" : "none";
                    this.content.style.display = t;
                }
            },
            {
                key: "setContainer",
                value: function setContainer(t) {
                    if ("string" == typeof t) {
                        if ("." === t.charAt(0)) {
                            var e = t.slice(1);
                            t = document.getElementsByClassName(e)[0];
                        } else {
                            var i;
                            i = "#" !== t.charAt(0) ? t : t.slice(1), t = document.getElementById(i);
                        }
                        if (!t) throw "Can not find container in document with id " + i;
                    }
                    return this._setAttr("container", t), this.content && (this.content.parentElement && this.content.parentElement.removeChild(this.content), t.appendChild(this.content)), this;
                }
            },
            {
                key: "shouldDrawHit",
                value: function shouldDrawHit() {
                    return !0;
                }
            },
            {
                key: "clear",
                value: function clear() {
                    var t, e = this.children, i = e.length;
                    for(t = 0; t < i; t++)e[t].clear();
                    return this;
                }
            },
            {
                key: "clone",
                value: function clone(t) {
                    return t || (t = {}), t.container = "undefined" != typeof document && document.createElement("div"), O.prototype.clone.call(this, t);
                }
            },
            {
                key: "destroy",
                value: function destroy() {
                    _get(_get_prototype_of(K.prototype), "destroy", this).call(this);
                    var t = this.content;
                    t && c._isInDocument(t) && this.container().removeChild(t);
                    var e = V.indexOf(this);
                    return e > -1 && V.splice(e, 1), this;
                }
            },
            {
                key: "getPointerPosition",
                value: function getPointerPosition() {
                    var t = this._pointerPositions[0] || this._changedPointerPositions[0];
                    return t ? {
                        x: t.x,
                        y: t.y
                    } : (c.warn("Pointer position is missing and not registered by the stage. Looks like it is outside of the stage container. You can set it manually from event: stage.setPointersPositions(event);"), null);
                }
            },
            {
                key: "_getPointerById",
                value: function _getPointerById(t) {
                    return this._pointerPositions.find(function(e) {
                        return e.id === t;
                    });
                }
            },
            {
                key: "getPointersPositions",
                value: function getPointersPositions() {
                    return this._pointerPositions;
                }
            },
            {
                key: "getStage",
                value: function getStage() {
                    return this;
                }
            },
            {
                key: "getContent",
                value: function getContent() {
                    return this.content;
                }
            },
            {
                key: "_toKonvaCanvas",
                value: function _toKonvaCanvas(t) {
                    (t = t || {}).x = t.x || 0, t.y = t.y || 0, t.width = t.width || this.width(), t.height = t.height || this.height();
                    var e = new A({
                        width: t.width,
                        height: t.height,
                        pixelRatio: t.pixelRatio || 1
                    }), i = e.getContext()._context, r = this.children;
                    return (t.x || t.y) && i.translate(-1 * t.x, -1 * t.y), r.forEach(function(e) {
                        if (e.isVisible()) {
                            var r = e._toKonvaCanvas(t);
                            i.drawImage(r._canvas, t.x, t.y, r.getWidth() / r.getPixelRatio(), r.getHeight() / r.getPixelRatio());
                        }
                    }), e;
                }
            },
            {
                key: "getIntersection",
                value: function getIntersection(t) {
                    if (!t) return null;
                    var e, i = this.children;
                    for(e = i.length - 1; e >= 0; e--){
                        var r = i[e].getIntersection(t);
                        if (r) return r;
                    }
                    return null;
                }
            },
            {
                key: "_resizeDOM",
                value: function _resizeDOM() {
                    var t = this.width(), e = this.height();
                    this.content && (this.content.style.width = t + "px", this.content.style.height = e + "px"), this.bufferCanvas.setSize(t, e), this.bufferHitCanvas.setSize(t, e), this.children.forEach(function(i) {
                        i.setSize({
                            width: t,
                            height: e
                        }), i.draw();
                    });
                }
            },
            {
                key: "add",
                value: function add(t) {
                    for(var _len = arguments.length, e = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                        e[_key - 1] = arguments[_key];
                    }
                    if (arguments.length > 1) {
                        for(var r = 0; r < arguments.length; r++)this.add(arguments[r]);
                        return this;
                    }
                    _get(_get_prototype_of(K.prototype), "add", this).call(this, t);
                    var a = this.children.length;
                    return a > 5 && c.warn("The stage has " + a + " layers. Recommended maximum number of layers is 3-5. Adding more layers into the stage may drop the performance. Rethink your tree structure, you can use Konva.Group."), t.setSize({
                        width: this.width(),
                        height: this.height()
                    }), t.draw(), i.isBrowser && this.content.appendChild(t.canvas._canvas), this;
                }
            },
            {
                key: "getParent",
                value: function getParent() {
                    return null;
                }
            },
            {
                key: "getLayer",
                value: function getLayer() {
                    return null;
                }
            },
            {
                key: "hasPointerCapture",
                value: function hasPointerCapture(t) {
                    return z(t, this);
                }
            },
            {
                key: "setPointerCapture",
                value: function setPointerCapture(t) {
                    W(t, this);
                }
            },
            {
                key: "releaseCapture",
                value: function releaseCapture(t) {
                    H(t);
                }
            },
            {
                key: "getLayers",
                value: function getLayers() {
                    return this.children;
                }
            },
            {
                key: "_bindContentEvents",
                value: function _bindContentEvents() {
                    var _this = this;
                    i.isBrowser && Y.forEach(function(param) {
                        var _param = _sliced_to_array(param, 2), t = _param[0], e = _param[1];
                        _this.content.addEventListener(t, function(t) {
                            _this[e](t);
                        });
                    });
                }
            },
            {
                key: "_pointerenter",
                value: function _pointerenter(t) {
                    this.setPointersPositions(t);
                    var e = U(t.type);
                    this._fire(e.pointerenter, {
                        evt: t,
                        target: this,
                        currentTarget: this
                    });
                }
            },
            {
                key: "_pointerover",
                value: function _pointerover(t) {
                    this.setPointersPositions(t);
                    var e = U(t.type);
                    this._fire(e.pointerover, {
                        evt: t,
                        target: this,
                        currentTarget: this
                    });
                }
            },
            {
                key: "_getTargetShape",
                value: function _getTargetShape(t) {
                    var e = this[t + "targetShape"];
                    return e && !e.getStage() && (e = null), e;
                }
            },
            {
                key: "_pointerleave",
                value: function _pointerleave(t) {
                    var e = U(t.type), r = j(t.type);
                    if (e) {
                        this.setPointersPositions(t);
                        var a = this._getTargetShape(r), n = !G.isDragging || i.hitOnDragEnabled;
                        a && n ? (a._fireAndBubble(e.pointerout, {
                            evt: t
                        }), a._fireAndBubble(e.pointerleave, {
                            evt: t
                        }), this._fire(e.pointerleave, {
                            evt: t,
                            target: this,
                            currentTarget: this
                        }), this[r + "targetShape"] = null) : n && (this._fire(e.pointerleave, {
                            evt: t,
                            target: this,
                            currentTarget: this
                        }), this._fire(e.pointerout, {
                            evt: t,
                            target: this,
                            currentTarget: this
                        })), this.pointerPos = void 0, this._pointerPositions = [];
                    }
                }
            },
            {
                key: "_pointerdown",
                value: function _pointerdown(t) {
                    var _this = this;
                    var e = U(t.type), r = j(t.type);
                    if (e) {
                        this.setPointersPositions(t);
                        var a = !1;
                        this._changedPointerPositions.forEach(function(n) {
                            var s = _this.getIntersection(n);
                            G.justDragged = !1, i["_" + r + "ListenClick"] = !0;
                            if (!(s && s.isListening())) return;
                            i.capturePointerEventsEnabled && s.setPointerCapture(n.id), _this[r + "ClickStartShape"] = s, s._fireAndBubble(e.pointerdown, {
                                evt: t,
                                pointerId: n.id
                            }), a = !0;
                            var o = t.type.indexOf("touch") >= 0;
                            s.preventDefault() && t.cancelable && o && t.preventDefault();
                        }), a || this._fire(e.pointerdown, {
                            evt: t,
                            target: this,
                            currentTarget: this,
                            pointerId: this._pointerPositions[0].id
                        });
                    }
                }
            },
            {
                key: "_pointermove",
                value: function _pointermove(t) {
                    var _this = this;
                    var e = U(t.type), r = j(t.type);
                    if (!e) return;
                    if (G.isDragging && G.node.preventDefault() && t.cancelable && t.preventDefault(), this.setPointersPositions(t), !(!G.isDragging || i.hitOnDragEnabled)) return;
                    var a = {};
                    var n = !1;
                    var s = this._getTargetShape(r);
                    this._changedPointerPositions.forEach(function(i) {
                        var o = N(i.id) || _this.getIntersection(i), h = i.id, l = {
                            evt: t,
                            pointerId: h
                        };
                        var d = s !== o;
                        if (d && s && (s._fireAndBubble(e.pointerout, l, o), s._fireAndBubble(e.pointerleave, l, o)), o) {
                            if (a[o._id]) return;
                            a[o._id] = !0;
                        }
                        o && o.isListening() ? (n = !0, d && (o._fireAndBubble(e.pointerover, l, s), o._fireAndBubble(e.pointerenter, l, s), _this[r + "targetShape"] = o), o._fireAndBubble(e.pointermove, l)) : s && (_this._fire(e.pointerover, {
                            evt: t,
                            target: _this,
                            currentTarget: _this,
                            pointerId: h
                        }), _this[r + "targetShape"] = null);
                    }), n || this._fire(e.pointermove, {
                        evt: t,
                        target: this,
                        currentTarget: this,
                        pointerId: this._changedPointerPositions[0].id
                    });
                }
            },
            {
                key: "_pointerup",
                value: function _pointerup(t) {
                    var _this = this;
                    var e = U(t.type), r = j(t.type);
                    if (!e) return;
                    this.setPointersPositions(t);
                    var a = this[r + "ClickStartShape"], n = this[r + "ClickEndShape"];
                    var s = {};
                    var o = !1;
                    this._changedPointerPositions.forEach(function(h) {
                        var l = N(h.id) || _this.getIntersection(h);
                        if (l) {
                            if (l.releaseCapture(h.id), s[l._id]) return;
                            s[l._id] = !0;
                        }
                        var d = h.id, c = {
                            evt: t,
                            pointerId: d
                        };
                        var g = !1;
                        i["_" + r + "InDblClickWindow"] ? (g = !0, clearTimeout(_this[r + "DblTimeout"])) : G.justDragged || (i["_" + r + "InDblClickWindow"] = !0, clearTimeout(_this[r + "DblTimeout"])), _this[r + "DblTimeout"] = setTimeout(function() {
                            i["_" + r + "InDblClickWindow"] = !1;
                        }, i.dblClickWindow), l && l.isListening() ? (o = !0, _this[r + "ClickEndShape"] = l, l._fireAndBubble(e.pointerup, c), i["_" + r + "ListenClick"] && a && a === l && (l._fireAndBubble(e.pointerclick, c), g && n && n === l && l._fireAndBubble(e.pointerdblclick, c))) : (_this[r + "ClickEndShape"] = null, i["_" + r + "ListenClick"] && _this._fire(e.pointerclick, {
                            evt: t,
                            target: _this,
                            currentTarget: _this,
                            pointerId: d
                        }), g && _this._fire(e.pointerdblclick, {
                            evt: t,
                            target: _this,
                            currentTarget: _this,
                            pointerId: d
                        }));
                    }), o || this._fire(e.pointerup, {
                        evt: t,
                        target: this,
                        currentTarget: this,
                        pointerId: this._changedPointerPositions[0].id
                    }), i["_" + r + "ListenClick"] = !1, t.cancelable && t.preventDefault();
                }
            },
            {
                key: "_contextmenu",
                value: function _contextmenu(t) {
                    this.setPointersPositions(t);
                    var e = this.getIntersection(this.getPointerPosition());
                    e && e.isListening() ? e._fireAndBubble("contextmenu", {
                        evt: t
                    }) : this._fire("contextmenu", {
                        evt: t,
                        target: this,
                        currentTarget: this
                    });
                }
            },
            {
                key: "_wheel",
                value: function _wheel(t) {
                    this.setPointersPositions(t);
                    var e = this.getIntersection(this.getPointerPosition());
                    e && e.isListening() ? e._fireAndBubble("wheel", {
                        evt: t
                    }) : this._fire("wheel", {
                        evt: t,
                        target: this,
                        currentTarget: this
                    });
                }
            },
            {
                key: "_pointercancel",
                value: function _pointercancel(t) {
                    this.setPointersPositions(t);
                    var e = N(t.pointerId) || this.getIntersection(this.getPointerPosition());
                    e && e._fireAndBubble("pointerup", B(t)), H(t.pointerId);
                }
            },
            {
                key: "_lostpointercapture",
                value: function _lostpointercapture(t) {
                    H(t.pointerId);
                }
            },
            {
                key: "setPointersPositions",
                value: function setPointersPositions(t) {
                    var _this = this;
                    var e = this._getContentPosition(), i = null, r = null;
                    void 0 !== (t = t || window.event).touches ? (this._pointerPositions = [], this._changedPointerPositions = [], Array.prototype.forEach.call(t.touches, function(t) {
                        _this._pointerPositions.push({
                            id: t.identifier,
                            x: (t.clientX - e.left) / e.scaleX,
                            y: (t.clientY - e.top) / e.scaleY
                        });
                    }), Array.prototype.forEach.call(t.changedTouches || t.touches, function(t) {
                        _this._changedPointerPositions.push({
                            id: t.identifier,
                            x: (t.clientX - e.left) / e.scaleX,
                            y: (t.clientY - e.top) / e.scaleY
                        });
                    })) : (i = (t.clientX - e.left) / e.scaleX, r = (t.clientY - e.top) / e.scaleY, this.pointerPos = {
                        x: i,
                        y: r
                    }, this._pointerPositions = [
                        {
                            x: i,
                            y: r,
                            id: c._getFirstPointerId(t)
                        }
                    ], this._changedPointerPositions = [
                        {
                            x: i,
                            y: r,
                            id: c._getFirstPointerId(t)
                        }
                    ]);
                }
            },
            {
                key: "_setPointerPosition",
                value: function _setPointerPosition(t) {
                    c.warn('Method _setPointerPosition is deprecated. Use "stage.setPointersPositions(event)" instead.'), this.setPointersPositions(t);
                }
            },
            {
                key: "_getContentPosition",
                value: function _getContentPosition() {
                    if (!this.content || !this.content.getBoundingClientRect) return {
                        top: 0,
                        left: 0,
                        scaleX: 1,
                        scaleY: 1
                    };
                    var t = this.content.getBoundingClientRect();
                    return {
                        top: t.top,
                        left: t.left,
                        scaleX: t.width / this.content.clientWidth || 1,
                        scaleY: t.height / this.content.clientHeight || 1
                    };
                }
            },
            {
                key: "_buildDOM",
                value: function _buildDOM() {
                    if (this.bufferCanvas = new A({
                        width: this.width(),
                        height: this.height()
                    }), this.bufferHitCanvas = new M({
                        pixelRatio: 1,
                        width: this.width(),
                        height: this.height()
                    }), i.isBrowser) {
                        var t = this.container();
                        if (!t) throw "Stage has no container. A container is required.";
                        t.innerHTML = "", this.content = document.createElement("div"), this.content.style.position = "relative", this.content.style.userSelect = "none", this.content.className = "konvajs-content", this.content.setAttribute("role", "presentation"), t.appendChild(this.content), this._resizeDOM();
                    }
                }
            },
            {
                key: "cache",
                value: function cache() {
                    return c.warn("Cache function is not allowed for stage. You may use cache only for layers, groups and shapes."), this;
                }
            },
            {
                key: "clearCache",
                value: function clearCache() {
                    return this;
                }
            },
            {
                key: "batchDraw",
                value: function batchDraw() {
                    return this.getChildren().forEach(function(t) {
                        t.batchDraw();
                    }), this;
                }
            }
        ]);
        return K;
    }(O);
    K.prototype.nodeType = "Stage", r(K), x.addGetterSetter(K, "container");
    var Q;
    function J() {
        return Q || (Q = c.createCanvasElement().getContext("2d"), Q);
    }
    var Z = {};
    var $ = /*#__PURE__*/ function(L1) {
        _inherits($, L1);
        var _super = _create_super($);
        function $(t) {
            _class_call_check(this, $);
            var _this;
            var e;
            for(_this = _super.call(this, t); e = c.getRandomColor(), !e || (e in Z););
            _this.colorKey = e, Z[e] = _assert_this_initialized(_this);
            return _possible_constructor_return(_this);
        }
        _create_class($, [
            {
                key: "getContext",
                value: function getContext() {
                    return c.warn("shape.getContext() method is deprecated. Please do not use it."), this.getLayer().getContext();
                }
            },
            {
                key: "getCanvas",
                value: function getCanvas() {
                    return c.warn("shape.getCanvas() method is deprecated. Please do not use it."), this.getLayer().getCanvas();
                }
            },
            {
                key: "getSceneFunc",
                value: function getSceneFunc() {
                    return this.attrs.sceneFunc || this._sceneFunc;
                }
            },
            {
                key: "getHitFunc",
                value: function getHitFunc() {
                    return this.attrs.hitFunc || this._hitFunc;
                }
            },
            {
                key: "hasShadow",
                value: function hasShadow() {
                    return this._getCache("hasShadow", this._hasShadow);
                }
            },
            {
                key: "_hasShadow",
                value: function _hasShadow() {
                    return this.shadowEnabled() && 0 !== this.shadowOpacity() && !!(this.shadowColor() || this.shadowBlur() || this.shadowOffsetX() || this.shadowOffsetY());
                }
            },
            {
                key: "_getFillPattern",
                value: function _getFillPattern() {
                    return this._getCache("patternImage", this.__getFillPattern);
                }
            },
            {
                key: "__getFillPattern",
                value: function __getFillPattern() {
                    if (this.fillPatternImage()) {
                        var t = J().createPattern(this.fillPatternImage(), this.fillPatternRepeat() || "repeat");
                        if (t && t.setTransform) {
                            var e = new a;
                            e.translate(this.fillPatternX(), this.fillPatternY()), e.rotate(i.getAngle(this.fillPatternRotation())), e.scale(this.fillPatternScaleX(), this.fillPatternScaleY()), e.translate(-1 * this.fillPatternOffsetX(), -1 * this.fillPatternOffsetY());
                            var r = e.getMatrix();
                            t.setTransform({
                                a: r[0],
                                b: r[1],
                                c: r[2],
                                d: r[3],
                                e: r[4],
                                f: r[5]
                            });
                        }
                        return t;
                    }
                }
            },
            {
                key: "_getLinearGradient",
                value: function _getLinearGradient() {
                    return this._getCache("linearGradient", this.__getLinearGradient);
                }
            },
            {
                key: "__getLinearGradient",
                value: function __getLinearGradient() {
                    var t = this.fillLinearGradientColorStops();
                    if (t) {
                        for(var e = J(), i = this.fillLinearGradientStartPoint(), r = this.fillLinearGradientEndPoint(), a = e.createLinearGradient(i.x, i.y, r.x, r.y), n = 0; n < t.length; n += 2)a.addColorStop(t[n], t[n + 1]);
                        return a;
                    }
                }
            },
            {
                key: "_getRadialGradient",
                value: function _getRadialGradient() {
                    return this._getCache("radialGradient", this.__getRadialGradient);
                }
            },
            {
                key: "__getRadialGradient",
                value: function __getRadialGradient() {
                    var t = this.fillRadialGradientColorStops();
                    if (t) {
                        for(var e = J(), i = this.fillRadialGradientStartPoint(), r = this.fillRadialGradientEndPoint(), a = e.createRadialGradient(i.x, i.y, this.fillRadialGradientStartRadius(), r.x, r.y, this.fillRadialGradientEndRadius()), n = 0; n < t.length; n += 2)a.addColorStop(t[n], t[n + 1]);
                        return a;
                    }
                }
            },
            {
                key: "getShadowRGBA",
                value: function getShadowRGBA() {
                    return this._getCache("shadowRGBA", this._getShadowRGBA);
                }
            },
            {
                key: "_getShadowRGBA",
                value: function _getShadowRGBA() {
                    if (this.hasShadow()) {
                        var t = c.colorToRGBA(this.shadowColor());
                        return "rgba(" + t.r + "," + t.g + "," + t.b + "," + t.a * (this.shadowOpacity() || 1) + ")";
                    }
                }
            },
            {
                key: "hasFill",
                value: function hasFill() {
                    var _this = this;
                    return this._calculate("hasFill", [
                        "fillEnabled",
                        "fill",
                        "fillPatternImage",
                        "fillLinearGradientColorStops",
                        "fillRadialGradientColorStops"
                    ], function() {
                        return _this.fillEnabled() && !!(_this.fill() || _this.fillPatternImage() || _this.fillLinearGradientColorStops() || _this.fillRadialGradientColorStops());
                    });
                }
            },
            {
                key: "hasStroke",
                value: function hasStroke() {
                    var _this = this;
                    return this._calculate("hasStroke", [
                        "strokeEnabled",
                        "strokeWidth",
                        "stroke",
                        "strokeLinearGradientColorStops"
                    ], function() {
                        return _this.strokeEnabled() && _this.strokeWidth() && !(!_this.stroke() && !_this.strokeLinearGradientColorStops());
                    });
                }
            },
            {
                key: "hasHitStroke",
                value: function hasHitStroke() {
                    var t = this.hitStrokeWidth();
                    return "auto" === t ? this.hasStroke() : this.strokeEnabled() && !!t;
                }
            },
            {
                key: "intersects",
                value: function intersects(t) {
                    var e = this.getStage().bufferHitCanvas;
                    return e.getContext().clear(), this.drawHit(e, null, !0), e.context.getImageData(Math.round(t.x), Math.round(t.y), 1, 1).data[3] > 0;
                }
            },
            {
                key: "destroy",
                value: function destroy() {
                    return L.prototype.destroy.call(this), delete Z[this.colorKey], delete this.colorKey, this;
                }
            },
            {
                key: "_useBufferCanvas",
                value: function _useBufferCanvas(t) {
                    var e;
                    if (!this.getStage()) return !1;
                    if (!(null === (e = this.attrs.perfectDrawEnabled) || void 0 === e || e)) return !1;
                    var i = t || this.hasFill(), r = this.hasStroke(), a = 1 !== this.getAbsoluteOpacity();
                    if (i && r && a) return !0;
                    var n = this.hasShadow(), s = this.shadowForStrokeEnabled();
                    return !!(i && r && n && s);
                }
            },
            {
                key: "setStrokeHitEnabled",
                value: function setStrokeHitEnabled(t) {
                    c.warn("strokeHitEnabled property is deprecated. Please use hitStrokeWidth instead."), t ? this.hitStrokeWidth("auto") : this.hitStrokeWidth(0);
                }
            },
            {
                key: "getStrokeHitEnabled",
                value: function getStrokeHitEnabled() {
                    return 0 !== this.hitStrokeWidth();
                }
            },
            {
                key: "getSelfRect",
                value: function getSelfRect() {
                    var t = this.size();
                    return {
                        x: this._centroid ? -t.width / 2 : 0,
                        y: this._centroid ? -t.height / 2 : 0,
                        width: t.width,
                        height: t.height
                    };
                }
            },
            {
                key: "getClientRect",
                value: function getClientRect() {
                    var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                    var e = t.skipTransform, i = t.relativeTo, r = this.getSelfRect(), a = !t.skipStroke && this.hasStroke() && this.strokeWidth() || 0, n = r.width + a, s = r.height + a, o = !t.skipShadow && this.hasShadow(), h = o ? this.shadowOffsetX() : 0, l = o ? this.shadowOffsetY() : 0, d = n + Math.abs(h), c = s + Math.abs(l), g = o && this.shadowBlur() || 0, _$u = d + 2 * g, _$f = c + 2 * g;
                    var _$p = 0;
                    Math.round(a / 2) !== a / 2 && (_$p = 1);
                    var _$v = {
                        width: _$u + _$p,
                        height: _$f + _$p,
                        x: -Math.round(a / 2 + g) + Math.min(h, 0) + r.x,
                        y: -Math.round(a / 2 + g) + Math.min(l, 0) + r.y
                    };
                    return e ? _$v : this._transformedRect(_$v, i);
                }
            },
            {
                key: "drawScene",
                value: function drawScene(t, e) {
                    var i, r, a = this.getLayer(), n = t || a.getCanvas(), s = n.getContext(), o = this._getCanvasCache(), h = this.getSceneFunc(), l = this.hasShadow(), d = n.isCache, c = e === this;
                    if (!this.isVisible() && !c) return this;
                    if (o) {
                        s.save();
                        var g = this.getAbsoluteTransform(e).getMatrix();
                        return s.transform(g[0], g[1], g[2], g[3], g[4], g[5]), this._drawCachedSceneCanvas(s), s.restore(), this;
                    }
                    if (!h) return this;
                    if (s.save(), this._useBufferCanvas() && !d) {
                        (r = (i = this.getStage().bufferCanvas).getContext()).clear(), r.save(), r._applyLineJoin(this);
                        var _$u = this.getAbsoluteTransform(e).getMatrix();
                        r.transform(_$u[0], _$u[1], _$u[2], _$u[3], _$u[4], _$u[5]), h.call(this, r, this), r.restore();
                        var _$f = i.pixelRatio;
                        l && s._applyShadow(this), s._applyOpacity(this), s._applyGlobalCompositeOperation(this), s.drawImage(i._canvas, 0, 0, i.width / _$f, i.height / _$f);
                    } else {
                        if (s._applyLineJoin(this), !c) {
                            _$u = this.getAbsoluteTransform(e).getMatrix();
                            s.transform(_$u[0], _$u[1], _$u[2], _$u[3], _$u[4], _$u[5]), s._applyOpacity(this), s._applyGlobalCompositeOperation(this);
                        }
                        l && s._applyShadow(this), h.call(this, s, this);
                    }
                    return s.restore(), this;
                }
            },
            {
                key: "drawHit",
                value: function drawHit(t, e) {
                    var i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
                    if (!this.shouldDrawHit(e, i)) return this;
                    var r = this.getLayer(), a = t || r.hitCanvas, n = a && a.getContext(), s = this.hitFunc() || this.sceneFunc(), o = this._getCanvasCache(), h = o && o.hit;
                    if (this.colorKey || c.warn("Looks like your canvas has a destroyed shape in it. Do not reuse shape after you destroyed it. If you want to reuse shape you should call remove() instead of destroy()"), h) {
                        n.save();
                        var l = this.getAbsoluteTransform(e).getMatrix();
                        return n.transform(l[0], l[1], l[2], l[3], l[4], l[5]), this._drawCachedHitCanvas(n), n.restore(), this;
                    }
                    if (!s) return this;
                    n.save(), n._applyLineJoin(this);
                    if (!(this === e)) {
                        var d = this.getAbsoluteTransform(e).getMatrix();
                        n.transform(d[0], d[1], d[2], d[3], d[4], d[5]);
                    }
                    return s.call(this, n, this), n.restore(), this;
                }
            },
            {
                key: "drawHitFromCache",
                value: function drawHitFromCache() {
                    var _$t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
                    var e, i, r, a, n, s = this._getCanvasCache(), o = this._getCachedSceneCanvas(), h = s.hit, l = h.getContext(), d = h.getWidth(), g = h.getHeight();
                    l.clear(), l.drawImage(o._canvas, 0, 0, d, g);
                    try {
                        for(r = (i = (e = l.getImageData(0, 0, d, g)).data).length, a = c._hexToRgb(this.colorKey), n = 0; n < r; n += 4)i[n + 3] > _$t ? (i[n] = a.r, i[n + 1] = a.g, i[n + 2] = a.b, i[n + 3] = 255) : i[n + 3] = 0;
                        l.putImageData(e, 0, 0);
                    } catch (t) {
                        c.error("Unable to draw hit graph from cached scene canvas. " + t.message);
                    }
                    return this;
                }
            },
            {
                key: "hasPointerCapture",
                value: function hasPointerCapture(t) {
                    return z(t, this);
                }
            },
            {
                key: "setPointerCapture",
                value: function setPointerCapture(t) {
                    W(t, this);
                }
            },
            {
                key: "releaseCapture",
                value: function releaseCapture(t) {
                    H(t);
                }
            }
        ]);
        return $;
    }(L);
    $.prototype._fillFunc = function(t) {
        t.fill();
    }, $.prototype._strokeFunc = function(t) {
        t.stroke();
    }, $.prototype._fillFuncHit = function(t) {
        t.fill();
    }, $.prototype._strokeFuncHit = function(t) {
        t.stroke();
    }, $.prototype._centroid = !1, $.prototype.nodeType = "Shape", r($), $.prototype.eventListeners = {}, $.prototype.on.call($.prototype, "shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva", function() {
        this._clearCache("hasShadow");
    }), $.prototype.on.call($.prototype, "shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva", function() {
        this._clearCache("shadowRGBA");
    }), $.prototype.on.call($.prototype, "fillPriorityChange.konva fillPatternImageChange.konva fillPatternRepeatChange.konva fillPatternScaleXChange.konva fillPatternScaleYChange.konva fillPatternOffsetX.konva fillPatternOffsetY.konva fillPatternXChange.konva fillPatternYChange.konva fillPatternRotation.konva", function() {
        this._clearCache("patternImage");
    }), $.prototype.on.call($.prototype, "fillPriorityChange.konva fillLinearGradientColorStopsChange.konva fillLinearGradientStartPointXChange.konva fillLinearGradientStartPointYChange.konva fillLinearGradientEndPointXChange.konva fillLinearGradientEndPointYChange.konva", function() {
        this._clearCache("linearGradient");
    }), $.prototype.on.call($.prototype, "fillPriorityChange.konva fillRadialGradientColorStopsChange.konva fillRadialGradientStartPointXChange.konva fillRadialGradientStartPointYChange.konva fillRadialGradientEndPointXChange.konva fillRadialGradientEndPointYChange.konva fillRadialGradientStartRadiusChange.konva fillRadialGradientEndRadiusChange.konva", function() {
        this._clearCache("radialGradient");
    }), x.addGetterSetter($, "stroke", void 0, _()), x.addGetterSetter($, "strokeWidth", 2, f()), x.addGetterSetter($, "fillAfterStrokeEnabled", !1), x.addGetterSetter($, "hitStrokeWidth", "auto", v()), x.addGetterSetter($, "strokeHitEnabled", !0, y()), x.addGetterSetter($, "perfectDrawEnabled", !0, y()), x.addGetterSetter($, "shadowForStrokeEnabled", !0, y()), x.addGetterSetter($, "lineJoin"), x.addGetterSetter($, "lineCap"), x.addGetterSetter($, "sceneFunc"), x.addGetterSetter($, "hitFunc"), x.addGetterSetter($, "dash"), x.addGetterSetter($, "dashOffset", 0, f()), x.addGetterSetter($, "shadowColor", void 0, m()), x.addGetterSetter($, "shadowBlur", 0, f()), x.addGetterSetter($, "shadowOpacity", 1, f()), x.addComponentsGetterSetter($, "shadowOffset", [
        "x",
        "y"
    ]), x.addGetterSetter($, "shadowOffsetX", 0, f()), x.addGetterSetter($, "shadowOffsetY", 0, f()), x.addGetterSetter($, "fillPatternImage"), x.addGetterSetter($, "fill", void 0, _()), x.addGetterSetter($, "fillPatternX", 0, f()), x.addGetterSetter($, "fillPatternY", 0, f()), x.addGetterSetter($, "fillLinearGradientColorStops"), x.addGetterSetter($, "strokeLinearGradientColorStops"), x.addGetterSetter($, "fillRadialGradientStartRadius", 0), x.addGetterSetter($, "fillRadialGradientEndRadius", 0), x.addGetterSetter($, "fillRadialGradientColorStops"), x.addGetterSetter($, "fillPatternRepeat", "repeat"), x.addGetterSetter($, "fillEnabled", !0), x.addGetterSetter($, "strokeEnabled", !0), x.addGetterSetter($, "shadowEnabled", !0), x.addGetterSetter($, "dashEnabled", !0), x.addGetterSetter($, "strokeScaleEnabled", !0), x.addGetterSetter($, "fillPriority", "color"), x.addComponentsGetterSetter($, "fillPatternOffset", [
        "x",
        "y"
    ]), x.addGetterSetter($, "fillPatternOffsetX", 0, f()), x.addGetterSetter($, "fillPatternOffsetY", 0, f()), x.addComponentsGetterSetter($, "fillPatternScale", [
        "x",
        "y"
    ]), x.addGetterSetter($, "fillPatternScaleX", 1, f()), x.addGetterSetter($, "fillPatternScaleY", 1, f()), x.addComponentsGetterSetter($, "fillLinearGradientStartPoint", [
        "x",
        "y"
    ]), x.addComponentsGetterSetter($, "strokeLinearGradientStartPoint", [
        "x",
        "y"
    ]), x.addGetterSetter($, "fillLinearGradientStartPointX", 0), x.addGetterSetter($, "strokeLinearGradientStartPointX", 0), x.addGetterSetter($, "fillLinearGradientStartPointY", 0), x.addGetterSetter($, "strokeLinearGradientStartPointY", 0), x.addComponentsGetterSetter($, "fillLinearGradientEndPoint", [
        "x",
        "y"
    ]), x.addComponentsGetterSetter($, "strokeLinearGradientEndPoint", [
        "x",
        "y"
    ]), x.addGetterSetter($, "fillLinearGradientEndPointX", 0), x.addGetterSetter($, "strokeLinearGradientEndPointX", 0), x.addGetterSetter($, "fillLinearGradientEndPointY", 0), x.addGetterSetter($, "strokeLinearGradientEndPointY", 0), x.addComponentsGetterSetter($, "fillRadialGradientStartPoint", [
        "x",
        "y"
    ]), x.addGetterSetter($, "fillRadialGradientStartPointX", 0), x.addGetterSetter($, "fillRadialGradientStartPointY", 0), x.addComponentsGetterSetter($, "fillRadialGradientEndPoint", [
        "x",
        "y"
    ]), x.addGetterSetter($, "fillRadialGradientEndPointX", 0), x.addGetterSetter($, "fillRadialGradientEndPointY", 0), x.addGetterSetter($, "fillPatternRotation", 0), x.backCompat($, {
        dashArray: "dash",
        getDashArray: "getDash",
        setDashArray: "getDash",
        drawFunc: "sceneFunc",
        getDrawFunc: "getSceneFunc",
        setDrawFunc: "setSceneFunc",
        drawHitFunc: "hitFunc",
        getDrawHitFunc: "getHitFunc",
        setDrawHitFunc: "setHitFunc"
    });
    var tt = [
        {
            x: 0,
            y: 0
        },
        {
            x: -1,
            y: -1
        },
        {
            x: 1,
            y: -1
        },
        {
            x: 1,
            y: 1
        },
        {
            x: -1,
            y: 1
        }
    ], et = tt.length;
    var it = /*#__PURE__*/ function(O1) {
        _inherits(it, O1);
        var _super = _create_super(it);
        function it(t) {
            _class_call_check(this, it);
            var _this;
            _this = _super.call(this, t), _this.canvas = new A, _this.hitCanvas = new M({
                pixelRatio: 1
            }), _this._waitingForDraw = !1, _this.on("visibleChange.konva", _this._checkVisibility), _this._checkVisibility(), _this.on("imageSmoothingEnabledChange.konva", _this._setSmoothEnabled), _this._setSmoothEnabled();
            return _possible_constructor_return(_this);
        }
        _create_class(it, [
            {
                key: "createPNGStream",
                value: function createPNGStream() {
                    return this.canvas._canvas.createPNGStream();
                }
            },
            {
                key: "getCanvas",
                value: function getCanvas() {
                    return this.canvas;
                }
            },
            {
                key: "getNativeCanvasElement",
                value: function getNativeCanvasElement() {
                    return this.canvas._canvas;
                }
            },
            {
                key: "getHitCanvas",
                value: function getHitCanvas() {
                    return this.hitCanvas;
                }
            },
            {
                key: "getContext",
                value: function getContext() {
                    return this.getCanvas().getContext();
                }
            },
            {
                key: "clear",
                value: function clear(t) {
                    return this.getContext().clear(t), this.getHitCanvas().getContext().clear(t), this;
                }
            },
            {
                key: "setZIndex",
                value: function setZIndex(t) {
                    _get(_get_prototype_of(it.prototype), "setZIndex", this).call(this, t);
                    var e = this.getStage();
                    return e && e.content && (e.content.removeChild(this.getNativeCanvasElement()), t < e.children.length - 1 ? e.content.insertBefore(this.getNativeCanvasElement(), e.children[t + 1].getCanvas()._canvas) : e.content.appendChild(this.getNativeCanvasElement())), this;
                }
            },
            {
                key: "moveToTop",
                value: function moveToTop() {
                    L.prototype.moveToTop.call(this);
                    var t = this.getStage();
                    return t && t.content && (t.content.removeChild(this.getNativeCanvasElement()), t.content.appendChild(this.getNativeCanvasElement())), !0;
                }
            },
            {
                key: "moveUp",
                value: function moveUp() {
                    if (!L.prototype.moveUp.call(this)) return !1;
                    var t = this.getStage();
                    return !(!t || !t.content) && (t.content.removeChild(this.getNativeCanvasElement()), this.index < t.children.length - 1 ? t.content.insertBefore(this.getNativeCanvasElement(), t.children[this.index + 1].getCanvas()._canvas) : t.content.appendChild(this.getNativeCanvasElement()), !0);
                }
            },
            {
                key: "moveDown",
                value: function moveDown() {
                    if (L.prototype.moveDown.call(this)) {
                        var t = this.getStage();
                        if (t) {
                            var e = t.children;
                            t.content && (t.content.removeChild(this.getNativeCanvasElement()), t.content.insertBefore(this.getNativeCanvasElement(), e[this.index + 1].getCanvas()._canvas));
                        }
                        return !0;
                    }
                    return !1;
                }
            },
            {
                key: "moveToBottom",
                value: function moveToBottom() {
                    if (L.prototype.moveToBottom.call(this)) {
                        var t = this.getStage();
                        if (t) {
                            var e = t.children;
                            t.content && (t.content.removeChild(this.getNativeCanvasElement()), t.content.insertBefore(this.getNativeCanvasElement(), e[1].getCanvas()._canvas));
                        }
                        return !0;
                    }
                    return !1;
                }
            },
            {
                key: "getLayer",
                value: function getLayer() {
                    return this;
                }
            },
            {
                key: "remove",
                value: function remove() {
                    var t = this.getNativeCanvasElement();
                    return L.prototype.remove.call(this), t && t.parentNode && c._isInDocument(t) && t.parentNode.removeChild(t), this;
                }
            },
            {
                key: "getStage",
                value: function getStage() {
                    return this.parent;
                }
            },
            {
                key: "setSize",
                value: function setSize(param) {
                    var t = param.width, e = param.height;
                    return this.canvas.setSize(t, e), this.hitCanvas.setSize(t, e), this._setSmoothEnabled(), this;
                }
            },
            {
                key: "_validateAdd",
                value: function _validateAdd(t) {
                    var e = t.getType();
                    "Group" !== e && "Shape" !== e && c.throw("You may only add groups and shapes to a layer.");
                }
            },
            {
                key: "_toKonvaCanvas",
                value: function _toKonvaCanvas(t) {
                    return (t = t || {}).width = t.width || this.getWidth(), t.height = t.height || this.getHeight(), t.x = void 0 !== t.x ? t.x : this.x(), t.y = void 0 !== t.y ? t.y : this.y(), L.prototype._toKonvaCanvas.call(this, t);
                }
            },
            {
                key: "_checkVisibility",
                value: function _checkVisibility() {
                    var t = this.visible();
                    this.canvas._canvas.style.display = t ? "block" : "none";
                }
            },
            {
                key: "_setSmoothEnabled",
                value: function _setSmoothEnabled() {
                    this.getContext()._context.imageSmoothingEnabled = this.imageSmoothingEnabled();
                }
            },
            {
                key: "getWidth",
                value: function getWidth() {
                    if (this.parent) return this.parent.width();
                }
            },
            {
                key: "setWidth",
                value: function setWidth() {
                    c.warn('Can not change width of layer. Use "stage.width(value)" function instead.');
                }
            },
            {
                key: "getHeight",
                value: function getHeight() {
                    if (this.parent) return this.parent.height();
                }
            },
            {
                key: "setHeight",
                value: function setHeight() {
                    c.warn('Can not change height of layer. Use "stage.height(value)" function instead.');
                }
            },
            {
                key: "batchDraw",
                value: function batchDraw() {
                    var _this = this;
                    return this._waitingForDraw || (this._waitingForDraw = !0, c.requestAnimFrame(function() {
                        _this.draw(), _this._waitingForDraw = !1;
                    })), this;
                }
            },
            {
                key: "getIntersection",
                value: function getIntersection(t) {
                    if (!this.isListening() || !this.isVisible()) return null;
                    for(var e = 1, i = !1;;){
                        for(var r = 0; r < et; r++){
                            var a = tt[r], n = this._getIntersection({
                                x: t.x + a.x * e,
                                y: t.y + a.y * e
                            }), s = n.shape;
                            if (s) return s;
                            if (i = !!n.antialiased, !n.antialiased) break;
                        }
                        if (!i) return null;
                        e += 1;
                    }
                }
            },
            {
                key: "_getIntersection",
                value: function _getIntersection(t) {
                    var e = this.hitCanvas.pixelRatio, i = this.hitCanvas.context.getImageData(Math.round(t.x * e), Math.round(t.y * e), 1, 1).data, r = i[3];
                    if (255 === r) {
                        var _$t = c._rgbToHex(i[0], i[1], i[2]), e1 = Z["#" + _$t];
                        return e1 ? {
                            shape: e1
                        } : {
                            antialiased: !0
                        };
                    }
                    return r > 0 ? {
                        antialiased: !0
                    } : {};
                }
            },
            {
                key: "drawScene",
                value: function drawScene(t, e) {
                    var i = this.getLayer(), r = t || i && i.getCanvas();
                    return this._fire("beforeDraw", {
                        node: this
                    }), this.clearBeforeDraw() && r.getContext().clear(), O.prototype.drawScene.call(this, r, e), this._fire("draw", {
                        node: this
                    }), this;
                }
            },
            {
                key: "drawHit",
                value: function drawHit(t, e) {
                    var i = this.getLayer(), r = t || i && i.hitCanvas;
                    return i && i.clearBeforeDraw() && i.getHitCanvas().getContext().clear(), O.prototype.drawHit.call(this, r, e), this;
                }
            },
            {
                key: "enableHitGraph",
                value: function enableHitGraph() {
                    return this.hitGraphEnabled(!0), this;
                }
            },
            {
                key: "disableHitGraph",
                value: function disableHitGraph() {
                    return this.hitGraphEnabled(!1), this;
                }
            },
            {
                key: "setHitGraphEnabled",
                value: function setHitGraphEnabled(t) {
                    c.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."), this.listening(t);
                }
            },
            {
                key: "getHitGraphEnabled",
                value: function getHitGraphEnabled(t) {
                    return c.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."), this.listening();
                }
            },
            {
                key: "toggleHitCanvas",
                value: function toggleHitCanvas() {
                    if (this.parent && this.parent.content) {
                        var t = this.parent;
                        !!this.hitCanvas._canvas.parentNode ? t.content.removeChild(this.hitCanvas._canvas) : t.content.appendChild(this.hitCanvas._canvas);
                    }
                }
            }
        ]);
        return it;
    }(O);
    it.prototype.nodeType = "Layer", r(it), x.addGetterSetter(it, "imageSmoothingEnabled", !0), x.addGetterSetter(it, "clearBeforeDraw", !0), x.addGetterSetter(it, "hitGraphEnabled", !0, y());
    var rt = /*#__PURE__*/ function(it) {
        _inherits(rt, it);
        var _super = _create_super(rt);
        function rt(t) {
            _class_call_check(this, rt);
            var _this;
            _this = _super.call(this, t), _this.listening(!1), c.warn('Konva.Fast layer is deprecated. Please use "new Konva.Layer({ listening: false })" instead.');
            return _possible_constructor_return(_this);
        }
        return rt;
    }(it);
    rt.prototype.nodeType = "FastLayer", r(rt);
    var at = /*#__PURE__*/ function(O) {
        _inherits(at, O);
        var _super = _create_super(at);
        function at() {
            _class_call_check(this, at);
            return _super.apply(this, arguments);
        }
        _create_class(at, [
            {
                key: "_validateAdd",
                value: function _validateAdd(t) {
                    var e = t.getType();
                    "Group" !== e && "Shape" !== e && c.throw("You may only add groups and shapes to groups.");
                }
            }
        ]);
        return at;
    }(O);
    at.prototype.nodeType = "Group", r(at);
    var nt = e.performance && e.performance.now ? function nt() {
        return e.performance.now();
    } : function() {
        return (new Date).getTime();
    };
    var st = /*#__PURE__*/ function() {
        function st(t, e) {
            _class_call_check(this, st);
            this.id = st.animIdCounter++, this.frame = {
                time: 0,
                timeDiff: 0,
                lastTime: nt(),
                frameRate: 0
            }, this.func = t, this.setLayers(e);
        }
        _create_class(st, [
            {
                key: "setLayers",
                value: function setLayers(t) {
                    var e = [];
                    return e = t ? t.length > 0 ? t : [
                        t
                    ] : [], this.layers = e, this;
                }
            },
            {
                key: "getLayers",
                value: function getLayers() {
                    return this.layers;
                }
            },
            {
                key: "addLayer",
                value: function addLayer(t) {
                    var e, i = this.layers, r = i.length;
                    for(e = 0; e < r; e++)if (i[e]._id === t._id) return !1;
                    return this.layers.push(t), !0;
                }
            },
            {
                key: "isRunning",
                value: function isRunning() {
                    var t, e = st.animations, i = e.length;
                    for(t = 0; t < i; t++)if (e[t].id === this.id) return !0;
                    return !1;
                }
            },
            {
                key: "start",
                value: function start() {
                    return this.stop(), this.frame.timeDiff = 0, this.frame.lastTime = nt(), st._addAnimation(this), this;
                }
            },
            {
                key: "stop",
                value: function stop() {
                    return st._removeAnimation(this), this;
                }
            },
            {
                key: "_updateFrameObject",
                value: function _updateFrameObject(t) {
                    this.frame.timeDiff = t - this.frame.lastTime, this.frame.lastTime = t, this.frame.time += this.frame.timeDiff, this.frame.frameRate = 1e3 / this.frame.timeDiff;
                }
            }
        ], [
            {
                key: "_addAnimation",
                value: function _addAnimation(t) {
                    this.animations.push(t), this._handleAnimation();
                }
            },
            {
                key: "_removeAnimation",
                value: function _removeAnimation(t) {
                    var e, i = t.id, r = this.animations, a = r.length;
                    for(e = 0; e < a; e++)if (r[e].id === i) {
                        this.animations.splice(e, 1);
                        break;
                    }
                }
            },
            {
                key: "_runFrames",
                value: function _runFrames() {
                    var t, e, i, r, a, n, s, o, h = {}, l = this.animations;
                    for(r = 0; r < l.length; r++)if (e = (t = l[r]).layers, i = t.func, t._updateFrameObject(nt()), n = e.length, !i || !1 !== i.call(t, t.frame)) for(a = 0; a < n; a++)void 0 !== (s = e[a])._id && (h[s._id] = s);
                    for(o in h)h.hasOwnProperty(o) && h[o].batchDraw();
                }
            },
            {
                key: "_animationLoop",
                value: function _animationLoop() {
                    var t = st;
                    t.animations.length ? (t._runFrames(), c.requestAnimFrame(t._animationLoop)) : t.animRunning = !1;
                }
            },
            {
                key: "_handleAnimation",
                value: function _handleAnimation() {
                    this.animRunning || (this.animRunning = !0, c.requestAnimFrame(this._animationLoop));
                }
            }
        ]);
        return st;
    }();
    st.animations = [], st.animIdCounter = 0, st.animRunning = !1;
    var ot = {
        node: 1,
        duration: 1,
        easing: 1,
        onFinish: 1,
        yoyo: 1
    }, ht = 0, lt = [
        "fill",
        "stroke",
        "shadowColor"
    ];
    var dt = /*#__PURE__*/ function() {
        function dt(t, e, i, r, a, n, s) {
            _class_call_check(this, dt);
            this.prop = t, this.propFunc = e, this.begin = r, this._pos = r, this.duration = n, this._change = 0, this.prevPos = 0, this.yoyo = s, this._time = 0, this._position = 0, this._startTime = 0, this._finish = 0, this.func = i, this._change = a - this.begin, this.pause();
        }
        _create_class(dt, [
            {
                key: "fire",
                value: function fire(t) {
                    var e = this[t];
                    e && e();
                }
            },
            {
                key: "setTime",
                value: function setTime(t) {
                    t > this.duration ? this.yoyo ? (this._time = this.duration, this.reverse()) : this.finish() : t < 0 ? this.yoyo ? (this._time = 0, this.play()) : this.reset() : (this._time = t, this.update());
                }
            },
            {
                key: "getTime",
                value: function getTime() {
                    return this._time;
                }
            },
            {
                key: "setPosition",
                value: function setPosition(t) {
                    this.prevPos = this._pos, this.propFunc(t), this._pos = t;
                }
            },
            {
                key: "getPosition",
                value: function getPosition(t) {
                    return void 0 === t && (t = this._time), this.func(t, this.begin, this._change, this.duration);
                }
            },
            {
                key: "play",
                value: function play() {
                    this.state = 2, this._startTime = this.getTimer() - this._time, this.onEnterFrame(), this.fire("onPlay");
                }
            },
            {
                key: "reverse",
                value: function reverse() {
                    this.state = 3, this._time = this.duration - this._time, this._startTime = this.getTimer() - this._time, this.onEnterFrame(), this.fire("onReverse");
                }
            },
            {
                key: "seek",
                value: function seek(t) {
                    this.pause(), this._time = t, this.update(), this.fire("onSeek");
                }
            },
            {
                key: "reset",
                value: function reset() {
                    this.pause(), this._time = 0, this.update(), this.fire("onReset");
                }
            },
            {
                key: "finish",
                value: function finish() {
                    this.pause(), this._time = this.duration, this.update(), this.fire("onFinish");
                }
            },
            {
                key: "update",
                value: function update() {
                    this.setPosition(this.getPosition(this._time)), this.fire("onUpdate");
                }
            },
            {
                key: "onEnterFrame",
                value: function onEnterFrame() {
                    var t = this.getTimer() - this._startTime;
                    2 === this.state ? this.setTime(t) : 3 === this.state && this.setTime(this.duration - t);
                }
            },
            {
                key: "pause",
                value: function pause() {
                    this.state = 1, this.fire("onPause");
                }
            },
            {
                key: "getTimer",
                value: function getTimer() {
                    return (new Date).getTime();
                }
            }
        ]);
        return dt;
    }();
    var ct = /*#__PURE__*/ function() {
        function ct(t) {
            _class_call_check(this, ct);
            var e, r, a = this, n = t.node, s = n._id, o = t.easing || gt.Linear, h = !!t.yoyo;
            e = void 0 === t.duration ? .3 : 0 === t.duration ? .001 : t.duration, this.node = n, this._id = ht++;
            var l = n.getLayer() || (_instanceof(n, i.Stage) ? n.getLayers() : null);
            for(r in l || c.error("Tween constructor have `node` that is not in a layer. Please add node into layer first."), this.anim = new st(function() {
                a.tween.onEnterFrame();
            }, l), this.tween = new dt(r, function(t) {
                a._tweenFunc(t);
            }, o, 0, 1, 1e3 * e, h), this._addListeners(), ct.attrs[s] || (ct.attrs[s] = {}), ct.attrs[s][this._id] || (ct.attrs[s][this._id] = {}), ct.tweens[s] || (ct.tweens[s] = {}), t)void 0 === ot[r] && this._addAttr(r, t[r]);
            this.reset(), this.onFinish = t.onFinish, this.onReset = t.onReset, this.onUpdate = t.onUpdate;
        }
        _create_class(ct, [
            {
                key: "_addAttr",
                value: function _addAttr(t, e) {
                    var i, r, a, n, s, o, h, l, d = this.node, g = d._id;
                    if ((a = ct.tweens[g][t]) && delete ct.attrs[g][a][t], i = d.getAttr(t), c._isArray(e)) if (r = [], s = Math.max(e.length, i.length), "points" === t && e.length !== i.length && (e.length > i.length ? (h = i, i = c._prepareArrayForTween(i, e, d.closed())) : (o = e, e = c._prepareArrayForTween(e, i, d.closed()))), 0 === t.indexOf("fill")) for(n = 0; n < s; n++)if (n % 2 == 0) r.push(e[n] - i[n]);
                    else {
                        var _$u = c.colorToRGBA(i[n]);
                        l = c.colorToRGBA(e[n]), i[n] = _$u, r.push({
                            r: l.r - _$u.r,
                            g: l.g - _$u.g,
                            b: l.b - _$u.b,
                            a: l.a - _$u.a
                        });
                    }
                    else for(n = 0; n < s; n++)r.push(e[n] - i[n]);
                    else -1 !== lt.indexOf(t) ? (i = c.colorToRGBA(i), r = {
                        r: (l = c.colorToRGBA(e)).r - i.r,
                        g: l.g - i.g,
                        b: l.b - i.b,
                        a: l.a - i.a
                    }) : r = e - i;
                    ct.attrs[g][this._id][t] = {
                        start: i,
                        diff: r,
                        end: e,
                        trueEnd: o,
                        trueStart: h
                    }, ct.tweens[g][t] = this._id;
                }
            },
            {
                key: "_tweenFunc",
                value: function _tweenFunc(t) {
                    var e, i, r, a, n, s, o, h, l = this.node, d = ct.attrs[l._id][this._id];
                    for(e in d){
                        if (r = (i = d[e]).start, a = i.diff, h = i.end, c._isArray(r)) if (n = [], o = Math.max(r.length, h.length), 0 === e.indexOf("fill")) for(s = 0; s < o; s++)s % 2 == 0 ? n.push((r[s] || 0) + a[s] * t) : n.push("rgba(" + Math.round(r[s].r + a[s].r * t) + "," + Math.round(r[s].g + a[s].g * t) + "," + Math.round(r[s].b + a[s].b * t) + "," + (r[s].a + a[s].a * t) + ")");
                        else for(s = 0; s < o; s++)n.push((r[s] || 0) + a[s] * t);
                        else n = -1 !== lt.indexOf(e) ? "rgba(" + Math.round(r.r + a.r * t) + "," + Math.round(r.g + a.g * t) + "," + Math.round(r.b + a.b * t) + "," + (r.a + a.a * t) + ")" : r + a * t;
                        l.setAttr(e, n);
                    }
                }
            },
            {
                key: "_addListeners",
                value: function _addListeners() {
                    var _this = this;
                    this.tween.onPlay = function() {
                        _this.anim.start();
                    }, this.tween.onReverse = function() {
                        _this.anim.start();
                    }, this.tween.onPause = function() {
                        _this.anim.stop();
                    }, this.tween.onFinish = function() {
                        var t = _this.node, e = ct.attrs[t._id][_this._id];
                        e.points && e.points.trueEnd && t.setAttr("points", e.points.trueEnd), _this.onFinish && _this.onFinish.call(_this);
                    }, this.tween.onReset = function() {
                        var t = _this.node, e = ct.attrs[t._id][_this._id];
                        e.points && e.points.trueStart && t.points(e.points.trueStart), _this.onReset && _this.onReset();
                    }, this.tween.onUpdate = function() {
                        _this.onUpdate && _this.onUpdate.call(_this);
                    };
                }
            },
            {
                key: "play",
                value: function play() {
                    return this.tween.play(), this;
                }
            },
            {
                key: "reverse",
                value: function reverse() {
                    return this.tween.reverse(), this;
                }
            },
            {
                key: "reset",
                value: function reset() {
                    return this.tween.reset(), this;
                }
            },
            {
                key: "seek",
                value: function seek(t) {
                    return this.tween.seek(1e3 * t), this;
                }
            },
            {
                key: "pause",
                value: function pause() {
                    return this.tween.pause(), this;
                }
            },
            {
                key: "finish",
                value: function finish() {
                    return this.tween.finish(), this;
                }
            },
            {
                key: "destroy",
                value: function destroy() {
                    var t, e = this.node._id, i = this._id, r = ct.tweens[e];
                    for(t in this.pause(), r)delete ct.tweens[e][t];
                    delete ct.attrs[e][i];
                }
            }
        ]);
        return ct;
    }();
    ct.attrs = {}, ct.tweens = {}, L.prototype.to = function(t) {
        var e = t.onFinish;
        t.node = this, t.onFinish = function() {
            this.destroy(), e && e();
        }, new ct(t).play();
    };
    var gt = {
        BackEaseIn: function BackEaseIn(t, e, i, r) {
            var a = 1.70158;
            return i * (t /= r) * t * ((a + 1) * t - a) + e;
        },
        BackEaseOut: function BackEaseOut(t, e, i, r) {
            var a = 1.70158;
            return i * ((t = t / r - 1) * t * ((a + 1) * t + a) + 1) + e;
        },
        BackEaseInOut: function BackEaseInOut(t, e, i, r) {
            var a = 1.70158;
            return (t /= r / 2) < 1 ? i / 2 * (t * t * ((1 + (a *= 1.525)) * t - a)) + e : i / 2 * ((t -= 2) * t * ((1 + (a *= 1.525)) * t + a) + 2) + e;
        },
        ElasticEaseIn: function ElasticEaseIn(t, e, i, r, a, n) {
            var s = 0;
            return 0 === t ? e : 1 == (t /= r) ? e + i : (n || (n = .3 * r), !a || a < Math.abs(i) ? (a = i, s = n / 4) : s = n / (2 * Math.PI) * Math.asin(i / a), -a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * r - s) * (2 * Math.PI) / n) + e);
        },
        ElasticEaseOut: function ElasticEaseOut(t, e, i, r, a, n) {
            var s = 0;
            return 0 === t ? e : 1 == (t /= r) ? e + i : (n || (n = .3 * r), !a || a < Math.abs(i) ? (a = i, s = n / 4) : s = n / (2 * Math.PI) * Math.asin(i / a), a * Math.pow(2, -10 * t) * Math.sin((t * r - s) * (2 * Math.PI) / n) + i + e);
        },
        ElasticEaseInOut: function ElasticEaseInOut(t, e, i, r, a, n) {
            var s = 0;
            return 0 === t ? e : 2 == (t /= r / 2) ? e + i : (n || (n = r * (.3 * 1.5)), !a || a < Math.abs(i) ? (a = i, s = n / 4) : s = n / (2 * Math.PI) * Math.asin(i / a), t < 1 ? a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * r - s) * (2 * Math.PI) / n) * -.5 + e : a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * r - s) * (2 * Math.PI) / n) * .5 + i + e);
        },
        BounceEaseOut: function(t, e, i, r) {
            return (t /= r) < 1 / 2.75 ? i * (7.5625 * t * t) + e : t < 2 / 2.75 ? i * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + e : t < 2.5 / 2.75 ? i * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + e : i * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + e;
        },
        BounceEaseIn: function(t, e, i, r) {
            return i - gt.BounceEaseOut(r - t, 0, i, r) + e;
        },
        BounceEaseInOut: function(t, e, i, r) {
            return t < r / 2 ? .5 * gt.BounceEaseIn(2 * t, 0, i, r) + e : .5 * gt.BounceEaseOut(2 * t - r, 0, i, r) + .5 * i + e;
        },
        EaseIn: function(t, e, i, r) {
            return i * (t /= r) * t + e;
        },
        EaseOut: function(t, e, i, r) {
            return -i * (t /= r) * (t - 2) + e;
        },
        EaseInOut: function(t, e, i, r) {
            return (t /= r / 2) < 1 ? i / 2 * t * t + e : -i / 2 * (--t * (t - 2) - 1) + e;
        },
        StrongEaseIn: function(t, e, i, r) {
            return i * (t /= r) * t * t * t * t + e;
        },
        StrongEaseOut: function(t, e, i, r) {
            return i * ((t = t / r - 1) * t * t * t * t + 1) + e;
        },
        StrongEaseInOut: function(t, e, i, r) {
            return (t /= r / 2) < 1 ? i / 2 * t * t * t * t * t + e : i / 2 * ((t -= 2) * t * t * t * t + 2) + e;
        },
        Linear: function(t, e, i, r) {
            return i * t / r + e;
        }
    }, ut = c._assign(i, {
        Util: c,
        Transform: a,
        Node: L,
        Container: O,
        Stage: K,
        stages: V,
        Layer: it,
        FastLayer: rt,
        Group: at,
        DD: G,
        Shape: $,
        shapes: Z,
        Animation: st,
        Tween: ct,
        Easings: gt,
        Context: w,
        Canvas: T
    });
    var ft = /*#__PURE__*/ function($) {
        _inherits(ft, $);
        var _super = _create_super(ft);
        function ft() {
            _class_call_check(this, ft);
            return _super.apply(this, arguments);
        }
        _create_class(ft, [
            {
                key: "_sceneFunc",
                value: function _sceneFunc(t) {
                    var e = i.getAngle(this.angle()), r = this.clockwise();
                    t.beginPath(), t.arc(0, 0, this.outerRadius(), 0, e, r), t.arc(0, 0, this.innerRadius(), e, 0, !r), t.closePath(), t.fillStrokeShape(this);
                }
            },
            {
                key: "getWidth",
                value: function getWidth() {
                    return 2 * this.outerRadius();
                }
            },
            {
                key: "getHeight",
                value: function getHeight() {
                    return 2 * this.outerRadius();
                }
            },
            {
                key: "setWidth",
                value: function setWidth(t) {
                    this.outerRadius(t / 2);
                }
            },
            {
                key: "setHeight",
                value: function setHeight(t) {
                    this.outerRadius(t / 2);
                }
            }
        ]);
        return ft;
    }($);
    function pt(t, e, i, r, a, n, s) {
        var o = Math.sqrt(Math.pow(i - t, 2) + Math.pow(r - e, 2)), h = Math.sqrt(Math.pow(a - i, 2) + Math.pow(n - r, 2)), l = s * o / (o + h), d = s * h / (o + h);
        return [
            i - l * (a - t),
            r - l * (n - e),
            i + d * (a - t),
            r + d * (n - e)
        ];
    }
    function vt(t, e) {
        var i, r, a = t.length, n = [];
        for(i = 2; i < a - 2; i += 2)r = pt(t[i - 2], t[i - 1], t[i], t[i + 1], t[i + 2], t[i + 3], e), isNaN(r[0]) || (n.push(r[0]), n.push(r[1]), n.push(t[i]), n.push(t[i + 1]), n.push(r[2]), n.push(r[3]));
        return n;
    }
    ft.prototype._centroid = !0, ft.prototype.className = "Arc", ft.prototype._attrsAffectingSize = [
        "innerRadius",
        "outerRadius"
    ], r(ft), x.addGetterSetter(ft, "innerRadius", 0, f()), x.addGetterSetter(ft, "outerRadius", 0, f()), x.addGetterSetter(ft, "angle", 0, f()), x.addGetterSetter(ft, "clockwise", !1, y());
    var mt = /*#__PURE__*/ function($) {
        _inherits(mt, $);
        var _super = _create_super(mt);
        function mt(t) {
            _class_call_check(this, mt);
            var _this;
            _this = _super.call(this, t), _this.on("pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva", function() {
                this._clearCache("tensionPoints");
            });
            return _possible_constructor_return(_this);
        }
        _create_class(mt, [
            {
                key: "_sceneFunc",
                value: function _sceneFunc(t) {
                    var e, i, r, a = this.points(), n = a.length, s = this.tension(), o = this.closed(), h = this.bezier();
                    if (n) {
                        if (t.beginPath(), t.moveTo(a[0], a[1]), 0 !== s && n > 4) {
                            for(i = (e = this.getTensionPoints()).length, r = o ? 0 : 4, o || t.quadraticCurveTo(e[0], e[1], e[2], e[3]); r < i - 2;)t.bezierCurveTo(e[r++], e[r++], e[r++], e[r++], e[r++], e[r++]);
                            o || t.quadraticCurveTo(e[i - 2], e[i - 1], a[n - 2], a[n - 1]);
                        } else if (h) for(r = 2; r < n;)t.bezierCurveTo(a[r++], a[r++], a[r++], a[r++], a[r++], a[r++]);
                        else for(r = 2; r < n; r += 2)t.lineTo(a[r], a[r + 1]);
                        o ? (t.closePath(), t.fillStrokeShape(this)) : t.strokeShape(this);
                    }
                }
            },
            {
                key: "getTensionPoints",
                value: function getTensionPoints() {
                    return this._getCache("tensionPoints", this._getTensionPoints);
                }
            },
            {
                key: "_getTensionPoints",
                value: function _getTensionPoints() {
                    return this.closed() ? this._getTensionPointsClosed() : vt(this.points(), this.tension());
                }
            },
            {
                key: "_getTensionPointsClosed",
                value: function _getTensionPointsClosed() {
                    var t = this.points(), e = t.length, i = this.tension(), r = pt(t[e - 2], t[e - 1], t[0], t[1], t[2], t[3], i), a = pt(t[e - 4], t[e - 3], t[e - 2], t[e - 1], t[0], t[1], i), n = vt(t, i);
                    return [
                        r[2],
                        r[3]
                    ].concat(n).concat([
                        a[0],
                        a[1],
                        t[e - 2],
                        t[e - 1],
                        a[2],
                        a[3],
                        r[0],
                        r[1],
                        t[0],
                        t[1]
                    ]);
                }
            },
            {
                key: "getWidth",
                value: function getWidth() {
                    return this.getSelfRect().width;
                }
            },
            {
                key: "getHeight",
                value: function getHeight() {
                    return this.getSelfRect().height;
                }
            },
            {
                key: "getSelfRect",
                value: function getSelfRect() {
                    var t = this.points();
                    if (t.length < 4) return {
                        x: t[0] || 0,
                        y: t[1] || 0,
                        width: 0,
                        height: 0
                    };
                    for(var e, i, r = (t = 0 !== this.tension() ? [
                        t[0],
                        t[1]
                    ].concat(_to_consumable_array(this._getTensionPoints()), [
                        t[t.length - 2],
                        t[t.length - 1]
                    ]) : this.points())[0], a = t[0], n = t[1], s = t[1], o = 0; o < t.length / 2; o++)e = t[2 * o], i = t[2 * o + 1], r = Math.min(r, e), a = Math.max(a, e), n = Math.min(n, i), s = Math.max(s, i);
                    return {
                        x: r,
                        y: n,
                        width: a - r,
                        height: s - n
                    };
                }
            }
        ]);
        return mt;
    }($);
    mt.prototype.className = "Line", mt.prototype._attrsAffectingSize = [
        "points",
        "bezier",
        "tension"
    ], r(mt), x.addGetterSetter(mt, "closed", !1), x.addGetterSetter(mt, "bezier", !1), x.addGetterSetter(mt, "tension", 0, f()), x.addGetterSetter(mt, "points", [], function() {
        if (i.isUnminified) return function(t, e) {
            return c._isArray(t) ? t.forEach(function(t) {
                c._isNumber(t) || c.warn('"' + e + '" attribute has non numeric element ' + t + ". Make sure that all elements are numbers.");
            }) : c.warn(g(t) + ' is a not valid value for "' + e + '" attribute. The value should be a array of numbers.'), t;
        };
    }());
    var _t = /*#__PURE__*/ function($) {
        _inherits(_t, $);
        var _super = _create_super(_t);
        function _t(t) {
            _class_call_check(this, _t);
            var _this;
            _this = _super.call(this, t), _this.dataArray = [], _this.pathLength = 0, _this.dataArray = _t.parsePathData(_this.data()), _this.pathLength = 0;
            for(var e = 0; e < _this.dataArray.length; ++e)_this.pathLength += _this.dataArray[e].pathLength;
            _this.on("dataChange.konva", function() {
                this.dataArray = _t.parsePathData(this.data()), this.pathLength = 0;
                for(var _$t = 0; _$t < this.dataArray.length; ++_$t)this.pathLength += this.dataArray[_$t].pathLength;
            });
            return _possible_constructor_return(_this);
        }
        _create_class(_t, [
            {
                key: "_sceneFunc",
                value: function _sceneFunc(t) {
                    var e = this.dataArray;
                    t.beginPath();
                    for(var i = !1, r = 0; r < e.length; r++){
                        var a = e[r].command, n = e[r].points;
                        switch(a){
                            case "L":
                                t.lineTo(n[0], n[1]);
                                break;
                            case "M":
                                t.moveTo(n[0], n[1]);
                                break;
                            case "C":
                                t.bezierCurveTo(n[0], n[1], n[2], n[3], n[4], n[5]);
                                break;
                            case "Q":
                                t.quadraticCurveTo(n[0], n[1], n[2], n[3]);
                                break;
                            case "A":
                                var s = n[0], o = n[1], h = n[2], l = n[3], d = n[4], c = n[5], g = n[6], _$u = n[7], _$f = h > l ? h : l, _$p = h > l ? 1 : h / l, _$v = h > l ? l / h : 1;
                                t.translate(s, o), t.rotate(g), t.scale(_$p, _$v), t.arc(0, 0, _$f, d, d + c, 1 - _$u), t.scale(1 / _$p, 1 / _$v), t.rotate(-g), t.translate(-s, -o);
                                break;
                            case "z":
                                i = !0, t.closePath();
                        }
                    }
                    i || this.hasFill() ? t.fillStrokeShape(this) : t.strokeShape(this);
                }
            },
            {
                key: "getSelfRect",
                value: function getSelfRect() {
                    var t = [];
                    this.dataArray.forEach(function(e) {
                        if ("A" === e.command) {
                            var i = e.points[4], r = e.points[5], a = e.points[4] + r, n = Math.PI / 180;
                            if (Math.abs(i - a) < n && (n = Math.abs(i - a)), r < 0) for(var r1 = i - n; r1 > a; r1 -= n){
                                var i1 = _t.getPointOnEllipticalArc(e.points[0], e.points[1], e.points[2], e.points[3], r1, 0);
                                t.push(i1.x, i1.y);
                            }
                            else for(var r2 = i + n; r2 < a; r2 += n){
                                var i2 = _t.getPointOnEllipticalArc(e.points[0], e.points[1], e.points[2], e.points[3], r2, 0);
                                t.push(i2.x, i2.y);
                            }
                        } else if ("C" === e.command) for(var i3 = 0; i3 <= 1; i3 += .01){
                            var r3 = _t.getPointOnCubicBezier(i3, e.start.x, e.start.y, e.points[0], e.points[1], e.points[2], e.points[3], e.points[4], e.points[5]);
                            t.push(r3.x, r3.y);
                        }
                        else t = t.concat(e.points);
                    });
                    for(var e, i, r = t[0], a = t[0], n = t[1], s = t[1], o = 0; o < t.length / 2; o++)e = t[2 * o], i = t[2 * o + 1], isNaN(e) || (r = Math.min(r, e), a = Math.max(a, e)), isNaN(i) || (n = Math.min(n, i), s = Math.max(s, i));
                    return {
                        x: Math.round(r),
                        y: Math.round(n),
                        width: Math.round(a - r),
                        height: Math.round(s - n)
                    };
                }
            },
            {
                key: "getLength",
                value: function getLength() {
                    return this.pathLength;
                }
            },
            {
                key: "getPointAtLength",
                value: function getPointAtLength(t) {
                    var e, i = 0, r = this.dataArray.length;
                    if (!r) return null;
                    for(; i < r && t > this.dataArray[i].pathLength;)t -= this.dataArray[i].pathLength, ++i;
                    if (i === r) return {
                        x: (e = this.dataArray[i - 1].points.slice(-2))[0],
                        y: e[1]
                    };
                    if (t < .01) return {
                        x: (e = this.dataArray[i].points.slice(0, 2))[0],
                        y: e[1]
                    };
                    var a = this.dataArray[i], n = a.points;
                    switch(a.command){
                        case "L":
                            return _t.getPointOnLine(t, a.start.x, a.start.y, n[0], n[1]);
                        case "C":
                            return _t.getPointOnCubicBezier(t / a.pathLength, a.start.x, a.start.y, n[0], n[1], n[2], n[3], n[4], n[5]);
                        case "Q":
                            return _t.getPointOnQuadraticBezier(t / a.pathLength, a.start.x, a.start.y, n[0], n[1], n[2], n[3]);
                        case "A":
                            var s = n[0], o = n[1], h = n[2], l = n[3], d = n[4], c = n[5], g = n[6];
                            return d += c * t / a.pathLength, _t.getPointOnEllipticalArc(s, o, h, l, d, g);
                    }
                    return null;
                }
            }
        ], [
            {
                key: "getLineLength",
                value: function getLineLength(t, e, i, r) {
                    return Math.sqrt((i - t) * (i - t) + (r - e) * (r - e));
                }
            },
            {
                key: "getPointOnLine",
                value: function getPointOnLine(t, e, i, r, a, n, s) {
                    void 0 === n && (n = e), void 0 === s && (s = i);
                    var o = (a - i) / (r - e + 1e-8), h = Math.sqrt(t * t / (1 + o * o));
                    r < e && (h *= -1);
                    var l, d = o * h;
                    if (r === e) l = {
                        x: n,
                        y: s + d
                    };
                    else if ((s - i) / (n - e + 1e-8) === o) l = {
                        x: n + h,
                        y: s + d
                    };
                    else {
                        var c, g, _$u = this.getLineLength(e, i, r, a), _$f = (n - e) * (r - e) + (s - i) * (a - i);
                        c = e + (_$f /= _$u * _$u) * (r - e), g = i + _$f * (a - i);
                        var _$p = this.getLineLength(n, s, c, g), _$v = Math.sqrt(t * t - _$p * _$p);
                        h = Math.sqrt(_$v * _$v / (1 + o * o)), r < e && (h *= -1), l = {
                            x: c + h,
                            y: g + (d = o * h)
                        };
                    }
                    return l;
                }
            },
            {
                key: "getPointOnCubicBezier",
                value: function getPointOnCubicBezier(t, e, i, r, a, n, s, o, h) {
                    function l(t) {
                        return t * t * t;
                    }
                    function d(t) {
                        return 3 * t * t * (1 - t);
                    }
                    function c(t) {
                        return 3 * t * (1 - t) * (1 - t);
                    }
                    function g(t) {
                        return (1 - t) * (1 - t) * (1 - t);
                    }
                    return {
                        x: o * l(t) + n * d(t) + r * c(t) + e * g(t),
                        y: h * l(t) + s * d(t) + a * c(t) + i * g(t)
                    };
                }
            },
            {
                key: "getPointOnQuadraticBezier",
                value: function getPointOnQuadraticBezier(t, e, i, r, a, n, s) {
                    function o(t) {
                        return t * t;
                    }
                    function h(t) {
                        return 2 * t * (1 - t);
                    }
                    function l(t) {
                        return (1 - t) * (1 - t);
                    }
                    return {
                        x: n * o(t) + r * h(t) + e * l(t),
                        y: s * o(t) + a * h(t) + i * l(t)
                    };
                }
            },
            {
                key: "getPointOnEllipticalArc",
                value: function getPointOnEllipticalArc(t, e, i, r, a, n) {
                    var s = Math.cos(n), o = Math.sin(n), h = i * Math.cos(a), l = r * Math.sin(a);
                    return {
                        x: t + (h * s - l * o),
                        y: e + (h * o + l * s)
                    };
                }
            },
            {
                key: "parsePathData",
                value: function parsePathData(t) {
                    if (!t) return [];
                    var e = t, i = [
                        "m",
                        "M",
                        "l",
                        "L",
                        "v",
                        "V",
                        "h",
                        "H",
                        "z",
                        "Z",
                        "c",
                        "C",
                        "q",
                        "Q",
                        "t",
                        "T",
                        "s",
                        "S",
                        "a",
                        "A"
                    ];
                    e = e.replace(new RegExp(" ", "g"), ",");
                    for(var r = 0; r < i.length; r++)e = e.replace(new RegExp(i[r], "g"), "|" + i[r]);
                    var a, n = e.split("|"), s = [], o = [], h = 0, l = 0, d = /([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/gi;
                    for(r = 1; r < n.length; r++){
                        var c = n[r], g = c.charAt(0);
                        for(c = c.slice(1), o.length = 0; a = d.exec(c);)o.push(a[0]);
                        for(var _$u = [], _$f = 0, _$p = o.length; _$f < _$p; _$f++)if ("00" !== o[_$f]) {
                            var _$v = parseFloat(o[_$f]);
                            isNaN(_$v) ? _$u.push(0) : _$u.push(_$v);
                        } else _$u.push(0, 0);
                        for(; _$u.length > 0 && !isNaN(_$u[0]);){
                            var _$m, _$_, _$y, x, b, S, w, C, k, P, T = null, A = [], M = h, G = l;
                            switch(g){
                                case "l":
                                    h += _$u.shift(), l += _$u.shift(), T = "L", A.push(h, l);
                                    break;
                                case "L":
                                    h = _$u.shift(), l = _$u.shift(), A.push(h, l);
                                    break;
                                case "m":
                                    var R = _$u.shift(), E = _$u.shift();
                                    if (h += R, l += E, T = "M", s.length > 2 && "z" === s[s.length - 1].command) {
                                        for(var L = s.length - 2; L >= 0; L--)if ("M" === s[L].command) {
                                            h = s[L].points[0] + R, l = s[L].points[1] + E;
                                            break;
                                        }
                                    }
                                    A.push(h, l), g = "l";
                                    break;
                                case "M":
                                    h = _$u.shift(), l = _$u.shift(), T = "M", A.push(h, l), g = "L";
                                    break;
                                case "h":
                                    h += _$u.shift(), T = "L", A.push(h, l);
                                    break;
                                case "H":
                                    h = _$u.shift(), T = "L", A.push(h, l);
                                    break;
                                case "v":
                                    l += _$u.shift(), T = "L", A.push(h, l);
                                    break;
                                case "V":
                                    l = _$u.shift(), T = "L", A.push(h, l);
                                    break;
                                case "C":
                                    A.push(_$u.shift(), _$u.shift(), _$u.shift(), _$u.shift()), h = _$u.shift(), l = _$u.shift(), A.push(h, l);
                                    break;
                                case "c":
                                    A.push(h + _$u.shift(), l + _$u.shift(), h + _$u.shift(), l + _$u.shift()), h += _$u.shift(), l += _$u.shift(), T = "C", A.push(h, l);
                                    break;
                                case "S":
                                    _$_ = h, _$y = l, "C" === (_$m = s[s.length - 1]).command && (_$_ = h + (h - _$m.points[2]), _$y = l + (l - _$m.points[3])), A.push(_$_, _$y, _$u.shift(), _$u.shift()), h = _$u.shift(), l = _$u.shift(), T = "C", A.push(h, l);
                                    break;
                                case "s":
                                    _$_ = h, _$y = l, "C" === (_$m = s[s.length - 1]).command && (_$_ = h + (h - _$m.points[2]), _$y = l + (l - _$m.points[3])), A.push(_$_, _$y, h + _$u.shift(), l + _$u.shift()), h += _$u.shift(), l += _$u.shift(), T = "C", A.push(h, l);
                                    break;
                                case "Q":
                                    A.push(_$u.shift(), _$u.shift()), h = _$u.shift(), l = _$u.shift(), A.push(h, l);
                                    break;
                                case "q":
                                    A.push(h + _$u.shift(), l + _$u.shift()), h += _$u.shift(), l += _$u.shift(), T = "Q", A.push(h, l);
                                    break;
                                case "T":
                                    _$_ = h, _$y = l, "Q" === (_$m = s[s.length - 1]).command && (_$_ = h + (h - _$m.points[0]), _$y = l + (l - _$m.points[1])), h = _$u.shift(), l = _$u.shift(), T = "Q", A.push(_$_, _$y, h, l);
                                    break;
                                case "t":
                                    _$_ = h, _$y = l, "Q" === (_$m = s[s.length - 1]).command && (_$_ = h + (h - _$m.points[0]), _$y = l + (l - _$m.points[1])), h += _$u.shift(), l += _$u.shift(), T = "Q", A.push(_$_, _$y, h, l);
                                    break;
                                case "A":
                                    x = _$u.shift(), b = _$u.shift(), S = _$u.shift(), w = _$u.shift(), C = _$u.shift(), k = h, P = l, h = _$u.shift(), l = _$u.shift(), T = "A", A = this.convertEndpointToCenterParameterization(k, P, h, l, w, C, x, b, S);
                                    break;
                                case "a":
                                    x = _$u.shift(), b = _$u.shift(), S = _$u.shift(), w = _$u.shift(), C = _$u.shift(), k = h, P = l, h += _$u.shift(), l += _$u.shift(), T = "A", A = this.convertEndpointToCenterParameterization(k, P, h, l, w, C, x, b, S);
                            }
                            s.push({
                                command: T || g,
                                points: A,
                                start: {
                                    x: M,
                                    y: G
                                },
                                pathLength: this.calcLength(M, G, T || g, A)
                            });
                        }
                        "z" !== g && "Z" !== g || s.push({
                            command: "z",
                            points: [],
                            start: void 0,
                            pathLength: 0
                        });
                    }
                    return s;
                }
            },
            {
                key: "calcLength",
                value: function calcLength(t, e, i, r) {
                    var a, n, s, o, h = _t;
                    switch(i){
                        case "L":
                            return h.getLineLength(t, e, r[0], r[1]);
                        case "C":
                            for(a = 0, n = h.getPointOnCubicBezier(0, t, e, r[0], r[1], r[2], r[3], r[4], r[5]), o = .01; o <= 1; o += .01)s = h.getPointOnCubicBezier(o, t, e, r[0], r[1], r[2], r[3], r[4], r[5]), a += h.getLineLength(n.x, n.y, s.x, s.y), n = s;
                            return a;
                        case "Q":
                            for(a = 0, n = h.getPointOnQuadraticBezier(0, t, e, r[0], r[1], r[2], r[3]), o = .01; o <= 1; o += .01)s = h.getPointOnQuadraticBezier(o, t, e, r[0], r[1], r[2], r[3]), a += h.getLineLength(n.x, n.y, s.x, s.y), n = s;
                            return a;
                        case "A":
                            a = 0;
                            var l = r[4], d = r[5], c = r[4] + d, g = Math.PI / 180;
                            if (Math.abs(l - c) < g && (g = Math.abs(l - c)), n = h.getPointOnEllipticalArc(r[0], r[1], r[2], r[3], l, 0), d < 0) for(o = l - g; o > c; o -= g)s = h.getPointOnEllipticalArc(r[0], r[1], r[2], r[3], o, 0), a += h.getLineLength(n.x, n.y, s.x, s.y), n = s;
                            else for(o = l + g; o < c; o += g)s = h.getPointOnEllipticalArc(r[0], r[1], r[2], r[3], o, 0), a += h.getLineLength(n.x, n.y, s.x, s.y), n = s;
                            return s = h.getPointOnEllipticalArc(r[0], r[1], r[2], r[3], c, 0), a += h.getLineLength(n.x, n.y, s.x, s.y);
                    }
                    return 0;
                }
            },
            {
                key: "convertEndpointToCenterParameterization",
                value: function convertEndpointToCenterParameterization(t, e, i, r, a, n, s, o, h) {
                    var l = h * (Math.PI / 180), d = Math.cos(l) * (t - i) / 2 + Math.sin(l) * (e - r) / 2, c = -1 * Math.sin(l) * (t - i) / 2 + Math.cos(l) * (e - r) / 2, g = d * d / (s * s) + c * c / (o * o);
                    g > 1 && (s *= Math.sqrt(g), o *= Math.sqrt(g));
                    var _$u = Math.sqrt((s * s * (o * o) - s * s * (c * c) - o * o * (d * d)) / (s * s * (c * c) + o * o * (d * d)));
                    a === n && (_$u *= -1), isNaN(_$u) && (_$u = 0);
                    var _$f = _$u * s * c / o, _$p = _$u * -o * d / s, _$v = (t + i) / 2 + Math.cos(l) * _$f - Math.sin(l) * _$p, _$m = (e + r) / 2 + Math.sin(l) * _$f + Math.cos(l) * _$p, _$_ = function _(t) {
                        return Math.sqrt(t[0] * t[0] + t[1] * t[1]);
                    }, _$y = function y(t, e) {
                        return (t[0] * e[0] + t[1] * e[1]) / (_$_(t) * _$_(e));
                    }, x = function x(t, e) {
                        return (t[0] * e[1] < t[1] * e[0] ? -1 : 1) * Math.acos(_$y(t, e));
                    }, b = x([
                        1,
                        0
                    ], [
                        (d - _$f) / s,
                        (c - _$p) / o
                    ]), S = [
                        (d - _$f) / s,
                        (c - _$p) / o
                    ], w = [
                        (-1 * d - _$f) / s,
                        (-1 * c - _$p) / o
                    ], C = x(S, w);
                    return _$y(S, w) <= -1 && (C = Math.PI), _$y(S, w) >= 1 && (C = 0), 0 === n && C > 0 && (C -= 2 * Math.PI), 1 === n && C < 0 && (C += 2 * Math.PI), [
                        _$v,
                        _$m,
                        s,
                        o,
                        b,
                        C,
                        l,
                        n
                    ];
                }
            }
        ]);
        return _t;
    }($);
    _t.prototype.className = "Path", _t.prototype._attrsAffectingSize = [
        "data"
    ], r(_t), x.addGetterSetter(_t, "data");
    var yt = /*#__PURE__*/ function(mt) {
        _inherits(yt, mt);
        var _super = _create_super(yt);
        function yt() {
            _class_call_check(this, yt);
            return _super.apply(this, arguments);
        }
        _create_class(yt, [
            {
                key: "_sceneFunc",
                value: function _sceneFunc(t) {
                    _get(_get_prototype_of(yt.prototype), "_sceneFunc", this).call(this, t);
                    var e = 2 * Math.PI, i = this.points(), r = i, a = 0 !== this.tension() && i.length > 4;
                    a && (r = this.getTensionPoints());
                    var n, s, o = this.pointerLength(), h = i.length;
                    if (a) {
                        var _$t = [
                            r[r.length - 4],
                            r[r.length - 3],
                            r[r.length - 2],
                            r[r.length - 1],
                            i[h - 2],
                            i[h - 1]
                        ], e1 = _t.calcLength(r[r.length - 4], r[r.length - 3], "C", _$t), a1 = _t.getPointOnQuadraticBezier(Math.min(1, 1 - o / e1), _$t[0], _$t[1], _$t[2], _$t[3], _$t[4], _$t[5]);
                        n = i[h - 2] - a1.x, s = i[h - 1] - a1.y;
                    } else n = i[h - 2] - i[h - 4], s = i[h - 1] - i[h - 3];
                    var l = (Math.atan2(s, n) + e) % e, d = this.pointerWidth();
                    this.pointerAtEnding() && (t.save(), t.beginPath(), t.translate(i[h - 2], i[h - 1]), t.rotate(l), t.moveTo(0, 0), t.lineTo(-o, d / 2), t.lineTo(-o, -d / 2), t.closePath(), t.restore()), this.pointerAtBeginning() && (t.save(), t.translate(i[0], i[1]), a ? (n = (r[0] + r[2]) / 2 - i[0], s = (r[1] + r[3]) / 2 - i[1]) : (n = i[2] - i[0], s = i[3] - i[1]), t.rotate((Math.atan2(-s, -n) + e) % e), t.moveTo(0, 0), t.lineTo(-o, d / 2), t.lineTo(-o, -d / 2), t.closePath(), t.restore());
                    var c = this.dashEnabled();
                    c && (this.attrs.dashEnabled = !1, t.setLineDash([])), t.fillStrokeShape(this), c && (this.attrs.dashEnabled = !0);
                }
            },
            {
                key: "getSelfRect",
                value: function getSelfRect() {
                    var t = _get(_get_prototype_of(yt.prototype), "getSelfRect", this).call(this), e = this.pointerWidth() / 2;
                    return {
                        x: t.x - e,
                        y: t.y - e,
                        width: t.width + 2 * e,
                        height: t.height + 2 * e
                    };
                }
            }
        ]);
        return yt;
    }(mt);
    yt.prototype.className = "Arrow", r(yt), x.addGetterSetter(yt, "pointerLength", 10, f()), x.addGetterSetter(yt, "pointerWidth", 10, f()), x.addGetterSetter(yt, "pointerAtBeginning", !1), x.addGetterSetter(yt, "pointerAtEnding", !0);
    var xt = /*#__PURE__*/ function($) {
        _inherits(xt, $);
        var _super = _create_super(xt);
        function xt() {
            _class_call_check(this, xt);
            return _super.apply(this, arguments);
        }
        _create_class(xt, [
            {
                key: "_sceneFunc",
                value: function _sceneFunc(t) {
                    t.beginPath(), t.arc(0, 0, this.attrs.radius || 0, 0, 2 * Math.PI, !1), t.closePath(), t.fillStrokeShape(this);
                }
            },
            {
                key: "getWidth",
                value: function getWidth() {
                    return 2 * this.radius();
                }
            },
            {
                key: "getHeight",
                value: function getHeight() {
                    return 2 * this.radius();
                }
            },
            {
                key: "setWidth",
                value: function setWidth(t) {
                    this.radius() !== t / 2 && this.radius(t / 2);
                }
            },
            {
                key: "setHeight",
                value: function setHeight(t) {
                    this.radius() !== t / 2 && this.radius(t / 2);
                }
            }
        ]);
        return xt;
    }($);
    xt.prototype._centroid = !0, xt.prototype.className = "Circle", xt.prototype._attrsAffectingSize = [
        "radius"
    ], r(xt), x.addGetterSetter(xt, "radius", 0, f());
    var bt = /*#__PURE__*/ function($) {
        _inherits(bt, $);
        var _super = _create_super(bt);
        function bt() {
            _class_call_check(this, bt);
            return _super.apply(this, arguments);
        }
        _create_class(bt, [
            {
                key: "_sceneFunc",
                value: function _sceneFunc(t) {
                    var e = this.radiusX(), i = this.radiusY();
                    t.beginPath(), t.save(), e !== i && t.scale(1, i / e), t.arc(0, 0, e, 0, 2 * Math.PI, !1), t.restore(), t.closePath(), t.fillStrokeShape(this);
                }
            },
            {
                key: "getWidth",
                value: function getWidth() {
                    return 2 * this.radiusX();
                }
            },
            {
                key: "getHeight",
                value: function getHeight() {
                    return 2 * this.radiusY();
                }
            },
            {
                key: "setWidth",
                value: function setWidth(t) {
                    this.radiusX(t / 2);
                }
            },
            {
                key: "setHeight",
                value: function setHeight(t) {
                    this.radiusY(t / 2);
                }
            }
        ]);
        return bt;
    }($);
    bt.prototype.className = "Ellipse", bt.prototype._centroid = !0, bt.prototype._attrsAffectingSize = [
        "radiusX",
        "radiusY"
    ], r(bt), x.addComponentsGetterSetter(bt, "radius", [
        "x",
        "y"
    ]), x.addGetterSetter(bt, "radiusX", 0, f()), x.addGetterSetter(bt, "radiusY", 0, f());
    var St = /*#__PURE__*/ function($) {
        _inherits(St, $);
        var _super = _create_super(St);
        function St(t) {
            _class_call_check(this, St);
            var _this;
            _this = _super.call(this, t), _this.on("imageChange.konva", function() {
                _this._setImageLoad();
            }), _this._setImageLoad();
            return _possible_constructor_return(_this);
        }
        _create_class(St, [
            {
                key: "_setImageLoad",
                value: function _setImageLoad() {
                    var _this = this;
                    var t = this.image();
                    t && t.addEventListener && t.addEventListener("load", function() {
                        _this._requestDraw();
                    });
                }
            },
            {
                key: "_useBufferCanvas",
                value: function _useBufferCanvas() {
                    return _get(_get_prototype_of(St.prototype), "_useBufferCanvas", this).call(this, !0);
                }
            },
            {
                key: "_sceneFunc",
                value: function _sceneFunc(t) {
                    var e = this.getWidth(), i = this.getHeight(), r = this.attrs.image;
                    var a;
                    if (r) {
                        var _$t = this.attrs.cropWidth, n = this.attrs.cropHeight;
                        a = _$t && n ? [
                            r,
                            this.cropX(),
                            this.cropY(),
                            _$t,
                            n,
                            0,
                            0,
                            e,
                            i
                        ] : [
                            r,
                            0,
                            0,
                            e,
                            i
                        ];
                    }
                    (this.hasFill() || this.hasStroke()) && (t.beginPath(), t.rect(0, 0, e, i), t.closePath(), t.fillStrokeShape(this)), r && t.drawImage.apply(t, a);
                }
            },
            {
                key: "_hitFunc",
                value: function _hitFunc(t) {
                    var e = this.width(), i = this.height();
                    t.beginPath(), t.rect(0, 0, e, i), t.closePath(), t.fillStrokeShape(this);
                }
            },
            {
                key: "getWidth",
                value: function getWidth() {
                    var t, e;
                    return null !== (t = this.attrs.width) && void 0 !== t ? t : null === (e = this.image()) || void 0 === e ? void 0 : e.width;
                }
            },
            {
                key: "getHeight",
                value: function getHeight() {
                    var t, e;
                    return null !== (t = this.attrs.height) && void 0 !== t ? t : null === (e = this.image()) || void 0 === e ? void 0 : e.height;
                }
            }
        ], [
            {
                key: "fromURL",
                value: function fromURL(t, e) {
                    var i = c.createImageElement();
                    i.onload = function() {
                        var _$t = new St({
                            image: i
                        });
                        e(_$t);
                    }, i.crossOrigin = "Anonymous", i.src = t;
                }
            }
        ]);
        return St;
    }($);
    St.prototype.className = "Image", r(St), x.addGetterSetter(St, "image"), x.addComponentsGetterSetter(St, "crop", [
        "x",
        "y",
        "width",
        "height"
    ]), x.addGetterSetter(St, "cropX", 0, f()), x.addGetterSetter(St, "cropY", 0, f()), x.addGetterSetter(St, "cropWidth", 0, f()), x.addGetterSetter(St, "cropHeight", 0, f());
    var wt = [
        "fontFamily",
        "fontSize",
        "fontStyle",
        "padding",
        "lineHeight",
        "text",
        "width",
        "height"
    ], Ct = wt.length;
    var kt = /*#__PURE__*/ function(at) {
        _inherits(kt, at);
        var _super = _create_super(kt);
        function kt(t) {
            _class_call_check(this, kt);
            var _this;
            _this = _super.call(this, t), _this.on("add.konva", function(t) {
                this._addListeners(t.child), this._sync();
            });
            return _possible_constructor_return(_this);
        }
        _create_class(kt, [
            {
                key: "getText",
                value: function getText() {
                    return this.find("Text")[0];
                }
            },
            {
                key: "getTag",
                value: function getTag() {
                    return this.find("Tag")[0];
                }
            },
            {
                key: "_addListeners",
                value: function _addListeners(t) {
                    var e, i = this, r = function r() {
                        i._sync();
                    };
                    for(e = 0; e < Ct; e++)t.on(wt[e] + "Change.konva", r);
                }
            },
            {
                key: "getWidth",
                value: function getWidth() {
                    return this.getText().width();
                }
            },
            {
                key: "getHeight",
                value: function getHeight() {
                    return this.getText().height();
                }
            },
            {
                key: "_sync",
                value: function _sync() {
                    var t, e, i, r, a, n, s, o = this.getText(), h = this.getTag();
                    if (o && h) {
                        switch(t = o.width(), e = o.height(), i = h.pointerDirection(), r = h.pointerWidth(), s = h.pointerHeight(), a = 0, n = 0, i){
                            case "up":
                                a = t / 2, n = -1 * s;
                                break;
                            case "right":
                                a = t + r, n = e / 2;
                                break;
                            case "down":
                                a = t / 2, n = e + s;
                                break;
                            case "left":
                                a = -1 * r, n = e / 2;
                        }
                        h.setAttrs({
                            x: -1 * a,
                            y: -1 * n,
                            width: t,
                            height: e
                        }), o.setAttrs({
                            x: -1 * a,
                            y: -1 * n
                        });
                    }
                }
            }
        ]);
        return kt;
    }(at);
    kt.prototype.className = "Label", r(kt);
    var Pt = /*#__PURE__*/ function($) {
        _inherits(Pt, $);
        var _super = _create_super(Pt);
        function Pt() {
            _class_call_check(this, Pt);
            return _super.apply(this, arguments);
        }
        _create_class(Pt, [
            {
                key: "_sceneFunc",
                value: function _sceneFunc(t) {
                    var e = this.width(), i = this.height(), r = this.pointerDirection(), a = this.pointerWidth(), n = this.pointerHeight(), s = this.cornerRadius();
                    var o = 0, h = 0, l = 0, d = 0;
                    "number" == typeof s ? o = h = l = d = Math.min(s, e / 2, i / 2) : (o = Math.min(s[0] || 0, e / 2, i / 2), h = Math.min(s[1] || 0, e / 2, i / 2), d = Math.min(s[2] || 0, e / 2, i / 2), l = Math.min(s[3] || 0, e / 2, i / 2)), t.beginPath(), t.moveTo(o, 0), "up" === r && (t.lineTo((e - a) / 2, 0), t.lineTo(e / 2, -1 * n), t.lineTo((e + a) / 2, 0)), t.lineTo(e - h, 0), t.arc(e - h, h, h, 3 * Math.PI / 2, 0, !1), "right" === r && (t.lineTo(e, (i - n) / 2), t.lineTo(e + a, i / 2), t.lineTo(e, (i + n) / 2)), t.lineTo(e, i - d), t.arc(e - d, i - d, d, 0, Math.PI / 2, !1), "down" === r && (t.lineTo((e + a) / 2, i), t.lineTo(e / 2, i + n), t.lineTo((e - a) / 2, i)), t.lineTo(l, i), t.arc(l, i - l, l, Math.PI / 2, Math.PI, !1), "left" === r && (t.lineTo(0, (i + n) / 2), t.lineTo(-1 * a, i / 2), t.lineTo(0, (i - n) / 2)), t.lineTo(0, o), t.arc(o, o, o, Math.PI, 3 * Math.PI / 2, !1), t.closePath(), t.fillStrokeShape(this);
                }
            },
            {
                key: "getSelfRect",
                value: function getSelfRect() {
                    var t = 0, e = 0, i = this.pointerWidth(), r = this.pointerHeight(), a = this.pointerDirection(), n = this.width(), s = this.height();
                    return "up" === a ? (e -= r, s += r) : "down" === a ? s += r : "left" === a ? (t -= 1.5 * i, n += i) : "right" === a && (n += 1.5 * i), {
                        x: t,
                        y: e,
                        width: n,
                        height: s
                    };
                }
            }
        ]);
        return Pt;
    }($);
    Pt.prototype.className = "Tag", r(Pt), x.addGetterSetter(Pt, "pointerDirection", "none"), x.addGetterSetter(Pt, "pointerWidth", 0, f()), x.addGetterSetter(Pt, "pointerHeight", 0, f()), x.addGetterSetter(Pt, "cornerRadius", 0, p(4));
    var Tt = /*#__PURE__*/ function($) {
        _inherits(Tt, $);
        var _super = _create_super(Tt);
        function Tt() {
            _class_call_check(this, Tt);
            return _super.apply(this, arguments);
        }
        _create_class(Tt, [
            {
                key: "_sceneFunc",
                value: function _sceneFunc(t) {
                    var e = this.cornerRadius(), i = this.width(), r = this.height();
                    if (t.beginPath(), e) {
                        var a = 0, n = 0, s = 0, o = 0;
                        "number" == typeof e ? a = n = s = o = Math.min(e, i / 2, r / 2) : (a = Math.min(e[0] || 0, i / 2, r / 2), n = Math.min(e[1] || 0, i / 2, r / 2), o = Math.min(e[2] || 0, i / 2, r / 2), s = Math.min(e[3] || 0, i / 2, r / 2)), t.moveTo(a, 0), t.lineTo(i - n, 0), t.arc(i - n, n, n, 3 * Math.PI / 2, 0, !1), t.lineTo(i, r - o), t.arc(i - o, r - o, o, 0, Math.PI / 2, !1), t.lineTo(s, r), t.arc(s, r - s, s, Math.PI / 2, Math.PI, !1), t.lineTo(0, a), t.arc(a, a, a, Math.PI, 3 * Math.PI / 2, !1);
                    } else t.rect(0, 0, i, r);
                    t.closePath(), t.fillStrokeShape(this);
                }
            }
        ]);
        return Tt;
    }($);
    Tt.prototype.className = "Rect", r(Tt), x.addGetterSetter(Tt, "cornerRadius", 0, p(4));
    var At = /*#__PURE__*/ function($) {
        _inherits(At, $);
        var _super = _create_super(At);
        function At() {
            _class_call_check(this, At);
            return _super.apply(this, arguments);
        }
        _create_class(At, [
            {
                key: "_sceneFunc",
                value: function _sceneFunc(t) {
                    var e = this._getPoints();
                    t.beginPath(), t.moveTo(e[0].x, e[0].y);
                    for(var i = 1; i < e.length; i++)t.lineTo(e[i].x, e[i].y);
                    t.closePath(), t.fillStrokeShape(this);
                }
            },
            {
                key: "_getPoints",
                value: function _getPoints() {
                    var t = this.attrs.sides, e = this.attrs.radius || 0, i = [];
                    for(var r = 0; r < t; r++)i.push({
                        x: e * Math.sin(2 * r * Math.PI / t),
                        y: -1 * e * Math.cos(2 * r * Math.PI / t)
                    });
                    return i;
                }
            },
            {
                key: "getSelfRect",
                value: function getSelfRect() {
                    var t = this._getPoints();
                    var e = t[0].x, i = t[0].y, r = t[0].x, a = t[0].y;
                    return t.forEach(function(t) {
                        e = Math.min(e, t.x), i = Math.max(i, t.x), r = Math.min(r, t.y), a = Math.max(a, t.y);
                    }), {
                        x: e,
                        y: r,
                        width: i - e,
                        height: a - r
                    };
                }
            },
            {
                key: "getWidth",
                value: function getWidth() {
                    return 2 * this.radius();
                }
            },
            {
                key: "getHeight",
                value: function getHeight() {
                    return 2 * this.radius();
                }
            },
            {
                key: "setWidth",
                value: function setWidth(t) {
                    this.radius(t / 2);
                }
            },
            {
                key: "setHeight",
                value: function setHeight(t) {
                    this.radius(t / 2);
                }
            }
        ]);
        return At;
    }($);
    At.prototype.className = "RegularPolygon", At.prototype._centroid = !0, At.prototype._attrsAffectingSize = [
        "radius"
    ], r(At), x.addGetterSetter(At, "radius", 0, f()), x.addGetterSetter(At, "sides", 0, f());
    var Mt = 2 * Math.PI;
    var Gt = /*#__PURE__*/ function($) {
        _inherits(Gt, $);
        var _super = _create_super(Gt);
        function Gt() {
            _class_call_check(this, Gt);
            return _super.apply(this, arguments);
        }
        _create_class(Gt, [
            {
                key: "_sceneFunc",
                value: function _sceneFunc(t) {
                    t.beginPath(), t.arc(0, 0, this.innerRadius(), 0, Mt, !1), t.moveTo(this.outerRadius(), 0), t.arc(0, 0, this.outerRadius(), Mt, 0, !0), t.closePath(), t.fillStrokeShape(this);
                }
            },
            {
                key: "getWidth",
                value: function getWidth() {
                    return 2 * this.outerRadius();
                }
            },
            {
                key: "getHeight",
                value: function getHeight() {
                    return 2 * this.outerRadius();
                }
            },
            {
                key: "setWidth",
                value: function setWidth(t) {
                    this.outerRadius(t / 2);
                }
            },
            {
                key: "setHeight",
                value: function setHeight(t) {
                    this.outerRadius(t / 2);
                }
            }
        ]);
        return Gt;
    }($);
    Gt.prototype.className = "Ring", Gt.prototype._centroid = !0, Gt.prototype._attrsAffectingSize = [
        "innerRadius",
        "outerRadius"
    ], r(Gt), x.addGetterSetter(Gt, "innerRadius", 0, f()), x.addGetterSetter(Gt, "outerRadius", 0, f());
    var Rt = /*#__PURE__*/ function($) {
        _inherits(Rt, $);
        var _super = _create_super(Rt);
        function Rt(t) {
            _class_call_check(this, Rt);
            var _this;
            _this = _super.call(this, t), _this._updated = !0, _this.anim = new st(function() {
                var _$t = _this._updated;
                return _this._updated = !1, _$t;
            }), _this.on("animationChange.konva", function() {
                this.frameIndex(0);
            }), _this.on("frameIndexChange.konva", function() {
                this._updated = !0;
            }), _this.on("frameRateChange.konva", function() {
                this.anim.isRunning() && (clearInterval(this.interval), this._setInterval());
            });
            return _possible_constructor_return(_this);
        }
        _create_class(Rt, [
            {
                key: "_sceneFunc",
                value: function _sceneFunc(t) {
                    var e = this.animation(), i = this.frameIndex(), r = 4 * i, a = this.animations()[e], n = this.frameOffsets(), s = a[r + 0], o = a[r + 1], h = a[r + 2], l = a[r + 3], d = this.image();
                    if ((this.hasFill() || this.hasStroke()) && (t.beginPath(), t.rect(0, 0, h, l), t.closePath(), t.fillStrokeShape(this)), d) if (n) {
                        var c = n[e], g = 2 * i;
                        t.drawImage(d, s, o, h, l, c[g + 0], c[g + 1], h, l);
                    } else t.drawImage(d, s, o, h, l, 0, 0, h, l);
                }
            },
            {
                key: "_hitFunc",
                value: function _hitFunc(t) {
                    var e = this.animation(), i = this.frameIndex(), r = 4 * i, a = this.animations()[e], n = this.frameOffsets(), s = a[r + 2], o = a[r + 3];
                    if (t.beginPath(), n) {
                        var h = n[e], l = 2 * i;
                        t.rect(h[l + 0], h[l + 1], s, o);
                    } else t.rect(0, 0, s, o);
                    t.closePath(), t.fillShape(this);
                }
            },
            {
                key: "_useBufferCanvas",
                value: function _useBufferCanvas() {
                    return _get(_get_prototype_of(Rt.prototype), "_useBufferCanvas", this).call(this, !0);
                }
            },
            {
                key: "_setInterval",
                value: function _setInterval() {
                    var t = this;
                    this.interval = setInterval(function() {
                        t._updateIndex();
                    }, 1e3 / this.frameRate());
                }
            },
            {
                key: "start",
                value: function start() {
                    if (!this.isRunning()) {
                        var t = this.getLayer();
                        this.anim.setLayers(t), this._setInterval(), this.anim.start();
                    }
                }
            },
            {
                key: "stop",
                value: function stop() {
                    this.anim.stop(), clearInterval(this.interval);
                }
            },
            {
                key: "isRunning",
                value: function isRunning() {
                    return this.anim.isRunning();
                }
            },
            {
                key: "_updateIndex",
                value: function _updateIndex() {
                    var t = this.frameIndex(), e = this.animation();
                    t < this.animations()[e].length / 4 - 1 ? this.frameIndex(t + 1) : this.frameIndex(0);
                }
            }
        ]);
        return Rt;
    }($);
    Rt.prototype.className = "Sprite", r(Rt), x.addGetterSetter(Rt, "animation"), x.addGetterSetter(Rt, "animations"), x.addGetterSetter(Rt, "frameOffsets"), x.addGetterSetter(Rt, "image"), x.addGetterSetter(Rt, "frameIndex", 0, f()), x.addGetterSetter(Rt, "frameRate", 17, f()), x.backCompat(Rt, {
        index: "frameIndex",
        getIndex: "getFrameIndex",
        setIndex: "setFrameIndex"
    });
    var Et = /*#__PURE__*/ function($) {
        _inherits(Et, $);
        var _super = _create_super(Et);
        function Et() {
            _class_call_check(this, Et);
            return _super.apply(this, arguments);
        }
        _create_class(Et, [
            {
                key: "_sceneFunc",
                value: function _sceneFunc(t) {
                    var e = this.innerRadius(), i = this.outerRadius(), r = this.numPoints();
                    t.beginPath(), t.moveTo(0, 0 - i);
                    for(var a = 1; a < 2 * r; a++){
                        var n = a % 2 == 0 ? i : e, s = n * Math.sin(a * Math.PI / r), o = -1 * n * Math.cos(a * Math.PI / r);
                        t.lineTo(s, o);
                    }
                    t.closePath(), t.fillStrokeShape(this);
                }
            },
            {
                key: "getWidth",
                value: function getWidth() {
                    return 2 * this.outerRadius();
                }
            },
            {
                key: "getHeight",
                value: function getHeight() {
                    return 2 * this.outerRadius();
                }
            },
            {
                key: "setWidth",
                value: function setWidth(t) {
                    this.outerRadius(t / 2);
                }
            },
            {
                key: "setHeight",
                value: function setHeight(t) {
                    this.outerRadius(t / 2);
                }
            }
        ]);
        return Et;
    }($);
    function Lt(t) {
        return Array.from(t);
    }
    Et.prototype.className = "Star", Et.prototype._centroid = !0, Et.prototype._attrsAffectingSize = [
        "innerRadius",
        "outerRadius"
    ], r(Et), x.addGetterSetter(Et, "numPoints", 5, f()), x.addGetterSetter(Et, "innerRadius", 0, f()), x.addGetterSetter(Et, "outerRadius", 0, f());
    var Dt, Ot = [
        "fontFamily",
        "fontSize",
        "fontStyle",
        "fontVariant",
        "padding",
        "align",
        "verticalAlign",
        "lineHeight",
        "text",
        "width",
        "height",
        "wrap",
        "ellipsis",
        "letterSpacing"
    ], It = Ot.length;
    function Ft() {
        return Dt || (Dt = c.createCanvasElement().getContext("2d"));
    }
    var Nt = /*#__PURE__*/ function($) {
        _inherits(Nt, $);
        var _super = _create_super(Nt);
        function Nt(t) {
            _class_call_check(this, Nt);
            var _this;
            _this = _super.call(this, function(t) {
                return (t = t || {}).fillLinearGradientColorStops || t.fillRadialGradientColorStops || t.fillPatternImage || (t.fill = t.fill || "black"), t;
            }(t)), _this._partialTextX = 0, _this._partialTextY = 0;
            for(var e = 0; e < It; e++)_this.on(Ot[e] + "Change.konva", _this._setTextData);
            _this._setTextData();
            return _possible_constructor_return(_this);
        }
        _create_class(Nt, [
            {
                key: "_sceneFunc",
                value: function _sceneFunc(t) {
                    var e = this.textArr, i = e.length;
                    if (this.text()) {
                        var r, a = this.padding(), n = this.fontSize(), s = this.lineHeight() * n, o = this.verticalAlign(), h = 0, l = this.align(), d = this.getWidth(), c = this.letterSpacing(), g = this.fill(), _$u = this.textDecoration(), _$f = -1 !== _$u.indexOf("underline"), _$p = -1 !== _$u.indexOf("line-through"), _$v = 0, _$m = (_$v = s / 2, 0), _$_ = 0;
                        for(t.setAttr("font", this._getContextFont()), t.setAttr("textBaseline", "middle"), t.setAttr("textAlign", "left"), "middle" === o ? h = (this.getHeight() - i * s - 2 * a) / 2 : "bottom" === o && (h = this.getHeight() - i * s - 2 * a), t.translate(a, h + a), r = 0; r < i; r++){
                            _$m = 0, _$_ = 0;
                            var _$y, x, b, S = e[r], w = S.text, C = S.width, k = r !== i - 1;
                            if (t.save(), "right" === l ? _$m += d - C - 2 * a : "center" === l && (_$m += (d - C - 2 * a) / 2), _$f && (t.save(), t.beginPath(), t.moveTo(_$m, _$v + _$_ + Math.round(n / 2)), x = 0 === (_$y = w.split(" ").length - 1), b = "justify" === l && k && !x ? d - 2 * a : C, t.lineTo(_$m + Math.round(b), _$v + _$_ + Math.round(n / 2)), t.lineWidth = n / 15, t.strokeStyle = g, t.stroke(), t.restore()), _$p && (t.save(), t.beginPath(), t.moveTo(_$m, _$v + _$_), x = 0 === (_$y = w.split(" ").length - 1), b = "justify" === l && k && !x ? d - 2 * a : C, t.lineTo(_$m + Math.round(b), _$v + _$_), t.lineWidth = n / 15, t.strokeStyle = g, t.stroke(), t.restore()), 0 !== c || "justify" === l) {
                                _$y = w.split(" ").length - 1;
                                for(var P = Lt(w), T = 0; T < P.length; T++){
                                    var A = P[T];
                                    " " === A && r !== i - 1 && "justify" === l && (_$m += (d - 2 * a - C) / _$y), this._partialTextX = _$m, this._partialTextY = _$v + _$_, this._partialText = A, t.fillStrokeShape(this), _$m += this.measureSize(A).width + c;
                                }
                            } else this._partialTextX = _$m, this._partialTextY = _$v + _$_, this._partialText = w, t.fillStrokeShape(this);
                            t.restore(), i > 1 && (_$v += s);
                        }
                    }
                }
            },
            {
                key: "_hitFunc",
                value: function _hitFunc(t) {
                    var e = this.getWidth(), i = this.getHeight();
                    t.beginPath(), t.rect(0, 0, e, i), t.closePath(), t.fillStrokeShape(this);
                }
            },
            {
                key: "setText",
                value: function setText(t) {
                    var e = c._isString(t) ? t : null == t ? "" : t + "";
                    return this._setAttr("text", e), this;
                }
            },
            {
                key: "getWidth",
                value: function getWidth() {
                    return "auto" === this.attrs.width || void 0 === this.attrs.width ? this.getTextWidth() + 2 * this.padding() : this.attrs.width;
                }
            },
            {
                key: "getHeight",
                value: function getHeight() {
                    return "auto" === this.attrs.height || void 0 === this.attrs.height ? this.fontSize() * this.textArr.length * this.lineHeight() + 2 * this.padding() : this.attrs.height;
                }
            },
            {
                key: "getTextWidth",
                value: function getTextWidth() {
                    return this.textWidth;
                }
            },
            {
                key: "getTextHeight",
                value: function getTextHeight() {
                    return c.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."), this.textHeight;
                }
            },
            {
                key: "measureSize",
                value: function measureSize(t) {
                    var e, i = Ft(), r = this.fontSize();
                    return i.save(), i.font = this._getContextFont(), e = i.measureText(t), i.restore(), {
                        width: e.width,
                        height: r
                    };
                }
            },
            {
                key: "_getContextFont",
                value: function _getContextFont() {
                    return this.fontStyle() + " " + this.fontVariant() + " " + this.fontSize() + "px " + this.fontFamily().split(",").map(function(t) {
                        var e = (t = t.trim()).indexOf(" ") >= 0, i = t.indexOf('"') >= 0 || t.indexOf("'") >= 0;
                        return e && !i && (t = '"'.concat(t, '"')), t;
                    }).join(", ");
                }
            },
            {
                key: "_addTextLine",
                value: function _addTextLine(t) {
                    "justify" === this.align() && (t = t.trim());
                    var e = this._getTextWidth(t);
                    return this.textArr.push({
                        text: t,
                        width: e
                    });
                }
            },
            {
                key: "_getTextWidth",
                value: function _getTextWidth(t) {
                    var e = this.letterSpacing(), i = t.length;
                    return Ft().measureText(t).width + (i ? e * (i - 1) : 0);
                }
            },
            {
                key: "_setTextData",
                value: function _setTextData() {
                    var t = this.text().split("\n"), e = +this.fontSize(), i = 0, r = this.lineHeight() * e, a = this.attrs.width, n = this.attrs.height, s = "auto" !== a && void 0 !== a, o = "auto" !== n && void 0 !== n, h = this.padding(), l = a - 2 * h, d = n - 2 * h, c = 0, g = this.wrap(), _$u = "none" !== g, _$f = "char" !== g && _$u, _$p = this.ellipsis();
                    this.textArr = [], Ft().font = this._getContextFont();
                    for(var _$v = _$p ? this._getTextWidth("…") : 0, _$m = 0, _$_ = t.length; _$m < _$_; ++_$m){
                        var _$y = t[_$m], x = this._getTextWidth(_$y);
                        if (s && x > l) for(; _$y.length > 0;){
                            for(var b = 0, S = _$y.length, w = "", C = 0; b < S;){
                                var k = b + S >>> 1, P = _$y.slice(0, k + 1), T = this._getTextWidth(P) + _$v;
                                T <= l ? (b = k + 1, w = P, C = T) : S = k;
                            }
                            if (!w) break;
                            if (_$f) {
                                var A, M = _$y[w.length];
                                (A = (" " === M || "-" === M) && C <= l ? w.length : Math.max(w.lastIndexOf(" "), w.lastIndexOf("-")) + 1) > 0 && (b = A, w = w.slice(0, b), C = this._getTextWidth(w));
                            }
                            if (w = w.trimRight(), this._addTextLine(w), i = Math.max(i, C), c += r, !_$u || o && c + r > d) {
                                var G = this.textArr[this.textArr.length - 1];
                                if (G) {
                                    if (_$p) this._getTextWidth(G.text + "…") < l || (G.text = G.text.slice(0, G.text.length - 3)), this.textArr.splice(this.textArr.length - 1, 1), this._addTextLine(G.text + "…");
                                }
                                break;
                            }
                            if ((_$y = (_$y = _$y.slice(b)).trimLeft()).length > 0 && (x = this._getTextWidth(_$y)) <= l) {
                                this._addTextLine(_$y), c += r, i = Math.max(i, x);
                                break;
                            }
                        }
                        else this._addTextLine(_$y), c += r, i = Math.max(i, x);
                        if (o && c + r > d) break;
                    }
                    this.textHeight = e, this.textWidth = i;
                }
            },
            {
                key: "getStrokeScaleEnabled",
                value: function getStrokeScaleEnabled() {
                    return !0;
                }
            }
        ]);
        return Nt;
    }($);
    Nt.prototype._fillFunc = function(t) {
        t.fillText(this._partialText, this._partialTextX, this._partialTextY);
    }, Nt.prototype._strokeFunc = function(t) {
        t.strokeText(this._partialText, this._partialTextX, this._partialTextY);
    }, Nt.prototype.className = "Text", Nt.prototype._attrsAffectingSize = [
        "text",
        "fontSize",
        "padding",
        "wrap",
        "lineHeight",
        "letterSpacing"
    ], r(Nt), x.overWriteSetter(Nt, "width", v()), x.overWriteSetter(Nt, "height", v()), x.addGetterSetter(Nt, "fontFamily", "Arial"), x.addGetterSetter(Nt, "fontSize", 12, f()), x.addGetterSetter(Nt, "fontStyle", "normal"), x.addGetterSetter(Nt, "fontVariant", "normal"), x.addGetterSetter(Nt, "padding", 0, f()), x.addGetterSetter(Nt, "align", "left"), x.addGetterSetter(Nt, "verticalAlign", "top"), x.addGetterSetter(Nt, "lineHeight", 1, f()), x.addGetterSetter(Nt, "wrap", "word"), x.addGetterSetter(Nt, "ellipsis", !1, y()), x.addGetterSetter(Nt, "letterSpacing", 0, f()), x.addGetterSetter(Nt, "text", "", m()), x.addGetterSetter(Nt, "textDecoration", "");
    function Bt(t) {
        t.fillText(this.partialText, 0, 0);
    }
    function zt(t) {
        t.strokeText(this.partialText, 0, 0);
    }
    var Wt = /*#__PURE__*/ function($) {
        _inherits(Wt, $);
        var _super = _create_super(Wt);
        function Wt(t) {
            _class_call_check(this, Wt);
            var _this;
            _this = _super.call(this, t), _this.dummyCanvas = c.createCanvasElement(), _this.dataArray = [], _this.dataArray = _t.parsePathData(_this.attrs.data), _this.on("dataChange.konva", function() {
                this.dataArray = _t.parsePathData(this.attrs.data), this._setTextData();
            }), _this.on("textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva fontSizeChange.konva", _this._setTextData), _this._setTextData();
            return _possible_constructor_return(_this);
        }
        _create_class(Wt, [
            {
                key: "_sceneFunc",
                value: function _sceneFunc(t) {
                    t.setAttr("font", this._getContextFont()), t.setAttr("textBaseline", this.textBaseline()), t.setAttr("textAlign", "left"), t.save();
                    var e = this.textDecoration(), i = this.fill(), r = this.fontSize(), a = this.glyphInfo;
                    "underline" === e && t.beginPath();
                    for(var n = 0; n < a.length; n++){
                        t.save();
                        var s = a[n].p0;
                        t.translate(s.x, s.y), t.rotate(a[n].rotation), this.partialText = a[n].text, t.fillStrokeShape(this), "underline" === e && (0 === n && t.moveTo(0, r / 2 + 1), t.lineTo(r, r / 2 + 1)), t.restore();
                    }
                    "underline" === e && (t.strokeStyle = i, t.lineWidth = r / 20, t.stroke()), t.restore();
                }
            },
            {
                key: "_hitFunc",
                value: function _hitFunc(t) {
                    t.beginPath();
                    var e = this.glyphInfo;
                    if (e.length >= 1) {
                        var i = e[0].p0;
                        t.moveTo(i.x, i.y);
                    }
                    for(var r = 0; r < e.length; r++){
                        var a = e[r].p1;
                        t.lineTo(a.x, a.y);
                    }
                    t.setAttr("lineWidth", this.fontSize()), t.setAttr("strokeStyle", this.colorKey), t.stroke();
                }
            },
            {
                key: "getTextWidth",
                value: function getTextWidth() {
                    return this.textWidth;
                }
            },
            {
                key: "getTextHeight",
                value: function getTextHeight() {
                    return c.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."), this.textHeight;
                }
            },
            {
                key: "setText",
                value: function setText(t) {
                    return Nt.prototype.setText.call(this, t);
                }
            },
            {
                key: "_getContextFont",
                value: function _getContextFont() {
                    return Nt.prototype._getContextFont.call(this);
                }
            },
            {
                key: "_getTextSize",
                value: function _getTextSize(t) {
                    var e = this.dummyCanvas.getContext("2d");
                    e.save(), e.font = this._getContextFont();
                    var i = e.measureText(t);
                    return e.restore(), {
                        width: i.width,
                        height: parseInt(this.attrs.fontSize, 10)
                    };
                }
            },
            {
                key: "_setTextData",
                value: function _setTextData() {
                    var t = this, e = this._getTextSize(this.attrs.text), i = this.letterSpacing(), r = this.align(), a = this.kerningFunc();
                    this.textWidth = e.width, this.textHeight = e.height;
                    var n = Math.max(this.textWidth + ((this.attrs.text || "").length - 1) * i, 0);
                    this.glyphInfo = [];
                    for(var s = 0, o = 0; o < t.dataArray.length; o++)t.dataArray[o].pathLength > 0 && (s += t.dataArray[o].pathLength);
                    var h = 0;
                    "center" === r && (h = Math.max(0, s / 2 - n / 2)), "right" === r && (h = Math.max(0, s - n));
                    for(var l, d, c, g = Lt(this.text()), _$u = this.text().split(" ").length - 1, _$f = -1, _$p = 0, _$v = function v() {
                        _$p = 0;
                        for(var e = t.dataArray, i = _$f + 1; i < e.length; i++){
                            if (e[i].pathLength > 0) return _$f = i, e[i];
                            "M" === e[i].command && (l = {
                                x: e[i].points[0],
                                y: e[i].points[1]
                            });
                        }
                        return {};
                    }, _$m = function m(e) {
                        var a = t._getTextSize(e).width + i;
                        " " === e && "justify" === r && (a += (s - n) / _$u);
                        var o = 0, h = 0;
                        for(d = void 0; Math.abs(a - o) / a > .01 && h < 20;){
                            h++;
                            for(var g = o; void 0 === c;)(c = _$v()) && g + c.pathLength < a && (g += c.pathLength, c = void 0);
                            if (c === {} || void 0 === l) return;
                            var _$f = !1;
                            switch(c.command){
                                case "L":
                                    _t.getLineLength(l.x, l.y, c.points[0], c.points[1]) > a ? d = _t.getPointOnLine(a, l.x, l.y, c.points[0], c.points[1], l.x, l.y) : c = void 0;
                                    break;
                                case "A":
                                    var _$m = c.points[4], _$_ = c.points[5], _$y = c.points[4] + _$_;
                                    0 === _$p ? _$p = _$m + 1e-8 : a > o ? _$p += Math.PI / 180 * _$_ / Math.abs(_$_) : _$p -= Math.PI / 360 * _$_ / Math.abs(_$_), (_$_ < 0 && _$p < _$y || _$_ >= 0 && _$p > _$y) && (_$p = _$y, _$f = !0), d = _t.getPointOnEllipticalArc(c.points[0], c.points[1], c.points[2], c.points[3], _$p, c.points[6]);
                                    break;
                                case "C":
                                    0 === _$p ? _$p = a > c.pathLength ? 1e-8 : a / c.pathLength : a > o ? _$p += (a - o) / c.pathLength / 2 : _$p = Math.max(_$p - (o - a) / c.pathLength / 2, 0), _$p > 1 && (_$p = 1, _$f = !0), d = _t.getPointOnCubicBezier(_$p, c.start.x, c.start.y, c.points[0], c.points[1], c.points[2], c.points[3], c.points[4], c.points[5]);
                                    break;
                                case "Q":
                                    0 === _$p ? _$p = a / c.pathLength : a > o ? _$p += (a - o) / c.pathLength : _$p -= (o - a) / c.pathLength, _$p > 1 && (_$p = 1, _$f = !0), d = _t.getPointOnQuadraticBezier(_$p, c.start.x, c.start.y, c.points[0], c.points[1], c.points[2], c.points[3]);
                            }
                            void 0 !== d && (o = _t.getLineLength(l.x, l.y, d.x, d.y)), _$f && (_$f = !1, c = void 0);
                        }
                    }, _$_ = h / (t._getTextSize("C").width + i) - 1, _$y = 0; _$y < _$_ && (_$m("C"), void 0 !== l && void 0 !== d); _$y++)l = d;
                    for(var x = 0; x < g.length && (_$m(g[x]), void 0 !== l && void 0 !== d); x++){
                        var b = _t.getLineLength(l.x, l.y, d.x, d.y), S = 0;
                        if (a) try {
                            S = a(g[x - 1], g[x]) * this.fontSize();
                        } catch (t) {
                            S = 0;
                        }
                        l.x += S, d.x += S, this.textWidth += S;
                        var w = _t.getPointOnLine(S + b / 2, l.x, l.y, d.x, d.y), C = Math.atan2(d.y - l.y, d.x - l.x);
                        this.glyphInfo.push({
                            transposeX: w.x,
                            transposeY: w.y,
                            text: g[x],
                            rotation: C,
                            p0: l,
                            p1: d
                        }), l = d;
                    }
                }
            },
            {
                key: "getSelfRect",
                value: function getSelfRect() {
                    if (!this.glyphInfo.length) return {
                        x: 0,
                        y: 0,
                        width: 0,
                        height: 0
                    };
                    var t = [];
                    this.glyphInfo.forEach(function(e) {
                        t.push(e.p0.x), t.push(e.p0.y), t.push(e.p1.x), t.push(e.p1.y);
                    });
                    for(var e, i, r = t[0] || 0, a = t[0] || 0, n = t[1] || 0, s = t[1] || 0, o = 0; o < t.length / 2; o++)e = t[2 * o], i = t[2 * o + 1], r = Math.min(r, e), a = Math.max(a, e), n = Math.min(n, i), s = Math.max(s, i);
                    var h = this.fontSize();
                    return {
                        x: r - h / 2,
                        y: n - h / 2,
                        width: a - r + h,
                        height: s - n + h
                    };
                }
            }
        ]);
        return Wt;
    }($);
    Wt.prototype._fillFunc = Bt, Wt.prototype._strokeFunc = zt, Wt.prototype._fillFuncHit = Bt, Wt.prototype._strokeFuncHit = zt, Wt.prototype.className = "TextPath", Wt.prototype._attrsAffectingSize = [
        "text",
        "fontSize",
        "data"
    ], r(Wt), x.addGetterSetter(Wt, "data"), x.addGetterSetter(Wt, "fontFamily", "Arial"), x.addGetterSetter(Wt, "fontSize", 12, f()), x.addGetterSetter(Wt, "fontStyle", "normal"), x.addGetterSetter(Wt, "align", "left"), x.addGetterSetter(Wt, "letterSpacing", 0, f()), x.addGetterSetter(Wt, "textBaseline", "middle"), x.addGetterSetter(Wt, "fontVariant", "normal"), x.addGetterSetter(Wt, "text", ""), x.addGetterSetter(Wt, "textDecoration", null), x.addGetterSetter(Wt, "kerningFunc", null);
    var Ht = [
        "resizeEnabledChange",
        "rotateAnchorOffsetChange",
        "rotateEnabledChange",
        "enabledAnchorsChange",
        "anchorSizeChange",
        "borderEnabledChange",
        "borderStrokeChange",
        "borderStrokeWidthChange",
        "borderDashChange",
        "anchorStrokeChange",
        "anchorStrokeWidthChange",
        "anchorFillChange",
        "anchorCornerRadiusChange",
        "ignoreStrokeChange"
    ].map(function(t) {
        return t + ".tr-konva";
    }).join(" "), Yt = [
        "widthChange",
        "heightChange",
        "scaleXChange",
        "scaleYChange",
        "skewXChange",
        "skewYChange",
        "rotationChange",
        "offsetXChange",
        "offsetYChange",
        "transformsEnabledChange",
        "strokeWidthChange"
    ].map(function(t) {
        return t + ".tr-konva";
    }).join(" "), Xt = {
        "top-left": -45,
        "top-center": 0,
        "top-right": 45,
        "middle-right": -90,
        "middle-left": 90,
        "bottom-left": -135,
        "bottom-center": 180,
        "bottom-right": 135
    };
    var jt = "ontouchstart" in i._global;
    var Ut = [
        "top-left",
        "top-center",
        "top-right",
        "middle-right",
        "middle-left",
        "bottom-left",
        "bottom-center",
        "bottom-right"
    ];
    function qt(t, e, i) {
        var r = i.x + (t.x - i.x) * Math.cos(e) - (t.y - i.y) * Math.sin(e), a = i.y + (t.x - i.x) * Math.sin(e) + (t.y - i.y) * Math.cos(e);
        return Object.assign(Object.assign({}, t), {
            rotation: t.rotation + e,
            x: r,
            y: a
        });
    }
    function Vt(t, e) {
        return qt(t, e, function(t) {
            return {
                x: t.x + t.width / 2 * Math.cos(t.rotation) + t.height / 2 * Math.sin(-t.rotation),
                y: t.y + t.height / 2 * Math.cos(t.rotation) + t.width / 2 * Math.sin(t.rotation)
            };
        }(t));
    }
    var Kt = /*#__PURE__*/ function(at1) {
        _inherits(Kt, at1);
        var _super = _create_super(Kt);
        function Kt(t) {
            _class_call_check(this, Kt);
            var _this;
            _this = _super.call(this, t), _this._transforming = !1, _this._createElements(), _this._handleMouseMove = _this._handleMouseMove.bind(_assert_this_initialized(_this)), _this._handleMouseUp = _this._handleMouseUp.bind(_assert_this_initialized(_this)), _this.update = _this.update.bind(_assert_this_initialized(_this)), _this.on(Ht, _this.update), _this.getNode() && _this.update();
            return _possible_constructor_return(_this);
        }
        _create_class(Kt, [
            {
                key: "attachTo",
                value: function attachTo(t) {
                    return this.setNode(t), this;
                }
            },
            {
                key: "setNode",
                value: function setNode(t) {
                    return c.warn("tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead."), this.setNodes([
                        t
                    ]);
                }
            },
            {
                key: "getNode",
                value: function getNode() {
                    return this._nodes && this._nodes[0];
                }
            },
            {
                key: "setNodes",
                value: function setNodes() {
                    var _this = this;
                    var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
                    return this._nodes && this._nodes.length && this.detach(), this._nodes = t, 1 === t.length && this.useSingleNodeRotation() ? this.rotation(t[0].getAbsoluteRotation()) : this.rotation(0), this._nodes.forEach(function(t) {
                        var e = t._attrsAffectingSize.map(function(t) {
                            return t + "Change.tr-konva";
                        }).join(" "), i = function() {
                            1 === _this.nodes().length && _this.useSingleNodeRotation() && _this.rotation(_this.nodes()[0].getAbsoluteRotation()), _this._resetTransformCache(), _this._transforming || _this.isDragging() || _this.update();
                        };
                        t.on(e, i), t.on(Yt, i), t.on("absoluteTransformChange.tr-konva", i), t.on("xChange.tr-konva yChange.tr-konva", i), _this._proxyDrag(t);
                    }), this._resetTransformCache(), !!this.findOne(".top-left") && this.update(), this;
                }
            },
            {
                key: "_proxyDrag",
                value: function _proxyDrag(t) {
                    var _this = this;
                    var e;
                    t.on("dragstart.tr-konva", function(i) {
                        e = t.getAbsolutePosition(), _this.isDragging() || t === _this.findOne(".back") || _this.startDrag(i, !1);
                    }), t.on("dragmove.tr-konva", function(i) {
                        if (!e) return;
                        var r = t.getAbsolutePosition(), a = r.x - e.x, n = r.y - e.y;
                        _this.nodes().forEach(function(e) {
                            if (e === t) return;
                            if (e.isDragging()) return;
                            var r = e.getAbsolutePosition();
                            e.setAbsolutePosition({
                                x: r.x + a,
                                y: r.y + n
                            }), e.startDrag(i);
                        }), e = null;
                    });
                }
            },
            {
                key: "getNodes",
                value: function getNodes() {
                    return this._nodes || [];
                }
            },
            {
                key: "getActiveAnchor",
                value: function getActiveAnchor() {
                    return this._movingAnchorName;
                }
            },
            {
                key: "detach",
                value: function detach() {
                    this._nodes && this._nodes.forEach(function(t) {
                        t.off(".tr-konva");
                    }), this._nodes = [], this._resetTransformCache();
                }
            },
            {
                key: "_resetTransformCache",
                value: function _resetTransformCache() {
                    this._clearCache("nodesRect"), this._clearCache("transform"), this._clearSelfAndDescendantCache("absoluteTransform");
                }
            },
            {
                key: "_getNodeRect",
                value: function _getNodeRect() {
                    return this._getCache("nodesRect", this.__getNodeRect);
                }
            },
            {
                key: "__getNodeShape",
                value: function __getNodeShape(t) {
                    var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.rotation(), r = arguments.length > 2 ? arguments[2] : void 0;
                    var a = t.getClientRect({
                        skipTransform: !0,
                        skipShadow: !0,
                        skipStroke: this.ignoreStroke()
                    }), n = t.getAbsoluteScale(r), s = t.getAbsolutePosition(r), o = a.x * n.x - t.offsetX() * n.x, h = a.y * n.y - t.offsetY() * n.y;
                    var l = (i.getAngle(t.getAbsoluteRotation()) + 2 * Math.PI) % (2 * Math.PI);
                    return qt({
                        x: s.x + o * Math.cos(l) + h * Math.sin(-l),
                        y: s.y + h * Math.cos(l) + o * Math.sin(l),
                        width: a.width * n.x,
                        height: a.height * n.y,
                        rotation: l
                    }, -i.getAngle(e), {
                        x: 0,
                        y: 0
                    });
                }
            },
            {
                key: "__getNodeRect",
                value: function __getNodeRect() {
                    var _this = this;
                    if (!this.getNode()) return {
                        x: -1e8,
                        y: -1e8,
                        width: 0,
                        height: 0,
                        rotation: 0
                    };
                    var t = [];
                    this.nodes().map(function(e) {
                        var i = e.getClientRect({
                            skipTransform: !0,
                            skipShadow: !0,
                            skipStroke: _this.ignoreStroke()
                        });
                        var r = [
                            {
                                x: i.x,
                                y: i.y
                            },
                            {
                                x: i.x + i.width,
                                y: i.y
                            },
                            {
                                x: i.x + i.width,
                                y: i.y + i.height
                            },
                            {
                                x: i.x,
                                y: i.y + i.height
                            }
                        ], a = e.getAbsoluteTransform();
                        r.forEach(function(e) {
                            var i = a.point(e);
                            t.push(i);
                        });
                    });
                    var e = new a;
                    var r, n, s, o;
                    e.rotate(-i.getAngle(this.rotation())), t.forEach(function(t) {
                        var i = e.point(t);
                        void 0 === r && (r = s = i.x, n = o = i.y), r = Math.min(r, i.x), n = Math.min(n, i.y), s = Math.max(s, i.x), o = Math.max(o, i.y);
                    }), e.invert();
                    var h = e.point({
                        x: r,
                        y: n
                    });
                    return {
                        x: h.x,
                        y: h.y,
                        width: s - r,
                        height: o - n,
                        rotation: i.getAngle(this.rotation())
                    };
                }
            },
            {
                key: "getX",
                value: function getX() {
                    return this._getNodeRect().x;
                }
            },
            {
                key: "getY",
                value: function getY() {
                    return this._getNodeRect().y;
                }
            },
            {
                key: "getWidth",
                value: function getWidth() {
                    return this._getNodeRect().width;
                }
            },
            {
                key: "getHeight",
                value: function getHeight() {
                    return this._getNodeRect().height;
                }
            },
            {
                key: "_createElements",
                value: function _createElements() {
                    this._createBack(), Ut.forEach((function(t) {
                        this._createAnchor(t);
                    }).bind(this)), this._createAnchor("rotater");
                }
            },
            {
                key: "_createAnchor",
                value: function _createAnchor(t) {
                    var _this = this;
                    var e = new Tt({
                        stroke: "rgb(0, 161, 255)",
                        fill: "white",
                        strokeWidth: 1,
                        name: t + " _anchor",
                        dragDistance: 0,
                        draggable: !0,
                        hitStrokeWidth: jt ? 10 : "auto"
                    }), r = this;
                    e.on("mousedown touchstart", function(t) {
                        r._handleMouseDown(t);
                    }), e.on("dragstart", function(t) {
                        e.stopDrag(), t.cancelBubble = !0;
                    }), e.on("dragend", function(t) {
                        t.cancelBubble = !0;
                    }), e.on("mouseenter", function() {
                        var r = i.getAngle(_this.rotation()), a = function(t, e) {
                            if ("rotater" === t) return "crosshair";
                            e += c.degToRad(Xt[t] || 0);
                            var i = (c.radToDeg(e) % 360 + 360) % 360;
                            return c._inRange(i, 337.5, 360) || c._inRange(i, 0, 22.5) ? "ns-resize" : c._inRange(i, 22.5, 67.5) ? "nesw-resize" : c._inRange(i, 67.5, 112.5) ? "ew-resize" : c._inRange(i, 112.5, 157.5) ? "nwse-resize" : c._inRange(i, 157.5, 202.5) ? "ns-resize" : c._inRange(i, 202.5, 247.5) ? "nesw-resize" : c._inRange(i, 247.5, 292.5) ? "ew-resize" : c._inRange(i, 292.5, 337.5) ? "nwse-resize" : (c.error("Transformer has unknown angle for cursor detection: " + i), "pointer");
                        }(t, r);
                        e.getStage().content && (e.getStage().content.style.cursor = a), _this._cursorChange = !0;
                    }), e.on("mouseout", function() {
                        e.getStage().content && (e.getStage().content.style.cursor = ""), _this._cursorChange = !1;
                    }), this.add(e);
                }
            },
            {
                key: "_createBack",
                value: function _createBack() {
                    var _this = this;
                    var t = new $({
                        name: "back",
                        width: 0,
                        height: 0,
                        draggable: !0,
                        sceneFunc: function sceneFunc(t) {
                            var e = this.getParent(), i = e.padding();
                            t.beginPath(), t.rect(-i, -i, this.width() + 2 * i, this.height() + 2 * i), t.moveTo(this.width() / 2, -i), e.rotateEnabled() && t.lineTo(this.width() / 2, -e.rotateAnchorOffset() * c._sign(this.height()) - i), t.fillStrokeShape(this);
                        },
                        hitFunc: function(t, e) {
                            if (_this.shouldOverdrawWholeArea()) {
                                var i = _this.padding();
                                t.beginPath(), t.rect(-i, -i, e.width() + 2 * i, e.height() + 2 * i), t.fillStrokeShape(e);
                            }
                        }
                    });
                    this.add(t), this._proxyDrag(t), t.on("dragstart", function(t) {
                        t.cancelBubble = !0;
                    }), t.on("dragmove", function(t) {
                        t.cancelBubble = !0;
                    }), t.on("dragend", function(t) {
                        t.cancelBubble = !0;
                    }), this.on("dragmove", function(t) {
                        _this.update();
                    });
                }
            },
            {
                key: "_handleMouseDown",
                value: function _handleMouseDown(t) {
                    this._movingAnchorName = t.target.name().split(" ")[0];
                    var e = this._getNodeRect(), i = e.width, r = e.height, a = Math.sqrt(Math.pow(i, 2) + Math.pow(r, 2));
                    this.sin = Math.abs(r / a), this.cos = Math.abs(i / a), "undefined" != typeof window && (window.addEventListener("mousemove", this._handleMouseMove), window.addEventListener("touchmove", this._handleMouseMove), window.addEventListener("mouseup", this._handleMouseUp, !0), window.addEventListener("touchend", this._handleMouseUp, !0)), this._transforming = !0;
                    var n = t.target.getAbsolutePosition(), s = t.target.getStage().getPointerPosition();
                    this._anchorDragOffset = {
                        x: s.x - n.x,
                        y: s.y - n.y
                    }, this._fire("transformstart", {
                        evt: t,
                        target: this.getNode()
                    }), this._nodes.forEach(function(e) {
                        e._fire("transformstart", {
                            evt: t,
                            target: e
                        });
                    });
                }
            },
            {
                key: "_handleMouseMove",
                value: function _handleMouseMove(t) {
                    var e, r, a, n = this.findOne("." + this._movingAnchorName), s = n.getStage();
                    s.setPointersPositions(t);
                    var o = s.getPointerPosition();
                    var h = {
                        x: o.x - this._anchorDragOffset.x,
                        y: o.y - this._anchorDragOffset.y
                    };
                    var l = n.getAbsolutePosition();
                    n.setAbsolutePosition(h);
                    var d = n.getAbsolutePosition();
                    if (l.x !== d.x || l.y !== d.y) if ("rotater" !== this._movingAnchorName) {
                        var c = this.keepRatio() || t.shiftKey, g = this.centeredScaling() || t.altKey;
                        if ("top-left" === this._movingAnchorName) {
                            if (c) {
                                var _$u = g ? {
                                    x: this.width() / 2,
                                    y: this.height() / 2
                                } : {
                                    x: this.findOne(".bottom-right").x(),
                                    y: this.findOne(".bottom-right").y()
                                };
                                a = Math.sqrt(Math.pow(_$u.x - n.x(), 2) + Math.pow(_$u.y - n.y(), 2));
                                var _$f = this.findOne(".top-left").x() > _$u.x ? -1 : 1, _$p = this.findOne(".top-left").y() > _$u.y ? -1 : 1;
                                e = a * this.cos * _$f, r = a * this.sin * _$p, this.findOne(".top-left").x(_$u.x - e), this.findOne(".top-left").y(_$u.y - r);
                            }
                        } else if ("top-center" === this._movingAnchorName) this.findOne(".top-left").y(n.y());
                        else if ("top-right" === this._movingAnchorName) {
                            if (c) {
                                _$u = g ? {
                                    x: this.width() / 2,
                                    y: this.height() / 2
                                } : {
                                    x: this.findOne(".bottom-left").x(),
                                    y: this.findOne(".bottom-left").y()
                                };
                                a = Math.sqrt(Math.pow(n.x() - _$u.x, 2) + Math.pow(_$u.y - n.y(), 2));
                                _$f = this.findOne(".top-right").x() < _$u.x ? -1 : 1, _$p = this.findOne(".top-right").y() > _$u.y ? -1 : 1;
                                e = a * this.cos * _$f, r = a * this.sin * _$p, this.findOne(".top-right").x(_$u.x + e), this.findOne(".top-right").y(_$u.y - r);
                            }
                            var _$v = n.position();
                            this.findOne(".top-left").y(_$v.y), this.findOne(".bottom-right").x(_$v.x);
                        } else if ("middle-left" === this._movingAnchorName) this.findOne(".top-left").x(n.x());
                        else if ("middle-right" === this._movingAnchorName) this.findOne(".bottom-right").x(n.x());
                        else if ("bottom-left" === this._movingAnchorName) {
                            if (c) {
                                _$u = g ? {
                                    x: this.width() / 2,
                                    y: this.height() / 2
                                } : {
                                    x: this.findOne(".top-right").x(),
                                    y: this.findOne(".top-right").y()
                                };
                                a = Math.sqrt(Math.pow(_$u.x - n.x(), 2) + Math.pow(n.y() - _$u.y, 2));
                                _$f = _$u.x < n.x() ? -1 : 1, _$p = n.y() < _$u.y ? -1 : 1;
                                e = a * this.cos * _$f, r = a * this.sin * _$p, n.x(_$u.x - e), n.y(_$u.y + r);
                            }
                            _$v = n.position(), this.findOne(".top-left").x(_$v.x), this.findOne(".bottom-right").y(_$v.y);
                        } else if ("bottom-center" === this._movingAnchorName) this.findOne(".bottom-right").y(n.y());
                        else if ("bottom-right" === this._movingAnchorName) {
                            if (c) {
                                _$u = g ? {
                                    x: this.width() / 2,
                                    y: this.height() / 2
                                } : {
                                    x: this.findOne(".top-left").x(),
                                    y: this.findOne(".top-left").y()
                                };
                                a = Math.sqrt(Math.pow(n.x() - _$u.x, 2) + Math.pow(n.y() - _$u.y, 2));
                                _$f = this.findOne(".bottom-right").x() < _$u.x ? -1 : 1, _$p = this.findOne(".bottom-right").y() < _$u.y ? -1 : 1;
                                e = a * this.cos * _$f, r = a * this.sin * _$p, this.findOne(".bottom-right").x(_$u.x + e), this.findOne(".bottom-right").y(_$u.y + r);
                            }
                        } else console.error(new Error("Wrong position argument of selection resizer: " + this._movingAnchorName));
                        if (g = this.centeredScaling() || t.altKey) {
                            var _$m = this.findOne(".top-left"), _$_ = this.findOne(".bottom-right"), _$y = _$m.x(), x = _$m.y(), b = this.getWidth() - _$_.x(), S = this.getHeight() - _$_.y();
                            _$_.move({
                                x: -_$y,
                                y: -x
                            }), _$m.move({
                                x: b,
                                y: S
                            });
                        }
                        var w = this.findOne(".top-left").getAbsolutePosition();
                        e = w.x, r = w.y;
                        var C = this.findOne(".bottom-right").x() - this.findOne(".top-left").x(), k = this.findOne(".bottom-right").y() - this.findOne(".top-left").y();
                        this._fitNodesInto({
                            x: e,
                            y: r,
                            width: C,
                            height: k,
                            rotation: i.getAngle(this.rotation())
                        }, t);
                    } else {
                        var P = this._getNodeRect();
                        e = n.x() - P.width / 2, r = -n.y() + P.height / 2;
                        var a1 = Math.atan2(-r, e) + Math.PI / 2;
                        P.height < 0 && (a1 -= Math.PI);
                        var s1 = i.getAngle(this.rotation()) + a1, o1 = i.getAngle(this.rotationSnapTolerance()), h1 = Vt(P, function(t, e, r) {
                            var a = e;
                            for(var n = 0; n < t.length; n++){
                                var s = i.getAngle(t[n]), o = Math.abs(s - e) % (2 * Math.PI);
                                Math.min(o, 2 * Math.PI - o) < r && (a = s);
                            }
                            return a;
                        }(this.rotationSnaps(), s1, o1) - P.rotation);
                        this._fitNodesInto(h1, t);
                    }
                }
            },
            {
                key: "_handleMouseUp",
                value: function _handleMouseUp(t) {
                    this._removeEvents(t);
                }
            },
            {
                key: "getAbsoluteTransform",
                value: function getAbsoluteTransform() {
                    return this.getTransform();
                }
            },
            {
                key: "_removeEvents",
                value: function _removeEvents(t) {
                    if (this._transforming) {
                        this._transforming = !1, "undefined" != typeof window && (window.removeEventListener("mousemove", this._handleMouseMove), window.removeEventListener("touchmove", this._handleMouseMove), window.removeEventListener("mouseup", this._handleMouseUp, !0), window.removeEventListener("touchend", this._handleMouseUp, !0));
                        var e = this.getNode();
                        this._fire("transformend", {
                            evt: t,
                            target: e
                        }), e && this._nodes.forEach(function(e) {
                            e._fire("transformend", {
                                evt: t,
                                target: e
                            });
                        }), this._movingAnchorName = null;
                    }
                }
            },
            {
                key: "_fitNodesInto",
                value: function _fitNodesInto(t, e) {
                    var _this = this;
                    var r = this._getNodeRect();
                    if (c._inRange(t.width, 2 * -this.padding() - 1, 1)) return void this.update();
                    if (c._inRange(t.height, 2 * -this.padding() - 1, 1)) return void this.update();
                    var n = this.flipEnabled();
                    var s = new a;
                    if (s.rotate(i.getAngle(this.rotation())), this._movingAnchorName && t.width < 0 && this._movingAnchorName.indexOf("left") >= 0) {
                        var e1 = s.point({
                            x: 2 * -this.padding(),
                            y: 0
                        });
                        if (t.x += e1.x, t.y += e1.y, t.width += 2 * this.padding(), this._movingAnchorName = this._movingAnchorName.replace("left", "right"), this._anchorDragOffset.x -= e1.x, this._anchorDragOffset.y -= e1.y, !n) return void this.update();
                    } else if (this._movingAnchorName && t.width < 0 && this._movingAnchorName.indexOf("right") >= 0) {
                        var e2 = s.point({
                            x: 2 * this.padding(),
                            y: 0
                        });
                        if (this._movingAnchorName = this._movingAnchorName.replace("right", "left"), this._anchorDragOffset.x -= e2.x, this._anchorDragOffset.y -= e2.y, t.width += 2 * this.padding(), !n) return void this.update();
                    }
                    if (this._movingAnchorName && t.height < 0 && this._movingAnchorName.indexOf("top") >= 0) {
                        var e3 = s.point({
                            x: 0,
                            y: 2 * -this.padding()
                        });
                        if (t.x += e3.x, t.y += e3.y, this._movingAnchorName = this._movingAnchorName.replace("top", "bottom"), this._anchorDragOffset.x -= e3.x, this._anchorDragOffset.y -= e3.y, t.height += 2 * this.padding(), !n) return void this.update();
                    } else if (this._movingAnchorName && t.height < 0 && this._movingAnchorName.indexOf("bottom") >= 0) {
                        var e4 = s.point({
                            x: 0,
                            y: 2 * this.padding()
                        });
                        if (this._movingAnchorName = this._movingAnchorName.replace("bottom", "top"), this._anchorDragOffset.x -= e4.x, this._anchorDragOffset.y -= e4.y, t.height += 2 * this.padding(), !n) return void this.update();
                    }
                    if (this.boundBoxFunc()) {
                        var e5 = this.boundBoxFunc()(r, t);
                        e5 ? t = e5 : c.warn("boundBoxFunc returned falsy. You should return new bound rect from it!");
                    }
                    var o = new a;
                    o.translate(r.x, r.y), o.rotate(r.rotation), o.scale(r.width / 1e7, r.height / 1e7);
                    var h = new a;
                    h.translate(t.x, t.y), h.rotate(t.rotation), h.scale(t.width / 1e7, t.height / 1e7);
                    var l = h.multiply(o.invert());
                    this._nodes.forEach(function(t) {
                        var i;
                        var r = t.getParent().getAbsoluteTransform(), n = t.getTransform().copy();
                        n.translate(t.offsetX(), t.offsetY());
                        var s = new a;
                        s.multiply(r.copy().invert()).multiply(l).multiply(r).multiply(n);
                        var o = s.decompose();
                        t.setAttrs(o), _this._fire("transform", {
                            evt: e,
                            target: t
                        }), t._fire("transform", {
                            evt: e,
                            target: t
                        }), null === (i = t.getLayer()) || void 0 === i || i.batchDraw();
                    }), this.rotation(c._getRotation(t.rotation)), this._resetTransformCache(), this.update(), this.getLayer().batchDraw();
                }
            },
            {
                key: "forceUpdate",
                value: function forceUpdate() {
                    this._resetTransformCache(), this.update();
                }
            },
            {
                key: "_batchChangeChild",
                value: function _batchChangeChild(t, e) {
                    this.findOne(t).setAttrs(e);
                }
            },
            {
                key: "update",
                value: function update() {
                    var _this = this;
                    var t, e = this._getNodeRect();
                    this.rotation(c._getRotation(e.rotation));
                    var i = e.width, r = e.height, a = this.enabledAnchors(), n = this.resizeEnabled(), s = this.padding(), o = this.anchorSize();
                    this.find("._anchor").forEach(function(t) {
                        t.setAttrs({
                            width: o,
                            height: o,
                            offsetX: o / 2,
                            offsetY: o / 2,
                            stroke: _this.anchorStroke(),
                            strokeWidth: _this.anchorStrokeWidth(),
                            fill: _this.anchorFill(),
                            cornerRadius: _this.anchorCornerRadius()
                        });
                    }), this._batchChangeChild(".top-left", {
                        x: 0,
                        y: 0,
                        offsetX: o / 2 + s,
                        offsetY: o / 2 + s,
                        visible: n && a.indexOf("top-left") >= 0
                    }), this._batchChangeChild(".top-center", {
                        x: i / 2,
                        y: 0,
                        offsetY: o / 2 + s,
                        visible: n && a.indexOf("top-center") >= 0
                    }), this._batchChangeChild(".top-right", {
                        x: i,
                        y: 0,
                        offsetX: o / 2 - s,
                        offsetY: o / 2 + s,
                        visible: n && a.indexOf("top-right") >= 0
                    }), this._batchChangeChild(".middle-left", {
                        x: 0,
                        y: r / 2,
                        offsetX: o / 2 + s,
                        visible: n && a.indexOf("middle-left") >= 0
                    }), this._batchChangeChild(".middle-right", {
                        x: i,
                        y: r / 2,
                        offsetX: o / 2 - s,
                        visible: n && a.indexOf("middle-right") >= 0
                    }), this._batchChangeChild(".bottom-left", {
                        x: 0,
                        y: r,
                        offsetX: o / 2 + s,
                        offsetY: o / 2 - s,
                        visible: n && a.indexOf("bottom-left") >= 0
                    }), this._batchChangeChild(".bottom-center", {
                        x: i / 2,
                        y: r,
                        offsetY: o / 2 - s,
                        visible: n && a.indexOf("bottom-center") >= 0
                    }), this._batchChangeChild(".bottom-right", {
                        x: i,
                        y: r,
                        offsetX: o / 2 - s,
                        offsetY: o / 2 - s,
                        visible: n && a.indexOf("bottom-right") >= 0
                    }), this._batchChangeChild(".rotater", {
                        x: i / 2,
                        y: -this.rotateAnchorOffset() * c._sign(r) - s,
                        visible: this.rotateEnabled()
                    }), this._batchChangeChild(".back", {
                        width: i,
                        height: r,
                        visible: this.borderEnabled(),
                        stroke: this.borderStroke(),
                        strokeWidth: this.borderStrokeWidth(),
                        dash: this.borderDash(),
                        x: 0,
                        y: 0
                    }), null === (t = this.getLayer()) || void 0 === t || t.batchDraw();
                }
            },
            {
                key: "isTransforming",
                value: function isTransforming() {
                    return this._transforming;
                }
            },
            {
                key: "stopTransform",
                value: function stopTransform() {
                    if (this._transforming) {
                        this._removeEvents();
                        var t = this.findOne("." + this._movingAnchorName);
                        t && t.stopDrag();
                    }
                }
            },
            {
                key: "destroy",
                value: function destroy() {
                    return this.getStage() && this._cursorChange && this.getStage().content && (this.getStage().content.style.cursor = ""), at.prototype.destroy.call(this), this.detach(), this._removeEvents(), this;
                }
            },
            {
                key: "toObject",
                value: function toObject() {
                    return L.prototype.toObject.call(this);
                }
            }
        ]);
        return Kt;
    }(at);
    Kt.prototype.className = "Transformer", r(Kt), x.addGetterSetter(Kt, "enabledAnchors", Ut, function(t) {
        return _instanceof(t, Array) || c.warn("enabledAnchors value should be an array"), _instanceof(t, Array) && t.forEach(function(t) {
            -1 === Ut.indexOf(t) && c.warn("Unknown anchor name: " + t + ". Available names are: " + Ut.join(", "));
        }), t || [];
    }), x.addGetterSetter(Kt, "flipEnabled", !0, y()), x.addGetterSetter(Kt, "resizeEnabled", !0), x.addGetterSetter(Kt, "anchorSize", 10, f()), x.addGetterSetter(Kt, "rotateEnabled", !0), x.addGetterSetter(Kt, "rotationSnaps", []), x.addGetterSetter(Kt, "rotateAnchorOffset", 50, f()), x.addGetterSetter(Kt, "rotationSnapTolerance", 5, f()), x.addGetterSetter(Kt, "borderEnabled", !0), x.addGetterSetter(Kt, "anchorStroke", "rgb(0, 161, 255)"), x.addGetterSetter(Kt, "anchorStrokeWidth", 1, f()), x.addGetterSetter(Kt, "anchorFill", "white"), x.addGetterSetter(Kt, "anchorCornerRadius", 0, f()), x.addGetterSetter(Kt, "borderStroke", "rgb(0, 161, 255)"), x.addGetterSetter(Kt, "borderStrokeWidth", 1, f()), x.addGetterSetter(Kt, "borderDash"), x.addGetterSetter(Kt, "keepRatio", !0), x.addGetterSetter(Kt, "centeredScaling", !1), x.addGetterSetter(Kt, "ignoreStroke", !1), x.addGetterSetter(Kt, "padding", 0, f()), x.addGetterSetter(Kt, "node"), x.addGetterSetter(Kt, "nodes"), x.addGetterSetter(Kt, "boundBoxFunc"), x.addGetterSetter(Kt, "shouldOverdrawWholeArea", !1), x.addGetterSetter(Kt, "useSingleNodeRotation", !0), x.backCompat(Kt, {
        lineEnabled: "borderEnabled",
        rotateHandlerOffset: "rotateAnchorOffset",
        enabledHandlers: "enabledAnchors"
    });
    var Qt = /*#__PURE__*/ function($) {
        _inherits(Qt, $);
        var _super = _create_super(Qt);
        function Qt() {
            _class_call_check(this, Qt);
            return _super.apply(this, arguments);
        }
        _create_class(Qt, [
            {
                key: "_sceneFunc",
                value: function _sceneFunc(t) {
                    t.beginPath(), t.arc(0, 0, this.radius(), 0, i.getAngle(this.angle()), this.clockwise()), t.lineTo(0, 0), t.closePath(), t.fillStrokeShape(this);
                }
            },
            {
                key: "getWidth",
                value: function getWidth() {
                    return 2 * this.radius();
                }
            },
            {
                key: "getHeight",
                value: function getHeight() {
                    return 2 * this.radius();
                }
            },
            {
                key: "setWidth",
                value: function setWidth(t) {
                    this.radius(t / 2);
                }
            },
            {
                key: "setHeight",
                value: function setHeight(t) {
                    this.radius(t / 2);
                }
            }
        ]);
        return Qt;
    }($);
    function Jt() {
        this.r = 0, this.g = 0, this.b = 0, this.a = 0, this.next = null;
    }
    Qt.prototype.className = "Wedge", Qt.prototype._centroid = !0, Qt.prototype._attrsAffectingSize = [
        "radius"
    ], r(Qt), x.addGetterSetter(Qt, "radius", 0, f()), x.addGetterSetter(Qt, "angle", 0, f()), x.addGetterSetter(Qt, "clockwise", !1), x.backCompat(Qt, {
        angleDeg: "angle",
        getAngleDeg: "getAngle",
        setAngleDeg: "setAngle"
    });
    var Zt = [
        512,
        512,
        456,
        512,
        328,
        456,
        335,
        512,
        405,
        328,
        271,
        456,
        388,
        335,
        292,
        512,
        454,
        405,
        364,
        328,
        298,
        271,
        496,
        456,
        420,
        388,
        360,
        335,
        312,
        292,
        273,
        512,
        482,
        454,
        428,
        405,
        383,
        364,
        345,
        328,
        312,
        298,
        284,
        271,
        259,
        496,
        475,
        456,
        437,
        420,
        404,
        388,
        374,
        360,
        347,
        335,
        323,
        312,
        302,
        292,
        282,
        273,
        265,
        512,
        497,
        482,
        468,
        454,
        441,
        428,
        417,
        405,
        394,
        383,
        373,
        364,
        354,
        345,
        337,
        328,
        320,
        312,
        305,
        298,
        291,
        284,
        278,
        271,
        265,
        259,
        507,
        496,
        485,
        475,
        465,
        456,
        446,
        437,
        428,
        420,
        412,
        404,
        396,
        388,
        381,
        374,
        367,
        360,
        354,
        347,
        341,
        335,
        329,
        323,
        318,
        312,
        307,
        302,
        297,
        292,
        287,
        282,
        278,
        273,
        269,
        265,
        261,
        512,
        505,
        497,
        489,
        482,
        475,
        468,
        461,
        454,
        447,
        441,
        435,
        428,
        422,
        417,
        411,
        405,
        399,
        394,
        389,
        383,
        378,
        373,
        368,
        364,
        359,
        354,
        350,
        345,
        341,
        337,
        332,
        328,
        324,
        320,
        316,
        312,
        309,
        305,
        301,
        298,
        294,
        291,
        287,
        284,
        281,
        278,
        274,
        271,
        268,
        265,
        262,
        259,
        257,
        507,
        501,
        496,
        491,
        485,
        480,
        475,
        470,
        465,
        460,
        456,
        451,
        446,
        442,
        437,
        433,
        428,
        424,
        420,
        416,
        412,
        408,
        404,
        400,
        396,
        392,
        388,
        385,
        381,
        377,
        374,
        370,
        367,
        363,
        360,
        357,
        354,
        350,
        347,
        344,
        341,
        338,
        335,
        332,
        329,
        326,
        323,
        320,
        318,
        315,
        312,
        310,
        307,
        304,
        302,
        299,
        297,
        294,
        292,
        289,
        287,
        285,
        282,
        280,
        278,
        275,
        273,
        271,
        269,
        267,
        265,
        263,
        261,
        259
    ], $t = [
        9,
        11,
        12,
        13,
        13,
        14,
        14,
        15,
        15,
        15,
        15,
        16,
        16,
        16,
        16,
        17,
        17,
        17,
        17,
        17,
        17,
        17,
        18,
        18,
        18,
        18,
        18,
        18,
        18,
        18,
        18,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        19,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        20,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        21,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        22,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        23,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24,
        24
    ];
    x.addGetterSetter(L, "blurRadius", 0, f(), x.afterSetFilter);
    x.addGetterSetter(L, "brightness", 0, f(), x.afterSetFilter);
    x.addGetterSetter(L, "contrast", 0, f(), x.afterSetFilter);
    function te(t, e, i, r, a) {
        var n = i - e, s = a - r;
        return 0 === n ? r + s / 2 : 0 === s ? r : s * ((t - e) / n) + r;
    }
    x.addGetterSetter(L, "embossStrength", .5, f(), x.afterSetFilter), x.addGetterSetter(L, "embossWhiteLevel", .5, f(), x.afterSetFilter), x.addGetterSetter(L, "embossDirection", "top-left", null, x.afterSetFilter), x.addGetterSetter(L, "embossBlend", !1, null, x.afterSetFilter);
    x.addGetterSetter(L, "enhance", 0, f(), x.afterSetFilter);
    x.addGetterSetter(L, "hue", 0, f(), x.afterSetFilter), x.addGetterSetter(L, "saturation", 0, f(), x.afterSetFilter), x.addGetterSetter(L, "luminance", 0, f(), x.afterSetFilter);
    x.addGetterSetter(L, "hue", 0, f(), x.afterSetFilter), x.addGetterSetter(L, "saturation", 0, f(), x.afterSetFilter), x.addGetterSetter(L, "value", 0, f(), x.afterSetFilter);
    function ee(t, e, i) {
        var r = 4 * (i * t.width + e), a = [];
        return a.push(t.data[r++], t.data[r++], t.data[r++], t.data[r++]), a;
    }
    function ie(t, e) {
        return Math.sqrt(Math.pow(t[0] - e[0], 2) + Math.pow(t[1] - e[1], 2) + Math.pow(t[2] - e[2], 2));
    }
    x.addGetterSetter(L, "kaleidoscopePower", 2, f(), x.afterSetFilter), x.addGetterSetter(L, "kaleidoscopeAngle", 0, f(), x.afterSetFilter);
    x.addGetterSetter(L, "threshold", 0, f(), x.afterSetFilter);
    x.addGetterSetter(L, "noise", .2, f(), x.afterSetFilter);
    x.addGetterSetter(L, "pixelSize", 8, f(), x.afterSetFilter);
    x.addGetterSetter(L, "levels", .5, f(), x.afterSetFilter);
    x.addGetterSetter(L, "red", 0, function(t) {
        return this._filterUpToDate = !1, t > 255 ? 255 : t < 0 ? 0 : Math.round(t);
    }), x.addGetterSetter(L, "green", 0, function(t) {
        return this._filterUpToDate = !1, t > 255 ? 255 : t < 0 ? 0 : Math.round(t);
    }), x.addGetterSetter(L, "blue", 0, u, x.afterSetFilter);
    x.addGetterSetter(L, "red", 0, function(t) {
        return this._filterUpToDate = !1, t > 255 ? 255 : t < 0 ? 0 : Math.round(t);
    }), x.addGetterSetter(L, "green", 0, function(t) {
        return this._filterUpToDate = !1, t > 255 ? 255 : t < 0 ? 0 : Math.round(t);
    }), x.addGetterSetter(L, "blue", 0, u, x.afterSetFilter), x.addGetterSetter(L, "alpha", 1, function(t) {
        return this._filterUpToDate = !1, t > 1 ? 1 : t < 0 ? 0 : t;
    });
    x.addGetterSetter(L, "threshold", .5, f(), x.afterSetFilter);
    return ut.Util._assign(ut, {
        Arc: ft,
        Arrow: yt,
        Circle: xt,
        Ellipse: bt,
        Image: St,
        Label: kt,
        Tag: Pt,
        Line: mt,
        Path: _t,
        Rect: Tt,
        RegularPolygon: At,
        Ring: Gt,
        Sprite: Rt,
        Star: Et,
        Text: Nt,
        TextPath: Wt,
        Transformer: Kt,
        Wedge: Qt,
        Filters: {
            Blur: function Blur(t) {
                var e = Math.round(this.blurRadius());
                e > 0 && function(t, e) {
                    var i, r, a, n, s, o, h, l, d, c, g, _$u, _$f, _$p, _$v, _$m, _$_, _$y, x, b, S, w, C, k, P = t.data, T = t.width, A = t.height, M = e + e + 1, G = T - 1, R = A - 1, E = e + 1, L = E * (E + 1) / 2, D = new Jt, O = null, I = D, F = null, N = null, B = Zt[e], z = $t[e];
                    for(a = 1; a < M; a++)I = I.next = new Jt, a === E && (O = I);
                    for(I.next = D, h = o = 0, r = 0; r < A; r++){
                        for(_$m = _$_ = _$y = x = l = d = c = g = 0, _$u = E * (b = P[o]), _$f = E * (S = P[o + 1]), _$p = E * (w = P[o + 2]), _$v = E * (C = P[o + 3]), l += L * b, d += L * S, c += L * w, g += L * C, I = D, a = 0; a < E; a++)I.r = b, I.g = S, I.b = w, I.a = C, I = I.next;
                        for(a = 1; a < E; a++)n = o + ((G < a ? G : a) << 2), l += (I.r = b = P[n]) * (k = E - a), d += (I.g = S = P[n + 1]) * k, c += (I.b = w = P[n + 2]) * k, g += (I.a = C = P[n + 3]) * k, _$m += b, _$_ += S, _$y += w, x += C, I = I.next;
                        for(F = D, N = O, i = 0; i < T; i++)P[o + 3] = C = g * B >> z, 0 !== C ? (C = 255 / C, P[o] = (l * B >> z) * C, P[o + 1] = (d * B >> z) * C, P[o + 2] = (c * B >> z) * C) : P[o] = P[o + 1] = P[o + 2] = 0, l -= _$u, d -= _$f, c -= _$p, g -= _$v, _$u -= F.r, _$f -= F.g, _$p -= F.b, _$v -= F.a, n = h + ((n = i + e + 1) < G ? n : G) << 2, l += _$m += F.r = P[n], d += _$_ += F.g = P[n + 1], c += _$y += F.b = P[n + 2], g += x += F.a = P[n + 3], F = F.next, _$u += b = N.r, _$f += S = N.g, _$p += w = N.b, _$v += C = N.a, _$m -= b, _$_ -= S, _$y -= w, x -= C, N = N.next, o += 4;
                        h += T;
                    }
                    for(i = 0; i < T; i++){
                        for(_$_ = _$y = x = _$m = d = c = g = l = 0, _$u = E * (b = P[o = i << 2]), _$f = E * (S = P[o + 1]), _$p = E * (w = P[o + 2]), _$v = E * (C = P[o + 3]), l += L * b, d += L * S, c += L * w, g += L * C, I = D, a = 0; a < E; a++)I.r = b, I.g = S, I.b = w, I.a = C, I = I.next;
                        for(s = T, a = 1; a <= e; a++)o = s + i << 2, l += (I.r = b = P[o]) * (k = E - a), d += (I.g = S = P[o + 1]) * k, c += (I.b = w = P[o + 2]) * k, g += (I.a = C = P[o + 3]) * k, _$m += b, _$_ += S, _$y += w, x += C, I = I.next, a < R && (s += T);
                        for(o = i, F = D, N = O, r = 0; r < A; r++)P[(n = o << 2) + 3] = C = g * B >> z, C > 0 ? (C = 255 / C, P[n] = (l * B >> z) * C, P[n + 1] = (d * B >> z) * C, P[n + 2] = (c * B >> z) * C) : P[n] = P[n + 1] = P[n + 2] = 0, l -= _$u, d -= _$f, c -= _$p, g -= _$v, _$u -= F.r, _$f -= F.g, _$p -= F.b, _$v -= F.a, n = i + ((n = r + E) < R ? n : R) * T << 2, l += _$m += F.r = P[n], d += _$_ += F.g = P[n + 1], c += _$y += F.b = P[n + 2], g += x += F.a = P[n + 3], F = F.next, _$u += b = N.r, _$f += S = N.g, _$p += w = N.b, _$v += C = N.a, _$m -= b, _$_ -= S, _$y -= w, x -= C, N = N.next, o += T;
                    }
                }(t, e);
            },
            Brighten: function Brighten(t) {
                var e, i = 255 * this.brightness(), r = t.data, a = r.length;
                for(e = 0; e < a; e += 4)r[e] += i, r[e + 1] += i, r[e + 2] += i;
            },
            Contrast: function Contrast(t) {
                var e, i = Math.pow((this.contrast() + 100) / 100, 2), r = t.data, a = r.length, n = 150, s = 150, o = 150;
                for(e = 0; e < a; e += 4)n = r[e], s = r[e + 1], o = r[e + 2], n /= 255, n -= .5, n *= i, n += .5, s /= 255, s -= .5, s *= i, s += .5, o /= 255, o -= .5, o *= i, o += .5, n = (n *= 255) < 0 ? 0 : n > 255 ? 255 : n, s = (s *= 255) < 0 ? 0 : s > 255 ? 255 : s, o = (o *= 255) < 0 ? 0 : o > 255 ? 255 : o, r[e] = n, r[e + 1] = s, r[e + 2] = o;
            },
            Emboss: function Emboss(t) {
                var e = 10 * this.embossStrength(), i = 255 * this.embossWhiteLevel(), r = this.embossDirection(), a = this.embossBlend(), n = 0, s = 0, o = t.data, h = t.width, l = t.height, d = 4 * h, g = l;
                switch(r){
                    case "top-left":
                        n = -1, s = -1;
                        break;
                    case "top":
                        n = -1, s = 0;
                        break;
                    case "top-right":
                        n = -1, s = 1;
                        break;
                    case "right":
                        n = 0, s = 1;
                        break;
                    case "bottom-right":
                        n = 1, s = 1;
                        break;
                    case "bottom":
                        n = 1, s = 0;
                        break;
                    case "bottom-left":
                        n = 1, s = -1;
                        break;
                    case "left":
                        n = 0, s = -1;
                        break;
                    default:
                        c.error("Unknown emboss direction: " + r);
                }
                do {
                    var _$u = (g - 1) * d, _$f = n;
                    g + _$f < 1 && (_$f = 0), g + _$f > l && (_$f = 0);
                    var _$p = (g - 1 + _$f) * h * 4, _$v = h;
                    do {
                        var _$m = _$u + 4 * (_$v - 1), _$_ = s;
                        _$v + _$_ < 1 && (_$_ = 0), _$v + _$_ > h && (_$_ = 0);
                        var _$y = _$p + 4 * (_$v - 1 + _$_), x = o[_$m] - o[_$y], b = o[_$m + 1] - o[_$y + 1], S = o[_$m + 2] - o[_$y + 2], w = x, C = w > 0 ? w : -w;
                        if ((b > 0 ? b : -b) > C && (w = b), (S > 0 ? S : -S) > C && (w = S), w *= e, a) {
                            var k = o[_$m] + w, P = o[_$m + 1] + w, T = o[_$m + 2] + w;
                            o[_$m] = k > 255 ? 255 : k < 0 ? 0 : k, o[_$m + 1] = P > 255 ? 255 : P < 0 ? 0 : P, o[_$m + 2] = T > 255 ? 255 : T < 0 ? 0 : T;
                        } else {
                            var A = i - w;
                            A < 0 ? A = 0 : A > 255 && (A = 255), o[_$m] = o[_$m + 1] = o[_$m + 2] = A;
                        }
                    }while (--_$v);
                }while (--g);
            },
            Enhance: function Enhance(t) {
                var e, i, r, a, n = t.data, s = n.length, o = n[0], h = o, l = n[1], d = l, c = n[2], g = c, _$u = this.enhance();
                if (0 !== _$u) {
                    for(a = 0; a < s; a += 4)(e = n[a + 0]) < o ? o = e : e > h && (h = e), (i = n[a + 1]) < l ? l = i : i > d && (d = i), (r = n[a + 2]) < c ? c = r : r > g && (g = r);
                    var _$f, _$p, _$v, _$m, _$_, _$y, x, b, S;
                    for(h === o && (h = 255, o = 0), d === l && (d = 255, l = 0), g === c && (g = 255, c = 0), _$u > 0 ? (_$p = h + _$u * (255 - h), _$v = o - _$u * (o - 0), _$_ = d + _$u * (255 - d), _$y = l - _$u * (l - 0), b = g + _$u * (255 - g), S = c - _$u * (c - 0)) : (_$p = h + _$u * (h - (_$f = .5 * (h + o))), _$v = o + _$u * (o - _$f), _$_ = d + _$u * (d - (_$m = .5 * (d + l))), _$y = l + _$u * (l - _$m), b = g + _$u * (g - (x = .5 * (g + c))), S = c + _$u * (c - x)), a = 0; a < s; a += 4)n[a + 0] = te(n[a + 0], o, h, _$v, _$p), n[a + 1] = te(n[a + 1], l, d, _$y, _$_), n[a + 2] = te(n[a + 2], c, g, S, b);
                }
            },
            Grayscale: function Grayscale(t) {
                var e, i, r = t.data, a = r.length;
                for(e = 0; e < a; e += 4)i = .34 * r[e] + .5 * r[e + 1] + .16 * r[e + 2], r[e] = i, r[e + 1] = i, r[e + 2] = i;
            },
            HSL: function HSL(t) {
                var e, i, r, a, n, s = t.data, o = s.length, h = Math.pow(2, this.saturation()), l = Math.abs(this.hue() + 360) % 360, d = 127 * this.luminance(), c = 1 * h * Math.cos(l * Math.PI / 180), g = 1 * h * Math.sin(l * Math.PI / 180), _$u = .299 + .701 * c + .167 * g, _$f = .587 - .587 * c + .33 * g, _$p = .114 - .114 * c - .497 * g, _$v = .299 - .299 * c - .328 * g, _$m = .587 + .413 * c + .035 * g, _$_ = .114 - .114 * c + .293 * g, _$y = .299 - .3 * c + 1.25 * g, x = .587 - .586 * c - 1.05 * g, b = .114 + .886 * c - .2 * g;
                for(e = 0; e < o; e += 4)i = s[e + 0], r = s[e + 1], a = s[e + 2], n = s[e + 3], s[e + 0] = _$u * i + _$f * r + _$p * a + d, s[e + 1] = _$v * i + _$m * r + _$_ * a + d, s[e + 2] = _$y * i + x * r + b * a + d, s[e + 3] = n;
            },
            HSV: function HSV(t) {
                var e, i, r, a, n, s = t.data, o = s.length, h = Math.pow(2, this.value()), l = Math.pow(2, this.saturation()), d = Math.abs(this.hue() + 360) % 360, c = h * l * Math.cos(d * Math.PI / 180), g = h * l * Math.sin(d * Math.PI / 180), _$u = .299 * h + .701 * c + .167 * g, _$f = .587 * h - .587 * c + .33 * g, _$p = .114 * h - .114 * c - .497 * g, _$v = .299 * h - .299 * c - .328 * g, _$m = .587 * h + .413 * c + .035 * g, _$_ = .114 * h - .114 * c + .293 * g, _$y = .299 * h - .3 * c + 1.25 * g, x = .587 * h - .586 * c - 1.05 * g, b = .114 * h + .886 * c - .2 * g;
                for(e = 0; e < o; e += 4)i = s[e + 0], r = s[e + 1], a = s[e + 2], n = s[e + 3], s[e + 0] = _$u * i + _$f * r + _$p * a, s[e + 1] = _$v * i + _$m * r + _$_ * a, s[e + 2] = _$y * i + x * r + b * a, s[e + 3] = n;
            },
            Invert: function Invert(t) {
                var e, i = t.data, r = i.length;
                for(e = 0; e < r; e += 4)i[e] = 255 - i[e], i[e + 1] = 255 - i[e + 1], i[e + 2] = 255 - i[e + 2];
            },
            Kaleidoscope: function Kaleidoscope(t) {
                var e, i, r, a, n, s, o, h, l, d = t.width, g = t.height, _$u = Math.round(this.kaleidoscopePower()), _$f = Math.round(this.kaleidoscopeAngle()), _$p = Math.floor(d * (_$f % 360) / 360);
                if (!(_$u < 1)) {
                    var _$v = c.createCanvasElement();
                    _$v.width = d, _$v.height = g;
                    var _$m = _$v.getContext("2d").getImageData(0, 0, d, g);
                    !function(t, e, i) {
                        var r, a, n, s, o = t.data, h = e.data, l = t.width, d = t.height, c = i.polarCenterX || l / 2, g = i.polarCenterY || d / 2, _$u = 0, _$f = 0, _$p = 0, _$v = 0, _$m = Math.sqrt(c * c + g * g);
                        a = l - c, n = d - g, _$m = (s = Math.sqrt(a * a + n * n)) > _$m ? s : _$m;
                        var _$_, _$y, x, b, S = d, w = l, C = 360 / w * Math.PI / 180;
                        for(_$y = 0; _$y < w; _$y += 1)for(x = Math.sin(_$y * C), b = Math.cos(_$y * C), _$_ = 0; _$_ < S; _$_ += 1)a = Math.floor(c + _$m * _$_ / S * b), _$u = o[(r = 4 * ((n = Math.floor(g + _$m * _$_ / S * x)) * l + a)) + 0], _$f = o[r + 1], _$p = o[r + 2], _$v = o[r + 3], h[(r = 4 * (_$y + _$_ * l)) + 0] = _$u, h[r + 1] = _$f, h[r + 2] = _$p, h[r + 3] = _$v;
                    }(t, _$m, {
                        polarCenterX: d / 2,
                        polarCenterY: g / 2
                    });
                    for(var _$_ = d / Math.pow(2, _$u); _$_ <= 8;)_$_ *= 2, _$u -= 1;
                    var _$y = _$_ = Math.ceil(_$_), x = 0, b = _$y, S = 1;
                    for(_$p + _$_ > d && (x = _$y, b = 0, S = -1), i = 0; i < g; i += 1)for(e = x; e !== b; e += S)h = 4 * (d * i + Math.round(e + _$p) % d), a = _$m.data[h + 0], n = _$m.data[h + 1], s = _$m.data[h + 2], o = _$m.data[h + 3], l = 4 * (d * i + e), _$m.data[l + 0] = a, _$m.data[l + 1] = n, _$m.data[l + 2] = s, _$m.data[l + 3] = o;
                    for(i = 0; i < g; i += 1)for(_$y = Math.floor(_$_), r = 0; r < _$u; r += 1){
                        for(e = 0; e < _$y + 1; e += 1)h = 4 * (d * i + e), a = _$m.data[h + 0], n = _$m.data[h + 1], s = _$m.data[h + 2], o = _$m.data[h + 3], l = 4 * (d * i + 2 * _$y - e - 1), _$m.data[l + 0] = a, _$m.data[l + 1] = n, _$m.data[l + 2] = s, _$m.data[l + 3] = o;
                        _$y *= 2;
                    }
                    !function(t, e, i) {
                        var r, a, n, s, o, h, l = t.data, d = e.data, c = t.width, g = t.height, _$u = i.polarCenterX || c / 2, _$f = i.polarCenterY || g / 2, _$p = 0, _$v = 0, _$m = 0, _$_ = 0, _$y = Math.sqrt(_$u * _$u + _$f * _$f);
                        a = c - _$u, n = g - _$f, _$y = (h = Math.sqrt(a * a + n * n)) > _$y ? h : _$y;
                        var x, b, S, w = g, C = c, k = i.polarRotation || 0;
                        for(a = 0; a < c; a += 1)for(n = 0; n < g; n += 1)s = a - _$u, o = n - _$f, x = Math.sqrt(s * s + o * o) * w / _$y, b = (b = (180 * Math.atan2(o, s) / Math.PI + 360 + k) % 360) * C / 360, S = Math.floor(b), _$p = l[(r = 4 * (Math.floor(x) * c + S)) + 0], _$v = l[r + 1], _$m = l[r + 2], _$_ = l[r + 3], d[(r = 4 * (n * c + a)) + 0] = _$p, d[r + 1] = _$v, d[r + 2] = _$m, d[r + 3] = _$_;
                    }(_$m, t, {
                        polarRotation: 0
                    });
                }
            },
            Mask: function Mask(t) {
                var e = function(t, e) {
                    var i = ee(t, 0, 0), r = ee(t, t.width - 1, 0), a = ee(t, 0, t.height - 1), n = ee(t, t.width - 1, t.height - 1), s = e || 10;
                    if (ie(i, r) < s && ie(r, n) < s && ie(n, a) < s && ie(a, i) < s) {
                        for(var o = function(t) {
                            for(var _$e = [
                                0,
                                0,
                                0
                            ], i = 0; i < t.length; i++)_$e[0] += t[i][0], _$e[1] += t[i][1], _$e[2] += t[i][2];
                            return _$e[0] /= t.length, _$e[1] /= t.length, _$e[2] /= t.length, _$e;
                        }([
                            r,
                            i,
                            n,
                            a
                        ]), h = [], l = 0; l < t.width * t.height; l++){
                            var d = ie(o, [
                                t.data[4 * l],
                                t.data[4 * l + 1],
                                t.data[4 * l + 2]
                            ]);
                            h[l] = d < s ? 0 : 255;
                        }
                        return h;
                    }
                }(t, this.threshold());
                return e && function(t, e) {
                    for(var i = 0; i < t.width * t.height; i++)t.data[4 * i + 3] = e[i];
                }(t, e = function(t, e, i) {
                    for(var r = [
                        1 / 9,
                        1 / 9,
                        1 / 9,
                        1 / 9,
                        1 / 9,
                        1 / 9,
                        1 / 9,
                        1 / 9,
                        1 / 9
                    ], a = Math.round(Math.sqrt(r.length)), n = Math.floor(a / 2), s = [], o = 0; o < i; o++)for(var h = 0; h < e; h++){
                        for(var l = o * e + h, d = 0, c = 0; c < a; c++)for(var g = 0; g < a; g++){
                            var _$u = o + c - n, _$f = h + g - n;
                            if (_$u >= 0 && _$u < i && _$f >= 0 && _$f < e) {
                                var _$p = r[c * a + g];
                                d += t[_$u * e + _$f] * _$p;
                            }
                        }
                        s[l] = d;
                    }
                    return s;
                }(e = function(t, e, i) {
                    for(var r = [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ], a = Math.round(Math.sqrt(r.length)), n = Math.floor(a / 2), s = [], o = 0; o < i; o++)for(var h = 0; h < e; h++){
                        for(var l = o * e + h, d = 0, c = 0; c < a; c++)for(var g = 0; g < a; g++){
                            var _$u = o + c - n, _$f = h + g - n;
                            if (_$u >= 0 && _$u < i && _$f >= 0 && _$f < e) {
                                var _$p = r[c * a + g];
                                d += t[_$u * e + _$f] * _$p;
                            }
                        }
                        s[l] = d >= 1020 ? 255 : 0;
                    }
                    return s;
                }(e = function(t, e, i) {
                    for(var r = [
                        1,
                        1,
                        1,
                        1,
                        0,
                        1,
                        1,
                        1,
                        1
                    ], a = Math.round(Math.sqrt(r.length)), n = Math.floor(a / 2), s = [], o = 0; o < i; o++)for(var h = 0; h < e; h++){
                        for(var l = o * e + h, d = 0, c = 0; c < a; c++)for(var g = 0; g < a; g++){
                            var _$u = o + c - n, _$f = h + g - n;
                            if (_$u >= 0 && _$u < i && _$f >= 0 && _$f < e) {
                                var _$p = r[c * a + g];
                                d += t[_$u * e + _$f] * _$p;
                            }
                        }
                        s[l] = 2040 === d ? 255 : 0;
                    }
                    return s;
                }(e, t.width, t.height), t.width, t.height), t.width, t.height)), t;
            },
            Noise: function Noise(t) {
                var e, i = 255 * this.noise(), r = t.data, a = r.length, n = i / 2;
                for(e = 0; e < a; e += 4)r[e + 0] += n - 2 * n * Math.random(), r[e + 1] += n - 2 * n * Math.random(), r[e + 2] += n - 2 * n * Math.random();
            },
            Pixelate: function Pixelate(t) {
                var e, i, r, a, n, s, o, h, l, d, g, _$u, _$f, _$p, _$v = Math.ceil(this.pixelSize()), _$m = t.width, _$_ = t.height, _$y = Math.ceil(_$m / _$v), x = Math.ceil(_$_ / _$v), b = t.data;
                if (_$v <= 0) c.error("pixelSize value can not be <= 0");
                else for(_$u = 0; _$u < _$y; _$u += 1)for(_$f = 0; _$f < x; _$f += 1){
                    for(a = 0, n = 0, s = 0, o = 0, l = (h = _$u * _$v) + _$v, g = (d = _$f * _$v) + _$v, _$p = 0, e = h; e < l; e += 1)if (!(e >= _$m)) for(i = d; i < g; i += 1)i >= _$_ || (a += b[(r = 4 * (_$m * i + e)) + 0], n += b[r + 1], s += b[r + 2], o += b[r + 3], _$p += 1);
                    for(a /= _$p, n /= _$p, s /= _$p, o /= _$p, e = h; e < l; e += 1)if (!(e >= _$m)) for(i = d; i < g; i += 1)i >= _$_ || (b[(r = 4 * (_$m * i + e)) + 0] = a, b[r + 1] = n, b[r + 2] = s, b[r + 3] = o);
                }
            },
            Posterize: function Posterize(t) {
                var e, i = Math.round(254 * this.levels()) + 1, r = t.data, a = r.length, n = 255 / i;
                for(e = 0; e < a; e += 1)r[e] = Math.floor(r[e] / n) * n;
            },
            RGB: function RGB(t) {
                var e, i, r = t.data, a = r.length, n = this.red(), s = this.green(), o = this.blue();
                for(e = 0; e < a; e += 4)i = (.34 * r[e] + .5 * r[e + 1] + .16 * r[e + 2]) / 255, r[e] = i * n, r[e + 1] = i * s, r[e + 2] = i * o, r[e + 3] = r[e + 3];
            },
            RGBA: function RGBA(t) {
                var e, i, r = t.data, a = r.length, n = this.red(), s = this.green(), o = this.blue(), h = this.alpha();
                for(e = 0; e < a; e += 4)i = 1 - h, r[e] = n * h + r[e] * i, r[e + 1] = s * h + r[e + 1] * i, r[e + 2] = o * h + r[e + 2] * i;
            },
            Sepia: function Sepia(t) {
                var e, i, r, a, n = t.data, s = n.length;
                for(e = 0; e < s; e += 4)i = n[e + 0], r = n[e + 1], a = n[e + 2], n[e + 0] = Math.min(255, .393 * i + .769 * r + .189 * a), n[e + 1] = Math.min(255, .349 * i + .686 * r + .168 * a), n[e + 2] = Math.min(255, .272 * i + .534 * r + .131 * a);
            },
            Solarize: function Solarize(t) {
                var e = t.data, i = t.width, r = 4 * i, a = t.height;
                do {
                    var n = (a - 1) * r, s = i;
                    do {
                        var o = n + 4 * (s - 1), h = e[o], l = e[o + 1], d = e[o + 2];
                        h > 127 && (h = 255 - h), l > 127 && (l = 255 - l), d > 127 && (d = 255 - d), e[o] = h, e[o + 1] = l, e[o + 2] = d;
                    }while (--s);
                }while (--a);
            },
            Threshold: function Threshold(t) {
                var e, i = 255 * this.threshold(), r = t.data, a = r.length;
                for(e = 0; e < a; e += 1)r[e] = r[e] < i ? 0 : 255;
            }
        }
    });
});

